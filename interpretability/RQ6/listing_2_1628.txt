--------------------------------------------------------------------------------------------------------------
Example ids:  1628 project:  FFmpeg commit id:  89f464e9c229006e16f6bb5403c5529fdd0a9edd Number of lines:  166 Ground Truth:  1628
Original lines: 
Incorrectly  predicted by :  ['linevul', 'codebert', 'PLBART', 'devign', 'vulberta_cnn', 'vulberta_mlp']
0 static int decode_frame(AVCodecContext *avctx,                                                                         {'linevul': 14, 'codebert': 7, 'PLBART': 2, 'devign': 69, 'regvd': 30, 'vulberta_cnn': 59, 'vulberta_mlp': 0}
2                         void *data, int *got_frame, AVPacket *avpkt)                                                   {'linevul': 0, 'codebert': 1, 'PLBART': 0, 'devign': 25, 'regvd': 46, 'vulberta_cnn': 7, 'vulberta_mlp': 15}
4 {                                                                                                                      {'linevul': 29, 'codebert': 20, 'PLBART': 13, 'devign': 359, 'regvd': 140, 'vulberta_cnn': 39, 'vulberta_mlp': 92}
6     TiffContext *const s = avctx->priv_data;                                                                           {'linevul': 13, 'codebert': 2, 'PLBART': 4, 'devign': 9, 'regvd': 11, 'vulberta_cnn': 75, 'vulberta_mlp': 34}
8     AVFrame *const p = data;                                                                                           {'linevul': 21, 'codebert': 12, 'PLBART': 7, 'devign': 42, 'regvd': 67, 'vulberta_cnn': 35, 'vulberta_mlp': 26}
10     ThreadFrame frame = { .f = data };                                                                                {'linevul': 15, 'codebert': 6, 'PLBART': 5, 'devign': 96, 'regvd': 113, 'vulberta_cnn': 6, 'vulberta_mlp': 91}
12     unsigned off;                                                                                                     {'linevul': 27, 'codebert': 15, 'PLBART': 11, 'devign': 131, 'regvd': 125, 'vulberta_cnn': 29, 'vulberta_mlp': 90}
14     int le, ret, plane, planes;                                                                                       {'linevul': 16, 'codebert': 14, 'PLBART': 6, 'devign': 107, 'regvd': 104, 'vulberta_cnn': 4, 'vulberta_mlp': 89}
16     int i, j, entries, stride;                                                                                        {'linevul': 17, 'codebert': 16, 'PLBART': 9, 'devign': 123, 'regvd': 115, 'vulberta_cnn': 15, 'vulberta_mlp': 88}
18     unsigned soff, ssize;                                                                                             {'linevul': 22, 'codebert': 11, 'PLBART': 8, 'devign': 117, 'regvd': 103, 'vulberta_cnn': 8, 'vulberta_mlp': 20}
20     uint8_t *dst;                                                                                                     {'linevul': 20, 'codebert': 4, 'PLBART': 10, 'devign': 119, 'regvd': 91, 'vulberta_cnn': 24, 'vulberta_mlp': 87}
22     GetByteContext stripsizes;                                                                                        {'linevul': 25, 'codebert': 8, 'PLBART': 3, 'devign': 124, 'regvd': 111, 'vulberta_cnn': 83, 'vulberta_mlp': 86}
24     GetByteContext stripdata;                                                                                         {'linevul': 24, 'codebert': 5, 'PLBART': 12, 'devign': 106, 'regvd': 112, 'vulberta_cnn': 17, 'vulberta_mlp': 85}
28     bytestream2_init(&s->gb, avpkt->data, avpkt->size);                                                               {'linevul': 4, 'codebert': 3, 'PLBART': 1, 'devign': 33, 'regvd': 5, 'vulberta_cnn': 58, 'vulberta_mlp': 5}
32     // parse image header                                                                                             {'linevul': 26, 'codebert': 17, 'PLBART': -1, 'devign': 130, 'regvd': 126, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
34     if ((ret = ff_tdecode_header(&s->gb, &le, &off))) {                                                               {'linevul': 5, 'codebert': 0, 'PLBART': -1, 'devign': 52, 'regvd': 12, 'vulberta_cnn': 89, 'vulberta_mlp': 4}
36         av_log(avctx, AV_LOG_ERROR, "Invalid TIFF header\n");                                                         {'linevul': 2, 'codebert': 9, 'PLBART': -1, 'devign': 116, 'regvd': 22, 'vulberta_cnn': 66, 'vulberta_mlp': 2}
38         return ret;                                                                                                   {'linevul': 23, 'codebert': 21, 'PLBART': -1, 'devign': 129, 'regvd': 132, 'vulberta_cnn': 32, 'vulberta_mlp': 10}
40     } else if (off >= UINT_MAX - 14 || avpkt->size < off + 14) {                                                      {'linevul': 3, 'codebert': 13, 'PLBART': -1, 'devign': 48, 'regvd': 10, 'vulberta_cnn': 5, 'vulberta_mlp': 8}
42         av_log(avctx, AV_LOG_ERROR, "IFD offset is greater than image size\n");                                       {'linevul': 1, 'codebert': 10, 'PLBART': -1, 'devign': 110, 'regvd': 6, 'vulberta_cnn': 44, 'vulberta_mlp': 7}
44         return AVERROR_INVALIDDATA;                                                                                   {'linevul': 12, 'codebert': 18, 'PLBART': -1, 'devign': 105, 'regvd': 99, 'vulberta_cnn': 86, 'vulberta_mlp': 3}
46     }                                                                                                                 {'linevul': 28, 'codebert': 22, 'PLBART': -1, 'devign': 335, 'regvd': 165, 'vulberta_cnn': 20, 'vulberta_mlp': 1}
48     s->le          = le;                                                                                              {'linevul': 10, 'codebert': 19, 'PLBART': -1, 'devign': 118, 'regvd': 117, 'vulberta_cnn': 41, 'vulberta_mlp': 84}
50     // TIFF_BPP is not a required tag and defaults to 1                                                               {'linevul': 9, 'codebert': -1, 'PLBART': -1, 'devign': 132, 'regvd': 85, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
52     s->bppcount    = s->bpp = 1;                                                                                      {'linevul': 8, 'codebert': -1, 'PLBART': -1, 'devign': 81, 'regvd': 106, 'vulberta_cnn': 62, 'vulberta_mlp': 83}
54     s->photometric = TIFF_PHOTOMETRIC_NONE;                                                                           {'linevul': 6, 'codebert': -1, 'PLBART': -1, 'devign': 92, 'regvd': 36, 'vulberta_cnn': 69, 'vulberta_mlp': 82}
56     s->compr       = TIFF_RAW;                                                                                        {'linevul': 7, 'codebert': -1, 'PLBART': -1, 'devign': 93, 'regvd': 52, 'vulberta_cnn': 53, 'vulberta_mlp': 81}
58     s->fill_order  = 0;                                                                                               {'linevul': 18, 'codebert': -1, 'PLBART': -1, 'devign': 47, 'regvd': 66, 'vulberta_cnn': 18, 'vulberta_mlp': 80}
60     free_geotags(s);                                                                                                  {'linevul': 19, 'codebert': -1, 'PLBART': -1, 'devign': 121, 'regvd': 86, 'vulberta_cnn': 85, 'vulberta_mlp': 12}
64     // Reset these offsets so we can tell if they were set this frame                                                 {'linevul': 11, 'codebert': -1, 'PLBART': -1, 'devign': 133, 'regvd': 92, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
66     s->stripsizesoff = s->strippos = 0;                                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 6, 'regvd': 45, 'vulberta_cnn': 3, 'vulberta_mlp': 37}
68     /* parse image file directory */                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 108, 'regvd': 118, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
70     bytestream2_seek(&s->gb, off, SEEK_SET);                                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 66, 'regvd': 14, 'vulberta_cnn': 61, 'vulberta_mlp': 39}
72     entries = ff_tget_short(&s->gb, le);                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 58, 'regvd': 18, 'vulberta_cnn': 2, 'vulberta_mlp': 22}
74     if (bytestream2_get_bytes_left(&s->gb) < entries * 12)                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 45, 'regvd': 24, 'vulberta_cnn': 74, 'vulberta_mlp': 9}
76         return AVERROR_INVALIDDATA;                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 104, 'regvd': 98, 'vulberta_cnn': 22, 'vulberta_mlp': 14}
78     for (i = 0; i < entries; i++) {                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 18, 'regvd': 101, 'vulberta_cnn': 1, 'vulberta_mlp': 79}
80         if ((ret = tiff_decode_tag(s, p)) < 0)                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 40, 'regvd': 38, 'vulberta_cnn': 49, 'vulberta_mlp': 41}
82             return ret;                                                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 128, 'regvd': 131, 'vulberta_cnn': 48, 'vulberta_mlp': 78}
84     }                                                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 314, 'regvd': 164, 'vulberta_cnn': 38, 'vulberta_mlp': 77}
88     for (i = 0; i<s->geotag_count; i++) {                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 10, 'regvd': 37, 'vulberta_cnn': 92, 'vulberta_mlp': 30}
90         const char *keyname = get_geokey_name(s->geotags[i].key);                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 22, 'regvd': 23, 'vulberta_cnn': 84, 'vulberta_mlp': 33}
92         if (!keyname) {                                                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 120, 'regvd': 133, 'vulberta_cnn': 10, 'vulberta_mlp': 76}
94             av_log(avctx, AV_LOG_WARNING, "Unknown or unsupported GeoTIFF key %d\n", s->geotags[i].key);              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 29, 'regvd': 4, 'vulberta_cnn': 81, 'vulberta_mlp': 18}
96             continue;                                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 135, 'regvd': 136, 'vulberta_cnn': 72, 'vulberta_mlp': 6}
98         }                                                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 305, 'regvd': 163, 'vulberta_cnn': 26, 'vulberta_mlp': 75}
100         if (get_geokey_type(s->geotags[i].key) != s->geotags[i].type) {                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 23, 'regvd': 47, 'vulberta_cnn': 82, 'vulberta_mlp': 36}
102             av_log(avctx, AV_LOG_WARNING, "Type of GeoTIFF key %d is wrong\n", s->geotags[i].key);                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 24, 'regvd': 3, 'vulberta_cnn': 0, 'vulberta_mlp': 17}
104             continue;                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 134, 'regvd': 135, 'vulberta_cnn': 37, 'vulberta_mlp': 74}
106         }                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 300, 'regvd': 162, 'vulberta_cnn': 50, 'vulberta_mlp': 73}
108         ret = av_dict_set(avpriv_frame_get_metadatap(p), keyname, s->geotags[i].val, 0);                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 0, 'regvd': 0, 'vulberta_cnn': 87, 'vulberta_mlp': 23}
110         if (ret<0) {                                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 111, 'regvd': 127, 'vulberta_cnn': 25, 'vulberta_mlp': 72}
112             av_log(avctx, AV_LOG_ERROR, "Writing metadata with key '%s' failed\n", keyname);                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 72, 'regvd': 20, 'vulberta_cnn': 13, 'vulberta_mlp': 71}
114             return ret;                                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 127, 'regvd': 130, 'vulberta_cnn': 63, 'vulberta_mlp': 70}
116         }                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 294, 'regvd': 161, 'vulberta_cnn': 40, 'vulberta_mlp': 69}
118     }                                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 292, 'regvd': 160, 'vulberta_cnn': 30, 'vulberta_mlp': 68}
122     if (!s->strippos && !s->stripoff) {                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 44, 'regvd': 73, 'vulberta_cnn': 21, 'vulberta_mlp': 67}
124         av_log(avctx, AV_LOG_ERROR, "Image data is missing\n");                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 80, 'regvd': 21, 'vulberta_cnn': 91, 'vulberta_mlp': 66}
126         return AVERROR_INVALIDDATA;                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 103, 'regvd': 97, 'vulberta_cnn': 33, 'vulberta_mlp': 65}
128     }                                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 285, 'regvd': 159, 'vulberta_cnn': 55, 'vulberta_mlp': 64}
130     /* now we have the data and may start decoding */                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 109, 'regvd': 119, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
132     if ((ret = init_image(s, &frame)) < 0)                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 56, 'regvd': 39, 'vulberta_cnn': 71, 'vulberta_mlp': 63}
134         return ret;                                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 126, 'regvd': 129, 'vulberta_cnn': 65, 'vulberta_mlp': 62}
138     if (s->strips == 1 && !s->stripsize) {                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 57, 'regvd': 63, 'vulberta_cnn': 43, 'vulberta_mlp': 40}
140         av_log(avctx, AV_LOG_WARNING, "Image data size missing\n");                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 79, 'regvd': 16, 'vulberta_cnn': 90, 'vulberta_mlp': 35}
142         s->stripsize = avpkt->size - s->stripoff;                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 61, 'regvd': 43, 'vulberta_cnn': 79, 'vulberta_mlp': 25}
144     }                                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 275, 'regvd': 158, 'vulberta_cnn': 52, 'vulberta_mlp': 61}
148     if (s->stripsizesoff) {                                                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 60, 'regvd': 62, 'vulberta_cnn': 88, 'vulberta_mlp': 32}
150         if (s->stripsizesoff >= (unsigned)avpkt->size)                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 38, 'regvd': 27, 'vulberta_cnn': 47, 'vulberta_mlp': 27}
152             return AVERROR_INVALIDDATA;                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 102, 'regvd': 96, 'vulberta_cnn': 73, 'vulberta_mlp': 60}
154         bytestream2_init(&stripsizes, avpkt->data + s->stripsizesoff,                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 26, 'regvd': 9, 'vulberta_cnn': 23, 'vulberta_mlp': 19}
156                          avpkt->size - s->stripsizesoff);                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 65, 'regvd': 40, 'vulberta_cnn': 42, 'vulberta_mlp': 11}
158     }                                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 266, 'regvd': 157, 'vulberta_cnn': 36, 'vulberta_mlp': 59}
160     if (s->strippos) {                                                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 54, 'regvd': 110, 'vulberta_cnn': 77, 'vulberta_mlp': 58}
162         if (s->strippos >= (unsigned)avpkt->size)                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 37, 'regvd': 44, 'vulberta_cnn': 68, 'vulberta_mlp': 38}
164             return AVERROR_INVALIDDATA;                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 101, 'regvd': 95, 'vulberta_cnn': 54, 'vulberta_mlp': 57}
166         bytestream2_init(&stripdata, avpkt->data + s->strippos,                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 27, 'regvd': 19, 'vulberta_cnn': 67, 'vulberta_mlp': 42}
168                          avpkt->size - s->strippos);                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 67, 'regvd': 60, 'vulberta_cnn': 78, 'vulberta_mlp': 16}
170     }                                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 259, 'regvd': 156, 'vulberta_cnn': 45, 'vulberta_mlp': 56}
174     if (s->rps <= 0) {                                                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 46, 'regvd': 100, 'vulberta_cnn': 57, 'vulberta_mlp': 55}
176         av_log(avctx, AV_LOG_ERROR, "rps %d invalid\n", s->rps);                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 63, 'regvd': 17, 'vulberta_cnn': 76, 'vulberta_mlp': 29}
178         return AVERROR_INVALIDDATA;                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 100, 'regvd': 94, 'vulberta_cnn': 27, 'vulberta_mlp': 54}
180     }                                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 252, 'regvd': 155, 'vulberta_cnn': 46, 'vulberta_mlp': 53}
184     planes = s->planar ? s->bppcount : 1;                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 62, 'regvd': 90, 'vulberta_cnn': 9, 'vulberta_mlp': 52}
186     for (plane = 0; plane < planes; plane++) {                                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 41, 'regvd': 89, 'vulberta_cnn': 12, 'vulberta_mlp': 51}
188         stride = p->linesize[plane];                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 43, 'regvd': 70, 'vulberta_cnn': 80, 'vulberta_mlp': 50}
190         dst = p->data[plane];                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 15, 'regvd': 84, 'vulberta_cnn': 28, 'vulberta_mlp': 49}
192         for (i = 0; i < s->height; i += s->rps) {                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 5, 'regvd': 64, 'vulberta_cnn': 16, 'vulberta_mlp': 48}
194             if (s->stripsizesoff)                                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 59, 'regvd': 68, 'vulberta_cnn': 14, 'vulberta_mlp': 28}
196                 ssize = ff_tget(&stripsizes, s->sstype, le);                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 34, 'regvd': 13, 'vulberta_cnn': 11, 'vulberta_mlp': 13}
198             else                                                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 241, 'regvd': 139, 'vulberta_cnn': 64, 'vulberta_mlp': 47}
200                 ssize = s->stripsize;                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 91, 'regvd': 87, 'vulberta_cnn': 34, 'vulberta_mlp': 24}
204             if (s->strippos)                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 53, 'regvd': 116, 'vulberta_cnn': 60, 'vulberta_mlp': 46}
206                 soff = ff_tget(&stripdata, s->sot, le);                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 20, 'regvd': 2, 'vulberta_cnn': 31, 'vulberta_mlp': 45}
208             else                                                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 234, 'regvd': 138, 'vulberta_cnn': 51, 'vulberta_mlp': 44}
210                 soff = s->stripoff;                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 82, 'regvd': 65, 'vulberta_cnn': 56, 'vulberta_mlp': 43}
214             if (soff > avpkt->size || ssize > avpkt->size - soff) {                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 64, 'regvd': 59, 'vulberta_cnn': 70, 'vulberta_mlp': 21}
216                 av_log(avctx, AV_LOG_ERROR, "Invalid strip size/offset\n");                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 76, 'regvd': 7, 'vulberta_cnn': 19, 'vulberta_mlp': 31}
218                 return AVERROR_INVALIDDATA;                                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 99, 'regvd': 93, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
220             }                                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 226, 'regvd': 154, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
222             if ((ret = tiff_unpack_strip(s, p, dst, stride, avpkt->data + soff, ssize, i,                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 30, 'regvd': 8, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
224                                          FFMIN(s->rps, s->height - i))) < 0) {                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 12, 'regvd': 102, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
226                 if (avctx->err_recognition & AV_EF_EXPLODE)                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 97, 'regvd': 69, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
228                     return ret;                                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 125, 'regvd': 128, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
230                 break;                                                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 136, 'regvd': 137, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
232             }                                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 219, 'regvd': 153, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
234             dst += s->rps * stride;                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 28, 'regvd': 74, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
236         }                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 216, 'regvd': 152, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
238         if (s->predictor == 2) {                                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 49, 'regvd': 88, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
240             if (s->photometric == TIFF_PHOTOMETRIC_YCBCR) {                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 55, 'regvd': 31, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
242                 av_log(s->avctx, AV_LOG_ERROR, "predictor == 2 with YUV is unsupported");                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 39, 'regvd': 1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
244                 return AVERROR_PATCHWELCOME;                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 122, 'regvd': 114, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
246             }                                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 210, 'regvd': 151, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
248             dst   = p->data[plane];                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 14, 'regvd': 83, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
250             soff  = s->bpp >> 3;                                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 73, 'regvd': 81, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
252             if (s->planar)                                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 68, 'regvd': 124, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
254                 soff  = FFMAX(soff / s->bppcount, 1);                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 31, 'regvd': 25, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
256             ssize = s->width * soff;                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 75, 'regvd': 61, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
258             if (s->avctx->pix_fmt == AV_PIX_FMT_RGB48LE ||                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 78, 'regvd': 35, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
260                 s->avctx->pix_fmt == AV_PIX_FMT_RGBA64LE ||                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 95, 'regvd': 58, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
262                 s->avctx->pix_fmt == AV_PIX_FMT_GRAY16LE ||                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 88, 'regvd': 55, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
264                 s->avctx->pix_fmt == AV_PIX_FMT_YA16LE ||                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 87, 'regvd': 54, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
266                 s->avctx->pix_fmt == AV_PIX_FMT_GBRP16LE ||                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 86, 'regvd': 51, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
268                 s->avctx->pix_fmt == AV_PIX_FMT_GBRAP16LE) {                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 71, 'regvd': 42, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
270                 for (i = 0; i < s->height; i++) {                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 4, 'regvd': 79, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
272                     for (j = soff; j < ssize; j += 2)                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 36, 'regvd': 72, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
274                         AV_WL16(dst + j, AV_RL16(dst + j) + AV_RL16(dst + j - soff));                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 89, 'regvd': 34, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
276                     dst += stride;                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 115, 'regvd': 123, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
278                 }                                                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 193, 'regvd': 150, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
280             } else if (s->avctx->pix_fmt == AV_PIX_FMT_RGB48BE ||                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 77, 'regvd': 29, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
282                        s->avctx->pix_fmt == AV_PIX_FMT_RGBA64BE ||                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 94, 'regvd': 57, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
284                        s->avctx->pix_fmt == AV_PIX_FMT_GRAY16BE ||                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 85, 'regvd': 50, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
286                        s->avctx->pix_fmt == AV_PIX_FMT_YA16BE ||                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 84, 'regvd': 49, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
288                        s->avctx->pix_fmt == AV_PIX_FMT_GBRP16BE ||                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 83, 'regvd': 48, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
290                        s->avctx->pix_fmt == AV_PIX_FMT_GBRAP16BE) {                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 70, 'regvd': 41, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
292                 for (i = 0; i < s->height; i++) {                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 3, 'regvd': 78, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
294                     for (j = soff; j < ssize; j += 2)                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 35, 'regvd': 71, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
296                         AV_WB16(dst + j, AV_RB16(dst + j) + AV_RB16(dst + j - soff));                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 90, 'regvd': 32, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
298                     dst += stride;                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 114, 'regvd': 122, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
300                 }                                                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 181, 'regvd': 149, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
302             } else {                                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 179, 'regvd': 134, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
304                 for (i = 0; i < s->height; i++) {                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 2, 'regvd': 77, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
306                     for (j = soff; j < ssize; j++)                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 16, 'regvd': 80, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
308                         dst[j] += dst[j - soff];                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 50, 'regvd': 109, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
310                     dst += stride;                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 113, 'regvd': 121, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
312                 }                                                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 173, 'regvd': 148, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
314             }                                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 171, 'regvd': 147, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
316         }                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 169, 'regvd': 146, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
320         if (s->photometric == TIFF_PHOTOMETRIC_WHITE_IS_ZERO) {                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 51, 'regvd': 33, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
322             dst = p->data[plane];                                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 13, 'regvd': 82, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
324             for (i = 0; i < s->height; i++) {                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 1, 'regvd': 76, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
326                 for (j = 0; j < stride; j++)                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 11, 'regvd': 105, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
328                     dst[j] = (s->avctx->pix_fmt == AV_PIX_FMT_PAL8 ? (1<<s->bpp) - 1 : 255) - dst[j];                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 21, 'regvd': 15, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
330                 dst += stride;                                                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 112, 'regvd': 120, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
332             }                                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 159, 'regvd': 145, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
334         }                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 157, 'regvd': 144, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
336     }                                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 155, 'regvd': 143, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
340     if (s->planar && s->bppcount > 2) {                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 32, 'regvd': 108, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
342         FFSWAP(uint8_t*, p->data[0],     p->data[2]);                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 7, 'regvd': 26, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
344         FFSWAP(int,      p->linesize[0], p->linesize[2]);                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 17, 'regvd': 53, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
346         FFSWAP(uint8_t*, p->data[0],     p->data[1]);                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 8, 'regvd': 28, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
348         FFSWAP(int,      p->linesize[0], p->linesize[1]);                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 19, 'regvd': 56, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
350     }                                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 146, 'regvd': 142, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
354     *got_frame = 1;                                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 98, 'regvd': 107, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
358     return avpkt->size;                                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 74, 'regvd': 75, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
360 }                                                                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 138, 'regvd': 141, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
-----------------------
Highlighted Lines by at least 3 models: 
0 static int decode_frame(AVCodecContext *avctx,
2                         void *data, int *got_frame, AVPacket *avpkt)
6     TiffContext *const s = avctx->priv_data;
10     ThreadFrame frame = { .f = data };
28     bytestream2_init(&s->gb, avpkt->data, avpkt->size);
34     if ((ret = ff_tdecode_header(&s->gb, &le, &off))) {
36         av_log(avctx, AV_LOG_ERROR, "Invalid TIFF header\n");
40     } else if (off >= UINT_MAX - 14 || avpkt->size < off + 14) {
42         av_log(avctx, AV_LOG_ERROR, "IFD offset is greater than image size\n");
--------------------------------------------------------------------------------------------------------------
1
