{"version":3,"file":"detaching-example.js","sourceRoot":"","sources":["detaching-example.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;EAUE;;;;;;;AAEF,OAAO,EAAE,IAAI,EAAkB,OAAO,EAAE,MAAM,KAAK,CAAC;AACpD,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAC5D,OAAO,EAAE,KAAK,EAAE,MAAM,yBAAyB,CAAC;AAEhD,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AACjD,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AAEvC,OAAO,8BAA8B,CAAC;AAGtC,IAAa,gBAAgB,GAA7B,MAAa,gBAAiB,SAAQ,cAAc;IAApD;;QACY,YAAO,GAAG,IAAI,OAAO,EAAE,CAAC;QAGzB,iBAAY,GAAG,KAAK,CAAC;IA+BhC,CAAC;IA7BU,MAAM;QACT,OAAO,IAAI,CAAA;;;;;;cAML,KAAK,CACH,IAAI,CAAC,YAAY;YACb,CAAC,CAAC,IAAI,CAAA;;yCAEe,IAAI,CAAC,OAAO;;uBAE9B;YACH,CAAC,CAAC,OAAO,CAChB;;6BAEgB,IAAI,CAAC,cAAc;6BACnB,IAAI,CAAC,eAAe;SACxC,CAAC;IACN,CAAC;IAEO,cAAc;QAClB,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;IAC7B,CAAC;IAEO,eAAe;QACnB,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC;IAC3C,CAAC;CACJ,CAAA;AA/BG;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;sDACA;AAJnB,gBAAgB;IAD5B,aAAa,CAAC,mBAAmB,CAAC;GACtB,gBAAgB,CAmC5B;SAnCY,gBAAgB","sourcesContent":["/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { html, TemplateResult, nothing } from 'lit';\nimport { property, customElement } from 'lit/decorators.js';\nimport { cache } from 'lit/directives/cache.js';\n\nimport { MobxLitElement } from '../src/lit-mobx';\nimport { Counter } from './my-counter';\n\nimport './public-property-example.js';\n\n@customElement('detaching-example')\nexport class DetachingExample extends MobxLitElement {\n    private counter = new Counter();\n\n    @property({ type: Boolean })\n    public connectChild = false;\n\n    public render(): TemplateResult {\n        return html`\n            <h3>Connect/Disconnect Example</h3>\n            <p>\n                In this example we allow an element to be connected/disconnected\n                and show that it is correctly updated after re-connection.\n            </p>\n            ${cache(\n                this.connectChild\n                    ? html`\n                          <public-observable-example\n                              .counter=${this.counter}\n                          ></public-observable-example>\n                      `\n                    : nothing\n            )}\n            <br />\n            <button @click=${this.incrementCount}>Add</button>\n            <button @click=${this.toggleConnected}>Connect/Disconnect</button>\n        `;\n    }\n\n    private incrementCount() {\n        this.counter.increment();\n    }\n\n    private toggleConnected() {\n        this.connectChild = !this.connectChild;\n    }\n}\n"]}