/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { MobxLitElement } from '../src/lit-mobx';
import { Counter } from './my-counter';
import { computed, observable } from 'mobx';
let PublicObservableExample = class PublicObservableExample extends MobxLitElement {
    render() {
        return html `
            Count is ${this.counter ? this.counter.count : 'Not Set'}
        `;
    }
};
__decorate([
    property({ attribute: false })
], PublicObservableExample.prototype, "counter", void 0);
PublicObservableExample = __decorate([
    customElement('public-observable-example')
], PublicObservableExample);
export { PublicObservableExample };
let PublicComputedExample = class PublicComputedExample extends MobxLitElement {
    get isMoreThanFive() {
        return this.counter && this.counter.count > 5;
    }
    render() {
        return html `
            ${this.isMoreThanFive
            ? 'It is more than five'
            : 'It is less than or equal to five'}
        `;
    }
};
__decorate([
    property({ attribute: false }),
    observable
], PublicComputedExample.prototype, "counter", void 0);
__decorate([
    computed
], PublicComputedExample.prototype, "isMoreThanFive", null);
PublicComputedExample = __decorate([
    customElement('public-computed-example')
], PublicComputedExample);
export { PublicComputedExample };
let PublicPropertyExample = class PublicPropertyExample extends MobxLitElement {
    constructor() {
        super(...arguments);
        this.counter = new Counter();
    }
    render() {
        return html `
            <h3>Public Property Example</h3>
            <p>
                In this example an observable is passed into a custom element as
                a public property and driven from outside the element.
            </p>
            <p>
                We also pass the same observable to another element which uses a
                mobx computed property to calculate a new value which is also
                updated.
            </p>
            <public-observable-example
                .counter=${this.counter}
            ></public-observable-example>
            <br />
            <public-computed-example
                .counter=${this.counter}
            ></public-computed-example>
            <br />
            <button @click=${this.incrementCount}>Add</button>
        `;
    }
    incrementCount() {
        this.counter.increment();
    }
};
PublicPropertyExample = __decorate([
    customElement('public-property-example')
], PublicPropertyExample);
export { PublicPropertyExample };
//# sourceMappingURL=public-property-example.js.map