--------------------------------------------------------------------------------------------------------------
Example ids:  245 project:  FFmpeg commit id:  7bf3f380466eeff24916fd6218aca13e414c6240 Number of lines:  124 tground truth:  1
Original lines: 
Predicted Correctly by :  ['PLBART', 'devign', 'regvd', 'vulberta_cnn', 'vulberta_mlp']
0 static int cbs_h265_read_nal_unit(CodedBitstreamContext *ctx,                                  {'PLBART': 0, 'devign': 21, 'regvd': 14, 'vulberta_cnn': 29, 'vulberta_mlp': 9}
2                                   CodedBitstreamUnit *unit)                                    {'PLBART': 11, 'devign': 60, 'regvd': 49, 'vulberta_cnn': 91, 'vulberta_mlp': 87}
4 {                                                                                              {'PLBART': 14, 'devign': 283, 'regvd': 108, 'vulberta_cnn': 33, 'vulberta_mlp': 123}
6     BitstreamContext bc;                                                                       {'PLBART': 9, 'devign': 96, 'regvd': 78, 'vulberta_cnn': 34, 'vulberta_mlp': 122}
8     int err;                                                                                   {'PLBART': 12, 'devign': 97, 'regvd': 94, 'vulberta_cnn': 27, 'vulberta_mlp': 121}
12     err = bitstream_init(&bc, unit->data, 8 * unit->data_size);                               {'PLBART': 2, 'devign': 10, 'regvd': 0, 'vulberta_cnn': 8, 'vulberta_mlp': 43}
14     if (err < 0)                                                                              {'PLBART': 10, 'devign': 6, 'regvd': 81, 'vulberta_cnn': 14, 'vulberta_mlp': 120}
16         return err;                                                                           {'PLBART': 13, 'devign': 30, 'regvd': 93, 'vulberta_cnn': 26, 'vulberta_mlp': 119}
20     switch (unit->type) {                                                                     {'PLBART': 6, 'devign': 0, 'regvd': 28, 'vulberta_cnn': 84, 'vulberta_mlp': 83}
22     case HEVC_NAL_VPS:                                                                        {'PLBART': 7, 'devign': 101, 'regvd': 44, 'vulberta_cnn': 94, 'vulberta_mlp': 82}
24         {                                                                                     {'PLBART': 15, 'devign': 270, 'regvd': 107, 'vulberta_cnn': 40, 'vulberta_mlp': 29}
26             H265RawVPS *vps;                                                                  {'PLBART': 4, 'devign': 92, 'regvd': 25, 'vulberta_cnn': 70, 'vulberta_mlp': 4}
30             vps = av_mallocz(sizeof(*vps));                                                   {'PLBART': 3, 'devign': 44, 'regvd': 7, 'vulberta_cnn': 19, 'vulberta_mlp': 6}
32             if (!vps)                                                                         {'PLBART': 8, 'devign': 54, 'regvd': 31, 'vulberta_cnn': 25, 'vulberta_mlp': 56}
34                 return AVERROR(ENOMEM);                                                       {'PLBART': 5, 'devign': 36, 'regvd': 41, 'vulberta_cnn': 31, 'vulberta_mlp': 63}
36             err = cbs_h265_read_vps(ctx, &bc, vps);                                           {'PLBART': 1, 'devign': 15, 'regvd': 1, 'vulberta_cnn': 23, 'vulberta_mlp': 12}
38             if (err >= 0)                                                                     {'PLBART': -1, 'devign': 24, 'regvd': 72, 'vulberta_cnn': 48, 'vulberta_mlp': 62}
40                 err = cbs_h265_replace_vps(ctx, vps);                                         {'PLBART': -1, 'devign': 18, 'regvd': 6, 'vulberta_cnn': 114, 'vulberta_mlp': 15}
42             if (err < 0) {                                                                    {'PLBART': -1, 'devign': 5, 'regvd': 77, 'vulberta_cnn': 41, 'vulberta_mlp': 81}
44                 av_free(vps);                                                                 {'PLBART': -1, 'devign': 65, 'regvd': 19, 'vulberta_cnn': 66, 'vulberta_mlp': 28}
46                 return err;                                                                   {'PLBART': -1, 'devign': 29, 'regvd': 92, 'vulberta_cnn': 79, 'vulberta_mlp': 118}
48             }                                                                                 {'PLBART': -1, 'devign': 256, 'regvd': 122, 'vulberta_cnn': 68, 'vulberta_mlp': 117}
52             unit->content = vps;                                                              {'PLBART': -1, 'devign': 79, 'regvd': 26, 'vulberta_cnn': 123, 'vulberta_mlp': 61}
54         }                                                                                     {'PLBART': -1, 'devign': 251, 'regvd': 121, 'vulberta_cnn': 61, 'vulberta_mlp': 27}
56         break;                                                                                {'PLBART': -1, 'devign': 51, 'regvd': 102, 'vulberta_cnn': 89, 'vulberta_mlp': 3}
58     case HEVC_NAL_SPS:                                                                        {'PLBART': -1, 'devign': 102, 'regvd': 43, 'vulberta_cnn': 101, 'vulberta_mlp': 26}
60         {                                                                                     {'PLBART': -1, 'devign': 247, 'regvd': 106, 'vulberta_cnn': 43, 'vulberta_mlp': 25}
62             H265RawSPS *sps;                                                                  {'PLBART': -1, 'devign': 94, 'regvd': 35, 'vulberta_cnn': 93, 'vulberta_mlp': 24}
66             sps = av_mallocz(sizeof(*sps));                                                   {'PLBART': -1, 'devign': 45, 'regvd': 3, 'vulberta_cnn': 52, 'vulberta_mlp': 7}
68             if (!sps)                                                                         {'PLBART': -1, 'devign': 57, 'regvd': 48, 'vulberta_cnn': 17, 'vulberta_mlp': 40}
70                 return AVERROR(ENOMEM);                                                       {'PLBART': -1, 'devign': 35, 'regvd': 40, 'vulberta_cnn': 57, 'vulberta_mlp': 77}
72             err = cbs_h265_read_sps(ctx, &bc, sps);                                           {'PLBART': -1, 'devign': 14, 'regvd': 5, 'vulberta_cnn': 117, 'vulberta_mlp': 64}
74             if (err >= 0)                                                                     {'PLBART': -1, 'devign': 23, 'regvd': 71, 'vulberta_cnn': 50, 'vulberta_mlp': 8}
76                 err = cbs_h265_replace_sps(ctx, sps);                                         {'PLBART': -1, 'devign': 17, 'regvd': 10, 'vulberta_cnn': 113, 'vulberta_mlp': 30}
78             if (err < 0) {                                                                    {'PLBART': -1, 'devign': 4, 'regvd': 76, 'vulberta_cnn': 119, 'vulberta_mlp': 23}
80                 av_free(sps);                                                                 {'PLBART': -1, 'devign': 67, 'regvd': 17, 'vulberta_cnn': 20, 'vulberta_mlp': 49}
82                 return err;                                                                   {'PLBART': -1, 'devign': 28, 'regvd': 91, 'vulberta_cnn': 86, 'vulberta_mlp': 116}
84             }                                                                                 {'PLBART': -1, 'devign': 233, 'regvd': 120, 'vulberta_cnn': 109, 'vulberta_mlp': 2}
88             unit->content = sps;                                                              {'PLBART': -1, 'devign': 80, 'regvd': 30, 'vulberta_cnn': 54, 'vulberta_mlp': 76}
90         }                                                                                     {'PLBART': -1, 'devign': 228, 'regvd': 119, 'vulberta_cnn': 98, 'vulberta_mlp': 22}
92         break;                                                                                {'PLBART': -1, 'devign': 50, 'regvd': 101, 'vulberta_cnn': 60, 'vulberta_mlp': 48}
96     case HEVC_NAL_PPS:                                                                        {'PLBART': -1, 'devign': 98, 'regvd': 42, 'vulberta_cnn': 73, 'vulberta_mlp': 51}
98         {                                                                                     {'PLBART': -1, 'devign': 222, 'regvd': 105, 'vulberta_cnn': 77, 'vulberta_mlp': 115}
100             H265RawPPS *pps;                                                                 {'PLBART': -1, 'devign': 93, 'regvd': 32, 'vulberta_cnn': 76, 'vulberta_mlp': 21}
104             pps = av_mallocz(sizeof(*pps));                                                  {'PLBART': -1, 'devign': 43, 'regvd': 2, 'vulberta_cnn': 24, 'vulberta_mlp': 11}
106             if (!pps)                                                                        {'PLBART': -1, 'devign': 53, 'regvd': 46, 'vulberta_cnn': 67, 'vulberta_mlp': 55}
108                 return AVERROR(ENOMEM);                                                      {'PLBART': -1, 'devign': 34, 'regvd': 39, 'vulberta_cnn': 32, 'vulberta_mlp': 75}
110             err = cbs_h265_read_pps(ctx, &bc, pps);                                          {'PLBART': -1, 'devign': 13, 'regvd': 4, 'vulberta_cnn': 7, 'vulberta_mlp': 50}
112             if (err >= 0)                                                                    {'PLBART': -1, 'devign': 22, 'regvd': 70, 'vulberta_cnn': 9, 'vulberta_mlp': 60}
114                 err = cbs_h265_replace_pps(ctx, pps);                                        {'PLBART': -1, 'devign': 20, 'regvd': 8, 'vulberta_cnn': 1, 'vulberta_mlp': 33}
116             if (err < 0) {                                                                   {'PLBART': -1, 'devign': 3, 'regvd': 75, 'vulberta_cnn': 6, 'vulberta_mlp': 20}
118                 av_free(pps);                                                                {'PLBART': -1, 'devign': 66, 'regvd': 16, 'vulberta_cnn': 10, 'vulberta_mlp': 19}
120                 return err;                                                                  {'PLBART': -1, 'devign': 27, 'regvd': 90, 'vulberta_cnn': 62, 'vulberta_mlp': 114}
122             }                                                                                {'PLBART': -1, 'devign': 208, 'regvd': 118, 'vulberta_cnn': 81, 'vulberta_mlp': 18}
126             unit->content = pps;                                                             {'PLBART': -1, 'devign': 76, 'regvd': 29, 'vulberta_cnn': 96, 'vulberta_mlp': 14}
128         }                                                                                    {'PLBART': -1, 'devign': 203, 'regvd': 117, 'vulberta_cnn': 80, 'vulberta_mlp': 17}
130         break;                                                                               {'PLBART': -1, 'devign': 49, 'regvd': 100, 'vulberta_cnn': 51, 'vulberta_mlp': 47}
134     case HEVC_NAL_TRAIL_N:                                                                   {'PLBART': -1, 'devign': 103, 'regvd': 68, 'vulberta_cnn': 64, 'vulberta_mlp': 86}
136     case HEVC_NAL_TRAIL_R:                                                                   {'PLBART': -1, 'devign': 95, 'regvd': 67, 'vulberta_cnn': 42, 'vulberta_mlp': 69}
138     case HEVC_NAL_TSA_N:                                                                     {'PLBART': -1, 'devign': 90, 'regvd': 57, 'vulberta_cnn': 105, 'vulberta_mlp': 35}
140     case HEVC_NAL_TSA_R:                                                                     {'PLBART': -1, 'devign': 89, 'regvd': 56, 'vulberta_cnn': 121, 'vulberta_mlp': 68}
142     case HEVC_NAL_STSA_N:                                                                    {'PLBART': -1, 'devign': 88, 'regvd': 55, 'vulberta_cnn': 12, 'vulberta_mlp': 85}
144     case HEVC_NAL_STSA_R:                                                                    {'PLBART': -1, 'devign': 87, 'regvd': 54, 'vulberta_cnn': 122, 'vulberta_mlp': 67}
146     case HEVC_NAL_RADL_N:                                                                    {'PLBART': -1, 'devign': 85, 'regvd': 66, 'vulberta_cnn': 11, 'vulberta_mlp': 39}
148     case HEVC_NAL_RADL_R:                                                                    {'PLBART': -1, 'devign': 84, 'regvd': 65, 'vulberta_cnn': 35, 'vulberta_mlp': 38}
150     case HEVC_NAL_RASL_N:                                                                    {'PLBART': -1, 'devign': 82, 'regvd': 53, 'vulberta_cnn': 16, 'vulberta_mlp': 37}
152     case HEVC_NAL_RASL_R:                                                                    {'PLBART': -1, 'devign': 83, 'regvd': 52, 'vulberta_cnn': 87, 'vulberta_mlp': 46}
154     case HEVC_NAL_BLA_W_LP:                                                                  {'PLBART': -1, 'devign': 75, 'regvd': 60, 'vulberta_cnn': 104, 'vulberta_mlp': 16}
156     case HEVC_NAL_BLA_W_RADL:                                                                {'PLBART': -1, 'devign': 73, 'regvd': 64, 'vulberta_cnn': 88, 'vulberta_mlp': 31}
158     case HEVC_NAL_BLA_N_LP:                                                                  {'PLBART': -1, 'devign': 71, 'regvd': 59, 'vulberta_cnn': 97, 'vulberta_mlp': 70}
160     case HEVC_NAL_IDR_W_RADL:                                                                {'PLBART': -1, 'devign': 69, 'regvd': 63, 'vulberta_cnn': 30, 'vulberta_mlp': 10}
162     case HEVC_NAL_IDR_N_LP:                                                                  {'PLBART': -1, 'devign': 64, 'regvd': 58, 'vulberta_cnn': 95, 'vulberta_mlp': 32}
164     case HEVC_NAL_CRA_NUT:                                                                   {'PLBART': -1, 'devign': 62, 'regvd': 62, 'vulberta_cnn': 112, 'vulberta_mlp': 42}
166         {                                                                                    {'PLBART': -1, 'devign': 182, 'regvd': 104, 'vulberta_cnn': 99, 'vulberta_mlp': 113}
168             H265RawSlice *slice;                                                             {'PLBART': -1, 'devign': 61, 'regvd': 83, 'vulberta_cnn': 4, 'vulberta_mlp': 41}
170             int pos, len;                                                                    {'PLBART': -1, 'devign': 37, 'regvd': 85, 'vulberta_cnn': 37, 'vulberta_mlp': 112}
174             slice = av_mallocz(sizeof(*slice));                                              {'PLBART': -1, 'devign': 12, 'regvd': 12, 'vulberta_cnn': 59, 'vulberta_mlp': 1}
176             if (!slice)                                                                      {'PLBART': -1, 'devign': 38, 'regvd': 82, 'vulberta_cnn': 58, 'vulberta_mlp': 111}
178                 return AVERROR(ENOMEM);                                                      {'PLBART': -1, 'devign': 33, 'regvd': 38, 'vulberta_cnn': 63, 'vulberta_mlp': 110}
180             err = cbs_h265_read_slice_segment_header(ctx, &bc, &slice->header);              {'PLBART': -1, 'devign': 11, 'regvd': 9, 'vulberta_cnn': 110, 'vulberta_mlp': 53}
182             if (err < 0) {                                                                   {'PLBART': -1, 'devign': 2, 'regvd': 74, 'vulberta_cnn': 38, 'vulberta_mlp': 65}
184                 av_free(slice);                                                              {'PLBART': -1, 'devign': 56, 'regvd': 22, 'vulberta_cnn': 53, 'vulberta_mlp': 74}
186                 return err;                                                                  {'PLBART': -1, 'devign': 26, 'regvd': 89, 'vulberta_cnn': 72, 'vulberta_mlp': 59}
188             }                                                                                {'PLBART': -1, 'devign': 169, 'regvd': 116, 'vulberta_cnn': 46, 'vulberta_mlp': 109}
192             pos = bitstream_tell(&bc);                                                       {'PLBART': -1, 'devign': 63, 'regvd': 18, 'vulberta_cnn': 115, 'vulberta_mlp': 54}
194             len = unit->data_size;                                                           {'PLBART': -1, 'devign': 59, 'regvd': 33, 'vulberta_cnn': 15, 'vulberta_mlp': 108}
196             if (!unit->data[len - 1]) {                                                      {'PLBART': -1, 'devign': 19, 'regvd': 51, 'vulberta_cnn': 118, 'vulberta_mlp': 57}
198                 int z;                                                                       {'PLBART': -1, 'devign': 86, 'regvd': 97, 'vulberta_cnn': 18, 'vulberta_mlp': 107}
200                 for (z = 0; z < len && !unit->data[len - z - 1]; z++);                       {'PLBART': -1, 'devign': 7, 'regvd': 24, 'vulberta_cnn': 120, 'vulberta_mlp': 79}
202                 av_log(ctx->log_ctx, AV_LOG_DEBUG, "Deleted %d trailing zeroes "             {'PLBART': -1, 'devign': 8, 'regvd': 23, 'vulberta_cnn': 102, 'vulberta_mlp': 90}
204                        "from slice data.\n", z);                                             {'PLBART': -1, 'devign': 41, 'regvd': 69, 'vulberta_cnn': 44, 'vulberta_mlp': 88}
206                 len -= z;                                                                    {'PLBART': -1, 'devign': 78, 'regvd': 95, 'vulberta_cnn': 49, 'vulberta_mlp': 66}
208             }                                                                                {'PLBART': -1, 'devign': 157, 'regvd': 115, 'vulberta_cnn': 47, 'vulberta_mlp': 106}
212             slice->data_size = len - pos / 8;                                                {'PLBART': -1, 'devign': 52, 'regvd': 34, 'vulberta_cnn': 13, 'vulberta_mlp': 89}
214             slice->data = av_malloc(slice->data_size);                                       {'PLBART': -1, 'devign': 40, 'regvd': 15, 'vulberta_cnn': 5, 'vulberta_mlp': 0}
216             if (!slice->data) {                                                              {'PLBART': -1, 'devign': 9, 'regvd': 47, 'vulberta_cnn': 116, 'vulberta_mlp': 84}
218                 av_free(slice);                                                              {'PLBART': -1, 'devign': 55, 'regvd': 21, 'vulberta_cnn': 111, 'vulberta_mlp': 45}
220                 return AVERROR(ENOMEM);                                                      {'PLBART': -1, 'devign': 32, 'regvd': 37, 'vulberta_cnn': 2, 'vulberta_mlp': 105}
222             }                                                                                {'PLBART': -1, 'devign': 148, 'regvd': 114, 'vulberta_cnn': 82, 'vulberta_mlp': 104}
224             memcpy(slice->data,                                                              {'PLBART': -1, 'devign': 42, 'regvd': 80, 'vulberta_cnn': 71, 'vulberta_mlp': 73}
226                    unit->data + pos / 8, slice->data_size);                                  {'PLBART': -1, 'devign': 39, 'regvd': 20, 'vulberta_cnn': 100, 'vulberta_mlp': 78}
228             slice->data_bit_start = pos % 8;                                                 {'PLBART': -1, 'devign': 77, 'regvd': 50, 'vulberta_cnn': 3, 'vulberta_mlp': 71}
232             unit->content = slice;                                                           {'PLBART': -1, 'devign': 74, 'regvd': 79, 'vulberta_cnn': 28, 'vulberta_mlp': 103}
234         }                                                                                    {'PLBART': -1, 'devign': 140, 'regvd': 113, 'vulberta_cnn': 74, 'vulberta_mlp': 102}
236         break;                                                                               {'PLBART': -1, 'devign': 48, 'regvd': 99, 'vulberta_cnn': 65, 'vulberta_mlp': 101}
240     case HEVC_NAL_AUD:                                                                       {'PLBART': -1, 'devign': 100, 'regvd': 61, 'vulberta_cnn': 85, 'vulberta_mlp': 36}
242         {                                                                                    {'PLBART': -1, 'devign': 134, 'regvd': 103, 'vulberta_cnn': 92, 'vulberta_mlp': 100}
244             H265RawAUD *aud;                                                                 {'PLBART': -1, 'devign': 91, 'regvd': 87, 'vulberta_cnn': 55, 'vulberta_mlp': 34}
248             aud = av_mallocz(sizeof(*aud));                                                  {'PLBART': -1, 'devign': 46, 'regvd': 11, 'vulberta_cnn': 90, 'vulberta_mlp': 5}
250             if (!aud)                                                                        {'PLBART': -1, 'devign': 58, 'regvd': 86, 'vulberta_cnn': 21, 'vulberta_mlp': 99}
252                 return AVERROR(ENOMEM);                                                      {'PLBART': -1, 'devign': 31, 'regvd': 36, 'vulberta_cnn': 103, 'vulberta_mlp': 98}
254             err = cbs_h265_read_aud(ctx, &bc, aud);                                          {'PLBART': -1, 'devign': 16, 'regvd': 13, 'vulberta_cnn': 0, 'vulberta_mlp': 52}
256             if (err < 0) {                                                                   {'PLBART': -1, 'devign': 1, 'regvd': 73, 'vulberta_cnn': 108, 'vulberta_mlp': 80}
258                 av_free(aud);                                                                {'PLBART': -1, 'devign': 68, 'regvd': 27, 'vulberta_cnn': 78, 'vulberta_mlp': 13}
260                 return err;                                                                  {'PLBART': -1, 'devign': 25, 'regvd': 88, 'vulberta_cnn': 69, 'vulberta_mlp': 58}
262             }                                                                                {'PLBART': -1, 'devign': 122, 'regvd': 112, 'vulberta_cnn': 83, 'vulberta_mlp': 97}
266             unit->content = aud;                                                             {'PLBART': -1, 'devign': 81, 'regvd': 84, 'vulberta_cnn': 36, 'vulberta_mlp': 96}
268         }                                                                                    {'PLBART': -1, 'devign': 117, 'regvd': 111, 'vulberta_cnn': 56, 'vulberta_mlp': 95}
270         break;                                                                               {'PLBART': -1, 'devign': 47, 'regvd': 98, 'vulberta_cnn': 39, 'vulberta_mlp': 94}
274     default:                                                                                 {'PLBART': -1, 'devign': 99, 'regvd': 123, 'vulberta_cnn': 22, 'vulberta_mlp': 44}
276         return AVERROR(ENOSYS);                                                              {'PLBART': -1, 'devign': 70, 'regvd': 45, 'vulberta_cnn': 107, 'vulberta_mlp': 72}
278     }                                                                                        {'PLBART': -1, 'devign': 110, 'regvd': 110, 'vulberta_cnn': 45, 'vulberta_mlp': 93}
282     return 0;                                                                                {'PLBART': -1, 'devign': 72, 'regvd': 96, 'vulberta_cnn': 75, 'vulberta_mlp': 92}
284 }                                                                                            {'PLBART': -1, 'devign': 105, 'regvd': 109, 'vulberta_cnn': 106, 'vulberta_mlp': 91}
-----------------------
Highlighted lines: 
12     err = bitstream_init(&bc, unit->data, 8 * unit->data_size);
30             vps = av_mallocz(sizeof(*vps));
--------------------------------------------------------------------------------------------------------------
Example ids:  710 project:  qemu commit id:  b6c147622d31272f9728da9ec16d146bf8c45a74 Number of lines:  126 tground truth:  1
Original lines: 
Predicted Correctly by :  ['linevul', 'codebert', 'PLBART', 'vulberta_cnn', 'vulberta_mlp']
0 int qcow2_update_header(BlockDriverState *bs)                                                {'linevul': 11, 'codebert': 3, 'PLBART': 1, 'vulberta_cnn': 71, 'vulberta_mlp': 40}
2 {                                                                                            {'linevul': 27, 'codebert': 8, 'PLBART': 14, 'vulberta_cnn': 51, 'vulberta_mlp': 113}
4     BDRVQcowState *s = bs->opaque;                                                           {'linevul': 8, 'codebert': 4, 'PLBART': 0, 'vulberta_cnn': 5, 'vulberta_mlp': 112}
6     QCowHeader *header;                                                                      {'linevul': 22, 'codebert': 10, 'PLBART': 10, 'vulberta_cnn': 101, 'vulberta_mlp': 111}
8     char *buf;                                                                               {'linevul': 24, 'codebert': 5, 'PLBART': 12, 'vulberta_cnn': 34, 'vulberta_mlp': 32}
10     size_t buflen = s->cluster_size;                                                        {'linevul': 10, 'codebert': 14, 'PLBART': 3, 'vulberta_cnn': 28, 'vulberta_mlp': 4}
12     int ret;                                                                                {'linevul': 25, 'codebert': 22, 'PLBART': 13, 'vulberta_cnn': 29, 'vulberta_mlp': 110}
14     uint64_t total_size;                                                                    {'linevul': 19, 'codebert': 20, 'PLBART': 8, 'vulberta_cnn': 19, 'vulberta_mlp': 23}
16     uint32_t refcount_table_clusters;                                                       {'linevul': 12, 'codebert': 17, 'PLBART': 7, 'vulberta_cnn': 23, 'vulberta_mlp': 14}
18     size_t header_length;                                                                   {'linevul': 21, 'codebert': 19, 'PLBART': 9, 'vulberta_cnn': 64, 'vulberta_mlp': 109}
20     Qcow2UnknownHeaderExtension *uext;                                                      {'linevul': 13, 'codebert': 1, 'PLBART': 5, 'vulberta_cnn': 57, 'vulberta_mlp': 51}
24     buf = qemu_blockalign(bs, buflen);                                                      {'linevul': 9, 'codebert': 0, 'PLBART': 2, 'vulberta_cnn': 16, 'vulberta_mlp': 9}
28     /* Header structure */                                                                  {'linevul': 23, 'codebert': 16, 'PLBART': 11, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
30     header = (QCowHeader*) buf;                                                             {'linevul': 16, 'codebert': 6, 'PLBART': 6, 'vulberta_cnn': 26, 'vulberta_mlp': 52}
34     if (buflen < sizeof(*header)) {                                                         {'linevul': 14, 'codebert': 11, 'PLBART': 4, 'vulberta_cnn': 108, 'vulberta_mlp': 7}
36         ret = -ENOSPC;                                                                      {'linevul': 15, 'codebert': 21, 'PLBART': -1, 'vulberta_cnn': 78, 'vulberta_mlp': 37}
38         goto fail;                                                                          {'linevul': 20, 'codebert': 12, 'PLBART': -1, 'vulberta_cnn': 59, 'vulberta_mlp': 2}
40     }                                                                                       {'linevul': 26, 'codebert': 23, 'PLBART': -1, 'vulberta_cnn': 41, 'vulberta_mlp': 1}
44     header_length = sizeof(*header) + s->unknown_header_fields_size;                        {'linevul': 5, 'codebert': 13, 'PLBART': -1, 'vulberta_cnn': 6, 'vulberta_mlp': 31}
46     total_size = bs->total_sectors * BDRV_SECTOR_SIZE;                                      {'linevul': 4, 'codebert': 7, 'PLBART': -1, 'vulberta_cnn': 111, 'vulberta_mlp': 18}
48     refcount_table_clusters = s->refcount_table_size >> (s->cluster_bits - 3);              {'linevul': 3, 'codebert': 9, 'PLBART': -1, 'vulberta_cnn': 85, 'vulberta_mlp': 0}
52     *header = (QCowHeader) {                                                                {'linevul': 17, 'codebert': 18, 'PLBART': -1, 'vulberta_cnn': 80, 'vulberta_mlp': 8}
54         /* Version 2 fields */                                                              {'linevul': 18, 'codebert': 15, 'PLBART': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
56         .magic                  = cpu_to_be32(QCOW_MAGIC),                                  {'linevul': 0, 'codebert': 2, 'PLBART': -1, 'vulberta_cnn': 17, 'vulberta_mlp': 17}
58         .version                = cpu_to_be32(s->qcow_version),                             {'linevul': 1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 52, 'vulberta_mlp': 46}
60         .backing_file_offset    = 0,                                                        {'linevul': 7, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 20, 'vulberta_mlp': 22}
62         .backing_file_size      = 0,                                                        {'linevul': 6, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 31, 'vulberta_mlp': 39}
64         .cluster_bits           = cpu_to_be32(s->cluster_bits),                             {'linevul': 2, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 105, 'vulberta_mlp': 34}
66         .size                   = cpu_to_be64(total_size),                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 87, 'vulberta_mlp': 50}
68         .crypt_method           = cpu_to_be32(s->crypt_method_header),                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 95, 'vulberta_mlp': 25}
70         .l1_size                = cpu_to_be32(s->l1_size),                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 9, 'vulberta_mlp': 33}
72         .l1_table_offset        = cpu_to_be64(s->l1_table_offset),                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 15, 'vulberta_mlp': 16}
74         .refcount_table_offset  = cpu_to_be64(s->refcount_table_offset),                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 79, 'vulberta_mlp': 24}
76         .refcount_table_clusters = cpu_to_be32(refcount_table_clusters),                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 109, 'vulberta_mlp': 19}
78         .nb_snapshots           = cpu_to_be32(s->nb_snapshots),                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 110, 'vulberta_mlp': 47}
80         .snapshots_offset       = cpu_to_be64(s->snapshots_offset),                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 113, 'vulberta_mlp': 108}
84         /* Version 3 fields */                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
86         .incompatible_features  = cpu_to_be64(s->incompatible_features),                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 75, 'vulberta_mlp': 57}
88         .compatible_features    = cpu_to_be64(s->compatible_features),                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 88, 'vulberta_mlp': 107}
90         .autoclear_features     = cpu_to_be64(s->autoclear_features),                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 54, 'vulberta_mlp': 56}
92         .refcount_order         = cpu_to_be32(3 + REFCOUNT_SHIFT),                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 10, 'vulberta_mlp': 45}
94         .header_length          = cpu_to_be32(header_length),                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 102, 'vulberta_mlp': 106}
96     };                                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 70, 'vulberta_mlp': 13}
100     /* For older versions, write a shorter header */                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
102     switch (s->qcow_version) {                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 66, 'vulberta_mlp': 49}
104     case 2:                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 103, 'vulberta_mlp': 105}
106         ret = offsetof(QCowHeader, incompatible_features);                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 107, 'vulberta_mlp': 6}
108         break;                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 27, 'vulberta_mlp': 12}
110     case 3:                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 83, 'vulberta_mlp': 21}
112         ret = sizeof(*header);                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 13, 'vulberta_mlp': 3}
114         break;                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 56, 'vulberta_mlp': 11}
116     default:                                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 97, 'vulberta_mlp': 104}
118         return -EINVAL;                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 48, 'vulberta_mlp': 103}
120     }                                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 43, 'vulberta_mlp': 102}
124     buf += ret;                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 67, 'vulberta_mlp': 30}
126     buflen -= ret;                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 21, 'vulberta_mlp': 29}
128     memset(buf, 0, buflen);                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 76, 'vulberta_mlp': 15}
132     /* Preserve any unknown field in the header */                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
134     if (s->unknown_header_fields_size) {                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 98, 'vulberta_mlp': 5}
136         if (buflen < s->unknown_header_fields_size) {                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 18, 'vulberta_mlp': 54}
138             ret = -ENOSPC;                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 77, 'vulberta_mlp': 36}
140             goto fail;                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 32, 'vulberta_mlp': 101}
142         }                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 38, 'vulberta_mlp': 100}
146         memcpy(buf, s->unknown_header_fields, s->unknown_header_fields_size);              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 22, 'vulberta_mlp': 48}
148         buf += s->unknown_header_fields_size;                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 53, 'vulberta_mlp': 99}
150         buflen -= s->unknown_header_fields_size;                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 60, 'vulberta_mlp': 98}
152     }                                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 50, 'vulberta_mlp': 97}
156     /* Backing file format header extension */                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
158     if (*bs->backing_format) {                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 47, 'vulberta_mlp': 96}
160         ret = header_ext_add(buf, QCOW2_EXT_MAGIC_BACKING_FORMAT,                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 61, 'vulberta_mlp': 95}
162                              bs->backing_format, strlen(bs->backing_format),               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 2, 'vulberta_mlp': 94}
164                              buflen);                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 72, 'vulberta_mlp': 93}
166         if (ret < 0) {                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 92, 'vulberta_mlp': 92}
168             goto fail;                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 36, 'vulberta_mlp': 91}
170         }                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 44, 'vulberta_mlp': 90}
174         buf += ret;                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 14, 'vulberta_mlp': 10}
176         buflen -= ret;                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 81, 'vulberta_mlp': 28}
178     }                                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 58, 'vulberta_mlp': 89}
182     /* Feature table */                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
184     Qcow2Feature features[] = {                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 89, 'vulberta_mlp': 88}
186         /* no feature defined yet */                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
188     };                                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 35, 'vulberta_mlp': 87}
192     ret = header_ext_add(buf, QCOW2_EXT_MAGIC_FEATURE_TABLE,                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 7, 'vulberta_mlp': 86}
194                          features, sizeof(features), buflen);                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 90, 'vulberta_mlp': 35}
196     if (ret < 0) {                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 45, 'vulberta_mlp': 85}
198         goto fail;                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 8, 'vulberta_mlp': 84}
200     }                                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 65, 'vulberta_mlp': 83}
202     buf += ret;                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 94, 'vulberta_mlp': 27}
204     buflen -= ret;                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 104, 'vulberta_mlp': 82}
208     /* Keep unknown header extensions */                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
210     QLIST_FOREACH(uext, &s->unknown_header_ext, next) {                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 82, 'vulberta_mlp': 81}
212         ret = header_ext_add(buf, uext->magic, uext->data, uext->len, buflen);             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 106, 'vulberta_mlp': 80}
214         if (ret < 0) {                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 73, 'vulberta_mlp': 79}
216             goto fail;                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 37, 'vulberta_mlp': 78}
218         }                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 63, 'vulberta_mlp': 77}
222         buf += ret;                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 84, 'vulberta_mlp': 76}
224         buflen -= ret;                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 86, 'vulberta_mlp': 26}
226     }                                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 49, 'vulberta_mlp': 75}
230     /* End of header extensions */                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
232     ret = header_ext_add(buf, QCOW2_EXT_MAGIC_END, NULL, 0, buflen);                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 40, 'vulberta_mlp': 38}
234     if (ret < 0) {                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 24, 'vulberta_mlp': 74}
236         goto fail;                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 25, 'vulberta_mlp': 73}
238     }                                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 99, 'vulberta_mlp': 72}
242     buf += ret;                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 33, 'vulberta_mlp': 71}
244     buflen -= ret;                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 69, 'vulberta_mlp': 70}
248     /* Backing file name */                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
250     if (*bs->backing_file) {                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 112, 'vulberta_mlp': 20}
252         size_t backing_file_len = strlen(bs->backing_file);                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 46, 'vulberta_mlp': 69}
256         if (buflen < backing_file_len) {                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 0, 'vulberta_mlp': 68}
258             ret = -ENOSPC;                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 100, 'vulberta_mlp': 67}
260             goto fail;                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 42, 'vulberta_mlp': 66}
262         }                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 62, 'vulberta_mlp': 65}
266         strncpy(buf, bs->backing_file, buflen);                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 55, 'vulberta_mlp': 53}
270         header->backing_file_offset = cpu_to_be64(buf - ((char*) header));                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 3, 'vulberta_mlp': 41}
272         header->backing_file_size   = cpu_to_be32(backing_file_len);                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 11, 'vulberta_mlp': 55}
274     }                                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 68, 'vulberta_mlp': 64}
278     /* Write the new header */                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
280     ret = bdrv_pwrite(bs->file, 0, header, s->cluster_size);                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 4, 'vulberta_mlp': 44}
282     if (ret < 0) {                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 12, 'vulberta_mlp': 43}
284         goto fail;                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 96, 'vulberta_mlp': 63}
286     }                                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 30, 'vulberta_mlp': 62}
290     ret = 0;                                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 1, 'vulberta_mlp': 61}
292 fail:                                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 74, 'vulberta_mlp': 60}
294     qemu_vfree(header);                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 39, 'vulberta_mlp': 42}
296     return ret;                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 93, 'vulberta_mlp': 59}
298 }                                                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'vulberta_cnn': 91, 'vulberta_mlp': 58}
-----------------------
Highlighted lines: 
4     BDRVQcowState *s = bs->opaque;
24     buf = qemu_blockalign(bs, buflen);
48     refcount_table_clusters = s->refcount_table_size >> (s->cluster_bits - 3);
--------------------------------------------------------------------------------------------------------------
Example ids:  1136 project:  qemu commit id:  7453c96b78c2b09aa72924f933bb9616e5474194 Number of lines:  243 tground truth:  1
Original lines: 
Predicted Correctly by :  ['linevul', 'codebert', 'PLBART', 'devign', 'vulberta_cnn', 'vulberta_mlp']
0 static int alloc_refcount_block(BlockDriverState *bs,                                           {'linevul': 14, 'codebert': 14, 'PLBART': 2, 'devign': 53, 'vulberta_cnn': 107, 'vulberta_mlp': 47}
2     int64_t cluster_index, uint16_t **refcount_block)                                           {'linevul': 9, 'codebert': 3, 'PLBART': 7, 'devign': 42, 'vulberta_cnn': 40, 'vulberta_mlp': 45}
4 {                                                                                               {'linevul': 18, 'codebert': 9, 'PLBART': 9, 'devign': 573, 'vulberta_cnn': 74, 'vulberta_mlp': 112}
6     BDRVQcowState *s = bs->opaque;                                                              {'linevul': 10, 'codebert': 5, 'PLBART': 3, 'devign': 87, 'vulberta_cnn': 30, 'vulberta_mlp': 111}
8     unsigned int refcount_table_index;                                                          {'linevul': 16, 'codebert': 15, 'PLBART': 5, 'devign': 129, 'vulberta_cnn': 37, 'vulberta_mlp': 110}
10     int ret;                                                                                   {'linevul': 17, 'codebert': 16, 'PLBART': 8, 'devign': 194, 'vulberta_cnn': 43, 'vulberta_mlp': 109}
14     BLKDBG_EVENT(bs->file, BLKDBG_REFBLOCK_ALLOC);                                             {'linevul': 6, 'codebert': 10, 'PLBART': 0, 'devign': 31, 'vulberta_cnn': 92, 'vulberta_mlp': 41}
18     /* Find the refcount block for the given cluster */                                        {'linevul': 15, 'codebert': 13, 'PLBART': 4, 'devign': 193, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
20     refcount_table_index = cluster_index >> s->refcount_block_bits;                            {'linevul': 7, 'codebert': 12, 'PLBART': 1, 'devign': 99, 'vulberta_cnn': 35, 'vulberta_mlp': 108}
24     if (refcount_table_index < s->refcount_table_size) {                                       {'linevul': 8, 'codebert': 0, 'PLBART': 6, 'devign': 38, 'vulberta_cnn': 91, 'vulberta_mlp': 12}
28         uint64_t refcount_block_offset =                                                       {'linevul': 11, 'codebert': 4, 'PLBART': -1, 'devign': 143, 'vulberta_cnn': 93, 'vulberta_mlp': 14}
30             s->refcount_table[refcount_table_index] & REFT_OFFSET_MASK;                        {'linevul': 4, 'codebert': 8, 'PLBART': -1, 'devign': 118, 'vulberta_cnn': 55, 'vulberta_mlp': 23}
34         /* If it's already there, we're done */                                                {'linevul': 12, 'codebert': 7, 'PLBART': -1, 'devign': 80, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
36         if (refcount_block_offset) {                                                           {'linevul': 13, 'codebert': 11, 'PLBART': -1, 'devign': 100, 'vulberta_cnn': 100, 'vulberta_mlp': 20}
38             if (offset_into_cluster(s, refcount_block_offset)) {                               {'linevul': 5, 'codebert': 6, 'PLBART': -1, 'devign': 20, 'vulberta_cnn': 18, 'vulberta_mlp': 39}
40                 qcow2_signal_corruption(bs, true, -1, -1, "Refblock offset %#"                 {'linevul': 3, 'codebert': 2, 'PLBART': -1, 'devign': 44, 'vulberta_cnn': 80, 'vulberta_mlp': 59}
42                                         PRIx64 " unaligned (reftable index: "                  {'linevul': 0, 'codebert': 1, 'PLBART': -1, 'devign': 128, 'vulberta_cnn': 108, 'vulberta_mlp': 33}
44                                         "%#x)", refcount_block_offset,                         {'linevul': 1, 'codebert': -1, 'PLBART': -1, 'devign': 66, 'vulberta_cnn': 52, 'vulberta_mlp': 43}
46                                         refcount_table_index);                                 {'linevul': 2, 'codebert': -1, 'PLBART': -1, 'devign': 142, 'vulberta_cnn': 17, 'vulberta_mlp': 7}
48                 return -EIO;                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 116, 'vulberta_cnn': 50, 'vulberta_mlp': 26}
50             }                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 544, 'vulberta_cnn': 44, 'vulberta_mlp': 4}
54              return load_refcount_block(bs, refcount_block_offset,                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 63, 'vulberta_cnn': 81, 'vulberta_mlp': 22}
56                  (void**) refcount_block);                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 126, 'vulberta_cnn': 14, 'vulberta_mlp': 17}
58         }                                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 538, 'vulberta_cnn': 46, 'vulberta_mlp': 107}
60     }                                                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 536, 'vulberta_cnn': 63, 'vulberta_mlp': 3}
64     /*                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 532, 'vulberta_cnn': 39, 'vulberta_mlp': 106}
66      * If we came here, we need to allocate something. Something is at least                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 79, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
68      * a cluster for the new refcount block. It may also include a new refcount                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 192, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
70      * table if the old refcount table is too small.                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 191, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
72      *                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 527, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
74      * Note that allocating clusters here needs some special care:                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 190, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
76      *                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 524, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
78      * - We can't use the normal qcow2_alloc_clusters(), it would try to                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 59, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
80      *   increase the refcount and very likely we would end up with an endless                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 189, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
82      *   recursion. Instead we must place the refcount blocks in a way that                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 188, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
84      *   they can describe them themselves.                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 187, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
86      *                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 518, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
88      * - We need to consider that at this point we are inside update_refcounts                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 152, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
90      *   and potentially doing an initial refcount increase. This means that                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 186, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
92      *   some clusters have already been allocated by the caller, but their                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 78, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
94      *   refcount isn't accurate yet. If we allocate clusters for metadata, we                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 77, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
96      *   need to return -EAGAIN to signal the caller that it needs to restart                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 151, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
98      *   the search for free clusters.                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 185, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
100      *                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 510, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
102      * - alloc_clusters_noref and qcow2_free_clusters may load a different                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 150, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
104      *   refcount block into the cache                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 507, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
106      */                                                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 505, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
110     *refcount_block = NULL;                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 162, 'vulberta_cnn': 8, 'vulberta_mlp': 105}
114     /* We write to the refcount table, so we might depend on L2 tables */                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 76, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
116     ret = qcow2_cache_flush(bs, s->l2_table_cache);                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 26, 'vulberta_cnn': 110, 'vulberta_mlp': 56}
118     if (ret < 0) {                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 11, 'vulberta_cnn': 106, 'vulberta_mlp': 104}
120         return ret;                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 132, 'vulberta_cnn': 28, 'vulberta_mlp': 103}
122     }                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 494, 'vulberta_cnn': 60, 'vulberta_mlp': 102}
126     /* Allocate the refcount block itself and mark it as used */                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 184, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
128     int64_t new_block = alloc_clusters_noref(bs, s->cluster_size);                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 13, 'vulberta_cnn': 12, 'vulberta_mlp': 101}
130     if (new_block < 0) {                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 92, 'vulberta_cnn': 48, 'vulberta_mlp': 42}
132         return new_block;                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 119, 'vulberta_cnn': 34, 'vulberta_mlp': 25}
134     }                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 486, 'vulberta_cnn': 66, 'vulberta_mlp': 0}
138 #ifdef DEBUG_ALLOC2                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 482, 'vulberta_cnn': 61, 'vulberta_mlp': 31}
140     fprintf(stderr, "qcow2: Allocate refcount block %d for %" PRIx64                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 45, 'vulberta_cnn': 112, 'vulberta_mlp': 32}
142         " at %" PRIx64 "\n",                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 68, 'vulberta_cnn': 85, 'vulberta_mlp': 38}
144         refcount_table_index, cluster_index << s->cluster_bits, new_block);                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 25, 'vulberta_cnn': 111, 'vulberta_mlp': 52}
146 #endif                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 477, 'vulberta_cnn': 65, 'vulberta_mlp': 100}
150     if (in_same_refcount_block(s, new_block, cluster_index << s->cluster_bits)) {             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 12, 'vulberta_cnn': 10, 'vulberta_mlp': 58}
152         /* Zero the new refcount block before updating it */                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 472, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
154         ret = qcow2_cache_get_empty(bs, s->refcount_block_cache, new_block,                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 50, 'vulberta_cnn': 76, 'vulberta_mlp': 57}
156             (void**) refcount_block);                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 125, 'vulberta_cnn': 21, 'vulberta_mlp': 9}
158         if (ret < 0) {                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 10, 'vulberta_cnn': 53, 'vulberta_mlp': 99}
160             goto fail_block;                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 140, 'vulberta_cnn': 38, 'vulberta_mlp': 98}
162         }                                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 466, 'vulberta_cnn': 68, 'vulberta_mlp': 97}
166         memset(*refcount_block, 0, s->cluster_size);                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 29, 'vulberta_cnn': 6, 'vulberta_mlp': 50}
170         /* The block describes itself, need to update the cache */                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 75, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
172         int block_index = (new_block >> s->cluster_bits) &                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 86, 'vulberta_cnn': 0, 'vulberta_mlp': 96}
174             (s->refcount_block_size - 1);                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 85, 'vulberta_cnn': 98, 'vulberta_mlp': 16}
176         (*refcount_block)[block_index] = cpu_to_be16(1);                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 109, 'vulberta_cnn': 102, 'vulberta_mlp': 55}
178     } else {                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 183, 'vulberta_cnn': 26, 'vulberta_mlp': 1}
180         /* Described somewhere else. This can recurse at most twice before we                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 182, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
182          * arrive at a block that describes itself. */                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 181, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
184         ret = update_refcount(bs, new_block, s->cluster_size, 1, false,                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 39, 'vulberta_cnn': 109, 'vulberta_mlp': 95}
186                               QCOW2_DISCARD_NEVER);                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 160, 'vulberta_cnn': 104, 'vulberta_mlp': 44}
188         if (ret < 0) {                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 9, 'vulberta_cnn': 29, 'vulberta_mlp': 6}
190             goto fail_block;                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 139, 'vulberta_cnn': 96, 'vulberta_mlp': 11}
192         }                                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 448, 'vulberta_cnn': 59, 'vulberta_mlp': 94}
196         ret = qcow2_cache_flush(bs, s->refcount_block_cache);                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 19, 'vulberta_cnn': 101, 'vulberta_mlp': 34}
198         if (ret < 0) {                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 8, 'vulberta_cnn': 88, 'vulberta_mlp': 19}
200             goto fail_block;                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 138, 'vulberta_cnn': 54, 'vulberta_mlp': 10}
202         }                                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 441, 'vulberta_cnn': 56, 'vulberta_mlp': 93}
206         /* Initialize the new refcount block only after updating its refcount,                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 74, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
208          * update_refcount uses the refcount cache itself */                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 180, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
210         ret = qcow2_cache_get_empty(bs, s->refcount_block_cache, new_block,                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 49, 'vulberta_cnn': 36, 'vulberta_mlp': 36}
212             (void**) refcount_block);                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 124, 'vulberta_cnn': 83, 'vulberta_mlp': 92}
214         if (ret < 0) {                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 7, 'vulberta_cnn': 47, 'vulberta_mlp': 91}
216             goto fail_block;                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 137, 'vulberta_cnn': 75, 'vulberta_mlp': 90}
218         }                                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 431, 'vulberta_cnn': 84, 'vulberta_mlp': 89}
222         memset(*refcount_block, 0, s->cluster_size);                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 28, 'vulberta_cnn': 89, 'vulberta_mlp': 29}
224     }                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 426, 'vulberta_cnn': 62, 'vulberta_mlp': 88}
228     /* Now the new refcount block needs to be written to disk */                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 179, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
230     BLKDBG_EVENT(bs->file, BLKDBG_REFBLOCK_ALLOC_WRITE);                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 21, 'vulberta_cnn': 86, 'vulberta_mlp': 87}
232     qcow2_cache_entry_mark_dirty(s->refcount_block_cache, *refcount_block);                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 36, 'vulberta_cnn': 2, 'vulberta_mlp': 86}
234     ret = qcow2_cache_flush(bs, s->refcount_block_cache);                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 18, 'vulberta_cnn': 3, 'vulberta_mlp': 54}
236     if (ret < 0) {                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 6, 'vulberta_cnn': 77, 'vulberta_mlp': 85}
238         goto fail_block;                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 136, 'vulberta_cnn': 51, 'vulberta_mlp': 84}
240     }                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 416, 'vulberta_cnn': 67, 'vulberta_mlp': 83}
244     /* If the refcount table is big enough, just hook the block up there */                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 73, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
246     if (refcount_table_index < s->refcount_table_size) {                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 37, 'vulberta_cnn': 5, 'vulberta_mlp': 8}
248         uint64_t data64 = cpu_to_be64(new_block);                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 115, 'vulberta_cnn': 11, 'vulberta_mlp': 82}
250         BLKDBG_EVENT(bs->file, BLKDBG_REFBLOCK_ALLOC_HOOKUP);                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 23, 'vulberta_cnn': 15, 'vulberta_mlp': 53}
252         ret = bdrv_pwrite_sync(bs->file,                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 57, 'vulberta_cnn': 73, 'vulberta_mlp': 81}
254             s->refcount_table_offset + refcount_table_index * sizeof(uint64_t),               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 34, 'vulberta_cnn': 25, 'vulberta_mlp': 40}
256             &data64, sizeof(data64));                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 65, 'vulberta_cnn': 70, 'vulberta_mlp': 46}
258         if (ret < 0) {                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 5, 'vulberta_cnn': 42, 'vulberta_mlp': 80}
260             goto fail_block;                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 135, 'vulberta_cnn': 19, 'vulberta_mlp': 79}
262         }                                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 403, 'vulberta_cnn': 87, 'vulberta_mlp': 78}
266         s->refcount_table[refcount_table_index] = new_block;                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 102, 'vulberta_cnn': 7, 'vulberta_mlp': 27}
270         /* The new refcount block may be where the caller intended to put its                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 178, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
272          * data, so let it restart the search. */                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 72, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
274         return -EAGAIN;                                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 107, 'vulberta_cnn': 27, 'vulberta_mlp': 77}
276     }                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 393, 'vulberta_cnn': 71, 'vulberta_mlp': 2}
280     ret = qcow2_cache_put(bs, s->refcount_block_cache, (void**) refcount_block);              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 22, 'vulberta_cnn': 1, 'vulberta_mlp': 48}
282     if (ret < 0) {                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 4, 'vulberta_cnn': 41, 'vulberta_mlp': 76}
284         goto fail_block;                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 134, 'vulberta_cnn': 33, 'vulberta_mlp': 75}
286     }                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 386, 'vulberta_cnn': 58, 'vulberta_mlp': 74}
290     /*                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 382, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
292      * If we come here, we need to grow the refcount table. Again, a new                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 90, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
294      * refcount table needs some space and we can't simply allocate to avoid                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 177, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
296      * endless recursion.                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 176, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
298      *                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 377, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
300      * Therefore let's grab new refcount blocks at the end of the image, which                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 71, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
302      * will describe themselves and the new refcount table. This way we can                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 175, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
304      * reference them only in the new table and do the switch to the new                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 174, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
306      * refcount table at once without producing an inconsistent state in                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 173, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
308      * between.                                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 371, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
310      */                                                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 369, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
312     BLKDBG_EVENT(bs->file, BLKDBG_REFTABLE_GROW);                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 33, 'vulberta_cnn': 99, 'vulberta_mlp': 51}
316     /* Calculate the number of refcount blocks needed so far */                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 172, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
318     uint64_t blocks_used = DIV_ROUND_UP(cluster_index, s->refcount_block_size);               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 15, 'vulberta_cnn': 45, 'vulberta_mlp': 18}
322     if (blocks_used > QCOW_MAX_REFTABLE_SIZE / sizeof(uint64_t)) {                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 82, 'vulberta_cnn': 24, 'vulberta_mlp': 73}
324         return -EFBIG;                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 117, 'vulberta_cnn': 69, 'vulberta_mlp': 72}
326     }                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 358, 'vulberta_cnn': 57, 'vulberta_mlp': 71}
330     /* And now we need at least one block more for the new metadata */                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 171, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
332     uint64_t table_size = next_refcount_table_size(s, blocks_used + 1);                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 27, 'vulberta_cnn': 97, 'vulberta_mlp': 70}
334     uint64_t last_table_size;                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 141, 'vulberta_cnn': 49, 'vulberta_mlp': 69}
336     uint64_t blocks_clusters;                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 153, 'vulberta_cnn': 72, 'vulberta_mlp': 68}
338     do {                                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 350, 'vulberta_cnn': 23, 'vulberta_mlp': 67}
340         uint64_t table_clusters =                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 170, 'vulberta_cnn': 95, 'vulberta_mlp': 66}
342             size_to_clusters(s, table_size * sizeof(uint64_t));                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 60, 'vulberta_cnn': 13, 'vulberta_mlp': 15}
344         blocks_clusters = 1 +                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 149, 'vulberta_cnn': 9, 'vulberta_mlp': 65}
346             ((table_clusters + s->refcount_block_size - 1)                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 84, 'vulberta_cnn': 32, 'vulberta_mlp': 49}
348             / s->refcount_block_size);                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 114, 'vulberta_cnn': 64, 'vulberta_mlp': 64}
350         uint64_t meta_clusters = table_clusters + blocks_clusters;                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 133, 'vulberta_cnn': 82, 'vulberta_mlp': 63}
354         last_table_size = table_size;                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 144, 'vulberta_cnn': 103, 'vulberta_mlp': 30}
356         table_size = next_refcount_table_size(s, blocks_used +                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 67, 'vulberta_cnn': 20, 'vulberta_mlp': 21}
358             ((meta_clusters + s->refcount_block_size - 1)                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 83, 'vulberta_cnn': 4, 'vulberta_mlp': 35}
360             / s->refcount_block_size));                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 113, 'vulberta_cnn': 22, 'vulberta_mlp': 62}
364     } while (last_table_size != table_size);                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 91, 'vulberta_cnn': 31, 'vulberta_mlp': 28}
368 #ifdef DEBUG_ALLOC2                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 331, 'vulberta_cnn': 90, 'vulberta_mlp': 61}
370     fprintf(stderr, "qcow2: Grow refcount table %" PRId32 " => %" PRId64 "\n",                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 52, 'vulberta_cnn': 105, 'vulberta_mlp': 24}
372         s->refcount_table_size, table_size);                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 51, 'vulberta_cnn': 78, 'vulberta_mlp': 5}
374 #endif                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 327, 'vulberta_cnn': 94, 'vulberta_mlp': 60}
378     /* Create the new refcount table and blocks */                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 169, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
380     uint64_t meta_offset = (blocks_used * s->refcount_block_size) *                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 94, 'vulberta_cnn': 16, 'vulberta_mlp': 37}
382         s->cluster_size;                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 127, 'vulberta_cnn': 79, 'vulberta_mlp': 13}
384     uint64_t table_offset = meta_offset + blocks_clusters * s->cluster_size;                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 104, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
386     uint64_t *new_table = g_try_new0(uint64_t, table_size);                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 14, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
388     uint16_t *new_blocks = g_try_malloc0(blocks_clusters * s->cluster_size);                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 47, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
392     assert(table_size > 0 && blocks_clusters > 0);                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 101, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
394     if (new_table == NULL || new_blocks == NULL) {                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 81, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
396         ret = -ENOMEM;                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 158, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
398         goto fail_table;                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 157, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
400     }                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 311, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
404     /* Fill the new refcount table */                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 307, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
406     memcpy(new_table, s->refcount_table,                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 62, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
408         s->refcount_table_size * sizeof(uint64_t));                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 69, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
410     new_table[refcount_table_index] = new_block;                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 146, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
414     int i;                                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 195, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
416     for (i = 0; i < blocks_clusters; i++) {                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 61, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
418         new_table[blocks_used + i] = meta_offset + (i * s->cluster_size);                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 88, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
420     }                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 297, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
424     /* Fill the refcount blocks */                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 168, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
426     uint64_t table_clusters = size_to_clusters(s, table_size * sizeof(uint64_t));             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 35, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
428     int block = 0;                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 120, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
430     for (i = 0; i < table_clusters + blocks_clusters; i++) {                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 43, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
432         new_blocks[block++] = cpu_to_be16(1);                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 93, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
434     }                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 288, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
438     /* Write refcount blocks to disk */                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 167, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
440     BLKDBG_EVENT(bs->file, BLKDBG_REFBLOCK_ALLOC_WRITE_BLOCKS);                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 16, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
442     ret = bdrv_pwrite_sync(bs->file, meta_offset, new_blocks,                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 48, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
444         blocks_clusters * s->cluster_size);                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 112, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
446     g_free(new_blocks);                                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 96, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
448     new_blocks = NULL;                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 148, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
450     if (ret < 0) {                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 3, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
452         goto fail_table;                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 156, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
454     }                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 276, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
458     /* Write refcount table to disk */                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 166, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
460     for(i = 0; i < table_size; i++) {                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 41, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
462         cpu_to_be64s(&new_table[i]);                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 108, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
464     }                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 269, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
468     BLKDBG_EVENT(bs->file, BLKDBG_REFBLOCK_ALLOC_WRITE_TABLE);                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 17, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
470     ret = bdrv_pwrite_sync(bs->file, table_offset, new_table,                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 56, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
472         table_size * sizeof(uint64_t));                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 103, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
474     if (ret < 0) {                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 2, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
476         goto fail_table;                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 155, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
478     }                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 260, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
482     for(i = 0; i < table_size; i++) {                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 40, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
484         be64_to_cpus(&new_table[i]);                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 111, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
486     }                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 254, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
490     /* Hook up the new refcount table in the qcow2 header */                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 250, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
492     uint8_t data[12];                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 145, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
494     cpu_to_be64w((uint64_t*)data, table_offset);                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 54, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
496     cpu_to_be32w((uint32_t*)(data + 8), table_clusters);                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 55, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
498     BLKDBG_EVENT(bs->file, BLKDBG_REFBLOCK_ALLOC_SWITCH_TABLE);                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 24, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
500     ret = bdrv_pwrite_sync(bs->file, offsetof(QCowHeader, refcount_table_offset),             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 30, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
502         data, sizeof(data));                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 64, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
504     if (ret < 0) {                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
506         goto fail_table;                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 154, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
508     }                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 240, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
512     /* And switch it in memory */                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 165, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
514     uint64_t old_table_offset = s->refcount_table_offset;                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 105, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
516     uint64_t old_table_size = s->refcount_table_size;                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 97, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
520     g_free(s->refcount_table);                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 89, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
522     s->refcount_table = new_table;                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 122, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
524     s->refcount_table_size = table_size;                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 110, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
526     s->refcount_table_offset = table_offset;                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 123, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
530     /* Free old table. */                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 225, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
532     qcow2_free_clusters(bs, old_table_offset, old_table_size * sizeof(uint64_t),              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 58, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
534                         QCOW2_DISCARD_OTHER);                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 159, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
538     ret = load_refcount_block(bs, new_block, (void**) refcount_block);                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 46, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
540     if (ret < 0) {                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 0, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
542         return ret;                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 131, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
544     }                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 216, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
548     /* If we were trying to do the initial refcount update for some cluster                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 164, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
550      * allocation, we might have used the same clusters to store newly                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 70, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
552      * allocated metadata. Make the caller search some new space. */                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 163, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
554     return -EAGAIN;                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 106, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
558 fail_table:                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 161, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
560     g_free(new_blocks);                                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 95, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
562     g_free(new_table);                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 121, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
564 fail_block:                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 147, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
566     if (*refcount_block != NULL) {                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 98, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
568         qcow2_cache_put(bs, s->refcount_block_cache, (void**) refcount_block);                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 32, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
570     }                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 200, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
572     return ret;                                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 130, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
574 }                                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 197, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
-----------------------
Highlighted lines: 
2     int64_t cluster_index, uint16_t **refcount_block)
24     if (refcount_table_index < s->refcount_table_size) {
--------------------------------------------------------------------------------------------------------------
Example ids:  2649 project:  qemu commit id:  3a55fc0f243104998bee5106b121cff257df5d33 Number of lines:  126 tground truth:  1
Original lines: 
Predicted Correctly by :  ['PLBART', 'devign', 'regvd', 'vulberta_cnn', 'vulberta_mlp']
0 static void pci_ivshmem_realize(PCIDevice *dev, Error **errp)                                                 {'PLBART': 2, 'devign': 16, 'regvd': 5, 'vulberta_cnn': 11, 'vulberta_mlp': 4}
2 {                                                                                                             {'PLBART': 11, 'devign': -1, 'regvd': 108, 'vulberta_cnn': 66, 'vulberta_mlp': 93}
4     IVShmemState *s = IVSHMEM(dev);                                                                           {'PLBART': 4, 'devign': 12, 'regvd': 35, 'vulberta_cnn': 21, 'vulberta_mlp': 16}
6     Error *err = NULL;                                                                                        {'PLBART': 7, 'devign': 22, 'regvd': 88, 'vulberta_cnn': 90, 'vulberta_mlp': 92}
8     uint8_t *pci_conf;                                                                                        {'PLBART': 5, 'devign': 62, 'regvd': 75, 'vulberta_cnn': 47, 'vulberta_mlp': 91}
10     uint8_t attr = PCI_BASE_ADDRESS_SPACE_MEMORY |                                                           {'PLBART': 0, 'devign': -1, 'regvd': 67, 'vulberta_cnn': 13, 'vulberta_mlp': 17}
12         PCI_BASE_ADDRESS_MEM_PREFETCH;                                                                       {'PLBART': 9, 'devign': -1, 'regvd': 77, 'vulberta_cnn': 20, 'vulberta_mlp': 32}
16     if (!!s->server_chr + !!s->shmobj + !!s->hostmem != 1) {                                                 {'PLBART': 3, 'devign': 18, 'regvd': 12, 'vulberta_cnn': 14, 'vulberta_mlp': 3}
18         error_setg(errp,                                                                                     {'PLBART': 6, 'devign': 48, 'regvd': 62, 'vulberta_cnn': 61, 'vulberta_mlp': 22}
20                    "You must specify either 'shm', 'chardev' or 'x-memdev'");                                {'PLBART': 1, 'devign': -1, 'regvd': 25, 'vulberta_cnn': 10, 'vulberta_mlp': 15}
22         return;                                                                                              {'PLBART': 10, 'devign': 11, 'regvd': 104, 'vulberta_cnn': 70, 'vulberta_mlp': 90}
24     }                                                                                                        {'PLBART': 12, 'devign': -1, 'regvd': 125, 'vulberta_cnn': 43, 'vulberta_mlp': 89}
28     if (s->hostmem) {                                                                                        {'PLBART': 8, 'devign': 35, 'regvd': 60, 'vulberta_cnn': 52, 'vulberta_mlp': 31}
30         MemoryRegion *mr;                                                                                    {'PLBART': -1, 'devign': 50, 'regvd': 84, 'vulberta_cnn': 25, 'vulberta_mlp': 19}
34         if (s->sizearg) {                                                                                    {'PLBART': -1, 'devign': 54, 'regvd': 58, 'vulberta_cnn': 39, 'vulberta_mlp': 30}
36             g_warning("size argument ignored with hostmem");                                                 {'PLBART': -1, 'devign': -1, 'regvd': 13, 'vulberta_cnn': 29, 'vulberta_mlp': 21}
38         }                                                                                                    {'PLBART': -1, 'devign': -1, 'regvd': 124, 'vulberta_cnn': 64, 'vulberta_mlp': 2}
42         mr = host_memory_backend_get_memory(s->hostmem, &error_abort);                                       {'PLBART': -1, 'devign': 15, 'regvd': 0, 'vulberta_cnn': 81, 'vulberta_mlp': 6}
44         s->ivshmem_size = memory_region_size(mr);                                                            {'PLBART': -1, 'devign': 23, 'regvd': 4, 'vulberta_cnn': 59, 'vulberta_mlp': 9}
46     } else if (s->sizearg == NULL) {                                                                         {'PLBART': -1, 'devign': 21, 'regvd': 39, 'vulberta_cnn': 91, 'vulberta_mlp': 88}
48         s->ivshmem_size = 4 << 20; /* 4 MB default */                                                        {'PLBART': -1, 'devign': 26, 'regvd': 8, 'vulberta_cnn': 83, 'vulberta_mlp': 87}
50     } else {                                                                                                 {'PLBART': -1, 'devign': -1, 'regvd': 93, 'vulberta_cnn': 74, 'vulberta_mlp': 86}
52         char *end;                                                                                           {'PLBART': -1, 'devign': 63, 'regvd': 95, 'vulberta_cnn': 48, 'vulberta_mlp': 85}
54         int64_t size = qemu_strtosz(s->sizearg, &end);                                                       {'PLBART': -1, 'devign': 31, 'regvd': 3, 'vulberta_cnn': 53, 'vulberta_mlp': 35}
56         if (size < 0 || *end != '\0' || !is_power_of_2(size)) {                                              {'PLBART': -1, 'devign': -1, 'regvd': 6, 'vulberta_cnn': 65, 'vulberta_mlp': 26}
58             error_setg(errp, "Invalid size %s", s->sizearg);                                                 {'PLBART': -1, 'devign': 25, 'regvd': 9, 'vulberta_cnn': 69, 'vulberta_mlp': 50}
60             return;                                                                                          {'PLBART': -1, 'devign': 10, 'regvd': 103, 'vulberta_cnn': 46, 'vulberta_mlp': 5}
62         }                                                                                                    {'PLBART': -1, 'devign': -1, 'regvd': 123, 'vulberta_cnn': 38, 'vulberta_mlp': 84}
64         s->ivshmem_size = size;                                                                              {'PLBART': -1, 'devign': 51, 'regvd': 45, 'vulberta_cnn': 17, 'vulberta_mlp': 29}
66     }                                                                                                        {'PLBART': -1, 'devign': -1, 'regvd': 122, 'vulberta_cnn': 37, 'vulberta_mlp': 83}
70     /* IRQFD requires MSI */                                                                                 {'PLBART': -1, 'devign': -1, 'regvd': 81, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
72     if (ivshmem_has_feature(s, IVSHMEM_IOEVENTFD) &&                                                         {'PLBART': -1, 'devign': -1, 'regvd': 15, 'vulberta_cnn': 26, 'vulberta_mlp': 53}
74         !ivshmem_has_feature(s, IVSHMEM_MSI)) {                                                              {'PLBART': -1, 'devign': -1, 'regvd': 17, 'vulberta_cnn': 8, 'vulberta_mlp': 82}
76         error_setg(errp, "ioeventfd/irqfd requires MSI");                                                    {'PLBART': -1, 'devign': 47, 'regvd': 23, 'vulberta_cnn': 3, 'vulberta_mlp': 38}
78         return;                                                                                              {'PLBART': -1, 'devign': 9, 'regvd': 102, 'vulberta_cnn': 54, 'vulberta_mlp': 81}
80     }                                                                                                        {'PLBART': -1, 'devign': -1, 'regvd': 121, 'vulberta_cnn': 67, 'vulberta_mlp': 80}
84     /* check that role is reasonable */                                                                      {'PLBART': -1, 'devign': -1, 'regvd': 89, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
86     if (s->role) {                                                                                           {'PLBART': -1, 'devign': 29, 'regvd': 74, 'vulberta_cnn': 84, 'vulberta_mlp': 79}
88         if (strncmp(s->role, "peer", 5) == 0) {                                                              {'PLBART': -1, 'devign': 28, 'regvd': 50, 'vulberta_cnn': 28, 'vulberta_mlp': 37}
90             s->role_val = IVSHMEM_PEER;                                                                      {'PLBART': -1, 'devign': 14, 'regvd': 63, 'vulberta_cnn': 16, 'vulberta_mlp': 11}
92         } else if (strncmp(s->role, "master", 7) == 0) {                                                     {'PLBART': -1, 'devign': 27, 'regvd': 40, 'vulberta_cnn': 2, 'vulberta_mlp': 24}
94             s->role_val = IVSHMEM_MASTER;                                                                    {'PLBART': -1, 'devign': 1, 'regvd': 64, 'vulberta_cnn': 51, 'vulberta_mlp': 10}
96         } else {                                                                                             {'PLBART': -1, 'devign': -1, 'regvd': 92, 'vulberta_cnn': 71, 'vulberta_mlp': 78}
98             error_setg(errp, "'role' must be 'peer' or 'master'");                                           {'PLBART': -1, 'devign': 46, 'regvd': 21, 'vulberta_cnn': 89, 'vulberta_mlp': 44}
100             return;                                                                                         {'PLBART': -1, 'devign': 8, 'regvd': 101, 'vulberta_cnn': 19, 'vulberta_mlp': 77}
102         }                                                                                                   {'PLBART': -1, 'devign': -1, 'regvd': 120, 'vulberta_cnn': 50, 'vulberta_mlp': 76}
104     } else {                                                                                                {'PLBART': -1, 'devign': -1, 'regvd': 91, 'vulberta_cnn': 73, 'vulberta_mlp': 75}
106         s->role_val = IVSHMEM_MASTER; /* default */                                                         {'PLBART': -1, 'devign': 0, 'regvd': 48, 'vulberta_cnn': 86, 'vulberta_mlp': 43}
108     }                                                                                                       {'PLBART': -1, 'devign': -1, 'regvd': 119, 'vulberta_cnn': 24, 'vulberta_mlp': 74}
112     pci_conf = dev->config;                                                                                 {'PLBART': -1, 'devign': 36, 'regvd': 70, 'vulberta_cnn': 68, 'vulberta_mlp': 25}
114     pci_conf[PCI_COMMAND] = PCI_COMMAND_IO | PCI_COMMAND_MEMORY;                                            {'PLBART': -1, 'devign': 56, 'regvd': 73, 'vulberta_cnn': 0, 'vulberta_mlp': 13}
118     /*                                                                                                      {'PLBART': -1, 'devign': -1, 'regvd': 107, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
120      * Note: we don't use INTx with IVSHMEM_MSI at all, so this is a                                        {'PLBART': -1, 'devign': -1, 'regvd': 61, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
122      * bald-faced lie then.  But it's a backwards compatible lie.                                           {'PLBART': -1, 'devign': -1, 'regvd': 79, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
124      */                                                                                                     {'PLBART': -1, 'devign': -1, 'regvd': 106, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
126     pci_config_set_interrupt_pin(pci_conf, 1);                                                              {'PLBART': -1, 'devign': 30, 'regvd': 38, 'vulberta_cnn': 62, 'vulberta_mlp': 46}
130     memory_region_init_io(&s->ivshmem_mmio, OBJECT(s), &ivshmem_mmio_ops, s,                                {'PLBART': -1, 'devign': -1, 'regvd': 22, 'vulberta_cnn': 36, 'vulberta_mlp': 23}
132                           "ivshmem-mmio", IVSHMEM_REG_BAR_SIZE);                                            {'PLBART': -1, 'devign': -1, 'regvd': 37, 'vulberta_cnn': 4, 'vulberta_mlp': 49}
136     /* region for registers*/                                                                               {'PLBART': -1, 'devign': -1, 'regvd': 82, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
138     pci_register_bar(dev, 0, PCI_BASE_ADDRESS_SPACE_MEMORY,                                                 {'PLBART': -1, 'devign': -1, 'regvd': 31, 'vulberta_cnn': 7, 'vulberta_mlp': 73}
140                      &s->ivshmem_mmio);                                                                     {'PLBART': -1, 'devign': -1, 'regvd': 55, 'vulberta_cnn': 87, 'vulberta_mlp': 14}
144     memory_region_init(&s->bar, OBJECT(s), "ivshmem-bar2-container", s->ivshmem_size);                      {'PLBART': -1, 'devign': -1, 'regvd': 1, 'vulberta_cnn': 18, 'vulberta_mlp': 45}
146     if (s->ivshmem_64bit) {                                                                                 {'PLBART': -1, 'devign': 37, 'regvd': 34, 'vulberta_cnn': 12, 'vulberta_mlp': 42}
148         attr |= PCI_BASE_ADDRESS_MEM_TYPE_64;                                                               {'PLBART': -1, 'devign': 60, 'regvd': 66, 'vulberta_cnn': 88, 'vulberta_mlp': 36}
150     }                                                                                                       {'PLBART': -1, 'devign': -1, 'regvd': 118, 'vulberta_cnn': 27, 'vulberta_mlp': 1}
154     if (s->hostmem != NULL) {                                                                               {'PLBART': -1, 'devign': 13, 'regvd': 47, 'vulberta_cnn': 79, 'vulberta_mlp': 72}
156         MemoryRegion *mr;                                                                                   {'PLBART': -1, 'devign': 49, 'regvd': 83, 'vulberta_cnn': 45, 'vulberta_mlp': 8}
160         IVSHMEM_DPRINTF("using hostmem\n");                                                                 {'PLBART': -1, 'devign': -1, 'regvd': 16, 'vulberta_cnn': 80, 'vulberta_mlp': 20}
164         mr = host_memory_backend_get_memory(MEMORY_BACKEND(s->hostmem),                                     {'PLBART': -1, 'devign': 34, 'regvd': 10, 'vulberta_cnn': 1, 'vulberta_mlp': 34}
166                                             &error_abort);                                                  {'PLBART': -1, 'devign': 45, 'regvd': 71, 'vulberta_cnn': 44, 'vulberta_mlp': 7}
168         vmstate_register_ram(mr, DEVICE(s));                                                                {'PLBART': -1, 'devign': 58, 'regvd': 46, 'vulberta_cnn': 60, 'vulberta_mlp': 71}
170         memory_region_add_subregion(&s->bar, 0, mr);                                                        {'PLBART': -1, 'devign': 59, 'regvd': 19, 'vulberta_cnn': 22, 'vulberta_mlp': 28}
172         pci_register_bar(PCI_DEVICE(s), 2, attr, &s->bar);                                                  {'PLBART': -1, 'devign': 57, 'regvd': 27, 'vulberta_cnn': 9, 'vulberta_mlp': 41}
174     } else if (s->server_chr != NULL) {                                                                     {'PLBART': -1, 'devign': 33, 'regvd': 36, 'vulberta_cnn': 92, 'vulberta_mlp': 47}
176         /* FIXME do not rely on what chr drivers put into filename */                                       {'PLBART': -1, 'devign': -1, 'regvd': 76, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
178         if (strncmp(s->server_chr->filename, "unix:", 5)) {                                                 {'PLBART': -1, 'devign': -1, 'regvd': 32, 'vulberta_cnn': 5, 'vulberta_mlp': 70}
180             error_setg(errp, "chardev is not a unix client socket");                                        {'PLBART': -1, 'devign': 44, 'regvd': 20, 'vulberta_cnn': 82, 'vulberta_mlp': 69}
182             return;                                                                                         {'PLBART': -1, 'devign': 7, 'regvd': 100, 'vulberta_cnn': 40, 'vulberta_mlp': 68}
184         }                                                                                                   {'PLBART': -1, 'devign': -1, 'regvd': 117, 'vulberta_cnn': 41, 'vulberta_mlp': 67}
188         /* if we get a UNIX socket as the parameter we will talk                                            {'PLBART': -1, 'devign': -1, 'regvd': 78, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
190          * to the ivshmem server to receive the memory region */                                            {'PLBART': -1, 'devign': -1, 'regvd': 68, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
194         IVSHMEM_DPRINTF("using shared memory server (socket = %s)\n",                                       {'PLBART': -1, 'devign': -1, 'regvd': 14, 'vulberta_cnn': 32, 'vulberta_mlp': 18}
196                         s->server_chr->filename);                                                           {'PLBART': -1, 'devign': -1, 'regvd': 65, 'vulberta_cnn': 57, 'vulberta_mlp': 27}
200         if (ivshmem_setup_interrupts(s) < 0) {                                                              {'PLBART': -1, 'devign': 19, 'regvd': 28, 'vulberta_cnn': 23, 'vulberta_mlp': 48}
202             error_setg(errp, "failed to initialize interrupts");                                            {'PLBART': -1, 'devign': 43, 'regvd': 29, 'vulberta_cnn': 63, 'vulberta_mlp': 66}
204             return;                                                                                         {'PLBART': -1, 'devign': 6, 'regvd': 99, 'vulberta_cnn': 34, 'vulberta_mlp': 65}
206         }                                                                                                   {'PLBART': -1, 'devign': -1, 'regvd': 116, 'vulberta_cnn': 56, 'vulberta_mlp': 64}
210         /* we allocate enough space for 16 peers and grow as needed */                                      {'PLBART': -1, 'devign': -1, 'regvd': 80, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
212         resize_peers(s, 16);                                                                                {'PLBART': -1, 'devign': 61, 'regvd': 44, 'vulberta_cnn': 76, 'vulberta_mlp': 0}
214         s->vm_id = -1;                                                                                      {'PLBART': -1, 'devign': 55, 'regvd': 72, 'vulberta_cnn': 77, 'vulberta_mlp': 63}
218         pci_register_bar(dev, 2, attr, &s->bar);                                                            {'PLBART': -1, 'devign': 53, 'regvd': 24, 'vulberta_cnn': 33, 'vulberta_mlp': 62}
222         qemu_chr_add_handlers(s->server_chr, ivshmem_can_receive,                                           {'PLBART': -1, 'devign': -1, 'regvd': 49, 'vulberta_cnn': 15, 'vulberta_mlp': 52}
224                               ivshmem_check_version, NULL, s);                                              {'PLBART': -1, 'devign': -1, 'regvd': 52, 'vulberta_cnn': 49, 'vulberta_mlp': 40}
226     } else {                                                                                                {'PLBART': -1, 'devign': -1, 'regvd': 90, 'vulberta_cnn': 30, 'vulberta_mlp': 61}
228         /* just map the file immediately, we're not using a server */                                       {'PLBART': -1, 'devign': -1, 'regvd': 69, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
230         int fd;                                                                                             {'PLBART': -1, 'devign': 64, 'regvd': 105, 'vulberta_cnn': 78, 'vulberta_mlp': 60}
234         IVSHMEM_DPRINTF("using shm_open (shm object = %s)\n", s->shmobj);                                   {'PLBART': -1, 'devign': -1, 'regvd': 7, 'vulberta_cnn': 6, 'vulberta_mlp': 55}
238         /* try opening with O_EXCL and if it succeeds zero the memory                                       {'PLBART': -1, 'devign': -1, 'regvd': 56, 'vulberta_cnn': 58, 'vulberta_mlp': 59}
240          * by truncating to 0 */                                                                            {'PLBART': -1, 'devign': -1, 'regvd': 94, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
242         if ((fd = shm_open(s->shmobj, O_CREAT|O_RDWR|O_EXCL,                                                {'PLBART': -1, 'devign': -1, 'regvd': 54, 'vulberta_cnn': 31, 'vulberta_mlp': 54}
244                         S_IRWXU|S_IRWXG|S_IRWXO)) > 0) {                                                    {'PLBART': -1, 'devign': -1, 'regvd': 87, 'vulberta_cnn': 85, 'vulberta_mlp': 58}
246            /* truncate file to length PCI device's memory */                                                {'PLBART': -1, 'devign': -1, 'regvd': 59, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
248             if (ftruncate(fd, s->ivshmem_size) != 0) {                                                      {'PLBART': -1, 'devign': 20, 'regvd': 2, 'vulberta_cnn': 75, 'vulberta_mlp': 33}
250                 error_report("could not truncate shared file");                                             {'PLBART': -1, 'devign': 42, 'regvd': 41, 'vulberta_cnn': 72, 'vulberta_mlp': 12}
252             }                                                                                               {'PLBART': -1, 'devign': -1, 'regvd': 115, 'vulberta_cnn': 35, 'vulberta_mlp': 57}
256         } else if ((fd = shm_open(s->shmobj, O_CREAT|O_RDWR,                                                {'PLBART': -1, 'devign': -1, 'regvd': 43, 'vulberta_cnn': 55, 'vulberta_mlp': 39}
258                         S_IRWXU|S_IRWXG|S_IRWXO)) < 0) {                                                    {'PLBART': -1, 'devign': -1, 'regvd': 85, 'vulberta_cnn': 93, 'vulberta_mlp': 51}
260             error_setg(errp, "could not open shared file");                                                 {'PLBART': -1, 'devign': 41, 'regvd': 30, 'vulberta_cnn': 42, 'vulberta_mlp': 56}
262             return;                                                                                         {'PLBART': -1, 'devign': 5, 'regvd': 98, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
264         }                                                                                                   {'PLBART': -1, 'devign': -1, 'regvd': 114, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
268         if (check_shm_size(s, fd, errp) == -1) {                                                            {'PLBART': -1, 'devign': 17, 'regvd': 18, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
270             return;                                                                                         {'PLBART': -1, 'devign': 4, 'regvd': 97, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
272         }                                                                                                   {'PLBART': -1, 'devign': -1, 'regvd': 113, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
276         create_shared_memory_BAR(s, fd, attr, &err);                                                        {'PLBART': -1, 'devign': 24, 'regvd': 26, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
278         if (err) {                                                                                          {'PLBART': -1, 'devign': 40, 'regvd': 86, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
280             error_propagate(errp, err);                                                                     {'PLBART': -1, 'devign': 32, 'regvd': 57, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
282             return;                                                                                         {'PLBART': -1, 'devign': 3, 'regvd': 96, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
284         }                                                                                                   {'PLBART': -1, 'devign': -1, 'regvd': 112, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
286     }                                                                                                       {'PLBART': -1, 'devign': -1, 'regvd': 111, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
290     fifo8_create(&s->incoming_fifo, sizeof(int64_t));                                                       {'PLBART': -1, 'devign': 38, 'regvd': 11, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
294     if (s->role_val == IVSHMEM_PEER) {                                                                      {'PLBART': -1, 'devign': 2, 'regvd': 42, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
296         error_setg(&s->migration_blocker,                                                                   {'PLBART': -1, 'devign': 39, 'regvd': 53, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
298                    "Migration is disabled when using feature 'peer mode' in device 'ivshmem'");             {'PLBART': -1, 'devign': -1, 'regvd': 33, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
300         migrate_add_blocker(s->migration_blocker);                                                          {'PLBART': -1, 'devign': 52, 'regvd': 51, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
302     }                                                                                                       {'PLBART': -1, 'devign': -1, 'regvd': 110, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
304 }                                                                                                           {'PLBART': -1, 'devign': -1, 'regvd': 109, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
-----------------------
Highlighted lines: 
0 static void pci_ivshmem_realize(PCIDevice *dev, Error **errp)
--------------------------------------------------------------------------------------------------------------
Example ids:  3824 project:  qemu commit id:  6764579f894950afe87d8ec3b323adde8925d4fd Number of lines:  55 tground truth:  1
Original lines: 
Predicted Correctly by :  ['codebert', 'PLBART', 'devign', 'regvd', 'vulberta_cnn']
0 static int cow_create(const char *filename, QemuOpts *opts, Error **errp)               {'codebert': 6, 'PLBART': 1, 'devign': 4, 'regvd': 2, 'vulberta_cnn': 47}
2 {                                                                                       {'codebert': 22, 'PLBART': 11, 'devign': -1, 'regvd': 46, 'vulberta_cnn': 42}
4     struct cow_header_v2 cow_header;                                                    {'codebert': 2, 'PLBART': 3, 'devign': 34, 'regvd': 27, 'vulberta_cnn': 12}
6     struct stat st;                                                                     {'codebert': 9, 'PLBART': 10, 'devign': 35, 'regvd': 39, 'vulberta_cnn': 28}
8     int64_t image_sectors = 0;                                                          {'codebert': 8, 'PLBART': 4, 'devign': 37, 'regvd': 22, 'vulberta_cnn': 17}
10     char *image_filename = NULL;                                                       {'codebert': 20, 'PLBART': 6, 'devign': 8, 'regvd': 23, 'vulberta_cnn': 18}
12     Error *local_err = NULL;                                                           {'codebert': 21, 'PLBART': 7, 'devign': 19, 'regvd': 29, 'vulberta_cnn': 25}
14     int ret;                                                                           {'codebert': 23, 'PLBART': 9, 'devign': 36, 'regvd': 40, 'vulberta_cnn': 40}
16     BlockDriverState *cow_bs;                                                          {'codebert': 10, 'PLBART': 5, 'devign': 33, 'regvd': 26, 'vulberta_cnn': 8}
20     /* Read out options */                                                             {'codebert': 19, 'PLBART': 8, 'devign': -1, 'regvd': 38, 'vulberta_cnn': -1}
22     image_sectors = qemu_opt_get_size_del(opts, BLOCK_OPT_SIZE, 0) / 512;              {'codebert': 4, 'PLBART': 0, 'devign': 22, 'regvd': 1, 'vulberta_cnn': 4}
24     image_filename = qemu_opt_get_del(opts, BLOCK_OPT_BACKING_FILE);                   {'codebert': 5, 'PLBART': 2, 'devign': 6, 'regvd': 0, 'vulberta_cnn': 9}
28     ret = bdrv_create_file(filename, opts, &local_err);                                {'codebert': 12, 'PLBART': -1, 'devign': 20, 'regvd': 3, 'vulberta_cnn': 31}
30     if (ret < 0) {                                                                     {'codebert': 18, 'PLBART': -1, 'devign': 3, 'regvd': 35, 'vulberta_cnn': 22}
32         error_propagate(errp, local_err);                                              {'codebert': 16, 'PLBART': -1, 'devign': 15, 'regvd': 18, 'vulberta_cnn': 16}
34         goto exit;                                                                     {'codebert': 14, 'PLBART': -1, 'devign': 12, 'regvd': 45, 'vulberta_cnn': 21}
36     }                                                                                  {'codebert': 15, 'PLBART': -1, 'devign': -1, 'regvd': 54, 'vulberta_cnn': 36}
40     cow_bs = NULL;                                                                     {'codebert': 17, 'PLBART': -1, 'devign': 24, 'regvd': 28, 'vulberta_cnn': 19}
42     ret = bdrv_open(&cow_bs, filename, NULL, NULL,                                     {'codebert': 3, 'PLBART': -1, 'devign': 23, 'regvd': 11, 'vulberta_cnn': 3}
44                     BDRV_O_RDWR | BDRV_O_PROTOCOL, NULL, &local_err);                  {'codebert': 13, 'PLBART': -1, 'devign': -1, 'regvd': 15, 'vulberta_cnn': 37}
46     if (ret < 0) {                                                                     {'codebert': 11, 'PLBART': -1, 'devign': 2, 'regvd': 34, 'vulberta_cnn': 24}
48         error_propagate(errp, local_err);                                              {'codebert': 7, 'PLBART': -1, 'devign': 14, 'regvd': 17, 'vulberta_cnn': 0}
50         goto exit;                                                                     {'codebert': 1, 'PLBART': -1, 'devign': 11, 'regvd': 44, 'vulberta_cnn': 27}
52     }                                                                                  {'codebert': 0, 'PLBART': -1, 'devign': -1, 'regvd': 53, 'vulberta_cnn': 11}
56     memset(&cow_header, 0, sizeof(cow_header));                                        {'codebert': -1, 'PLBART': -1, 'devign': 38, 'regvd': 7, 'vulberta_cnn': 49}
58     cow_header.magic = cpu_to_be32(COW_MAGIC);                                         {'codebert': -1, 'PLBART': -1, 'devign': 29, 'regvd': 10, 'vulberta_cnn': 6}
60     cow_header.version = cpu_to_be32(COW_VERSION);                                     {'codebert': -1, 'PLBART': -1, 'devign': 27, 'regvd': 9, 'vulberta_cnn': 48}
62     if (image_filename) {                                                              {'codebert': -1, 'PLBART': -1, 'devign': 17, 'regvd': 24, 'vulberta_cnn': 20}
64         /* Note: if no file, we put a dummy mtime */                                   {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 30, 'vulberta_cnn': -1}
66         cow_header.mtime = cpu_to_be32(0);                                             {'codebert': -1, 'PLBART': -1, 'devign': 28, 'regvd': 6, 'vulberta_cnn': 2}
70         if (stat(image_filename, &st) != 0) {                                          {'codebert': -1, 'PLBART': -1, 'devign': 5, 'regvd': 12, 'vulberta_cnn': 1}
72             goto mtime_fail;                                                           {'codebert': -1, 'PLBART': -1, 'devign': 39, 'regvd': 31, 'vulberta_cnn': 13}
74         }                                                                              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 52, 'vulberta_cnn': 32}
76         cow_header.mtime = cpu_to_be32(st.st_mtime);                                   {'codebert': -1, 'PLBART': -1, 'devign': 32, 'regvd': 8, 'vulberta_cnn': 50}
78     mtime_fail:                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 25, 'regvd': 36, 'vulberta_cnn': 29}
80         pstrcpy(cow_header.backing_file, sizeof(cow_header.backing_file),              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 16, 'vulberta_cnn': 35}
82                 image_filename);                                                       {'codebert': -1, 'PLBART': -1, 'devign': 16, 'regvd': 25, 'vulberta_cnn': 38}
84     }                                                                                  {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 51, 'vulberta_cnn': 41}
86     cow_header.sectorsize = cpu_to_be32(512);                                          {'codebert': -1, 'PLBART': -1, 'devign': 18, 'regvd': 13, 'vulberta_cnn': 15}
88     cow_header.size = cpu_to_be64(image_sectors * 512);                                {'codebert': -1, 'PLBART': -1, 'devign': 30, 'regvd': 4, 'vulberta_cnn': 10}
90     ret = bdrv_pwrite(cow_bs, 0, &cow_header, sizeof(cow_header));                     {'codebert': -1, 'PLBART': -1, 'devign': 26, 'regvd': 5, 'vulberta_cnn': 44}
92     if (ret < 0) {                                                                     {'codebert': -1, 'PLBART': -1, 'devign': 1, 'regvd': 33, 'vulberta_cnn': 5}
94         goto exit;                                                                     {'codebert': -1, 'PLBART': -1, 'devign': 10, 'regvd': 43, 'vulberta_cnn': 33}
96     }                                                                                  {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 50, 'vulberta_cnn': 34}
100     /* resize to include at least all the bitmap */                                   {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 37, 'vulberta_cnn': -1}
102     ret = bdrv_truncate(cow_bs,                                                       {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 19, 'vulberta_cnn': 30}
104         sizeof(cow_header) + ((image_sectors + 7) >> 3));                             {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 14, 'vulberta_cnn': 39}
106     if (ret < 0) {                                                                    {'codebert': -1, 'PLBART': -1, 'devign': 0, 'regvd': 32, 'vulberta_cnn': 7}
108         goto exit;                                                                    {'codebert': -1, 'PLBART': -1, 'devign': 9, 'regvd': 42, 'vulberta_cnn': 26}
110     }                                                                                 {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 49, 'vulberta_cnn': 43}
114 exit:                                                                                 {'codebert': -1, 'PLBART': -1, 'devign': 13, 'regvd': 47, 'vulberta_cnn': 14}
116     g_free(image_filename);                                                           {'codebert': -1, 'PLBART': -1, 'devign': 7, 'regvd': 21, 'vulberta_cnn': 23}
118     bdrv_unref(cow_bs);                                                               {'codebert': -1, 'PLBART': -1, 'devign': 31, 'regvd': 20, 'vulberta_cnn': 45}
120     return ret;                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 21, 'regvd': 41, 'vulberta_cnn': 46}
122 }                                                                                     {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 48, 'vulberta_cnn': 51}
-----------------------
Highlighted lines: 
0 static int cow_create(const char *filename, QemuOpts *opts, Error **errp)
22     image_sectors = qemu_opt_get_size_del(opts, BLOCK_OPT_SIZE, 0) / 512;
24     image_filename = qemu_opt_get_del(opts, BLOCK_OPT_BACKING_FILE);
--------------------------------------------------------------------------------------------------------------
Example ids:  4017 project:  qemu commit id:  84593a0807004d852132eaa56edf24d55793d480 Number of lines:  61 tground truth:  1
Original lines: 
Predicted Correctly by :  ['codebert', 'devign', 'regvd', 'vulberta_cnn', 'vulberta_mlp']
0 static int ram_init_all(RAMState **rsp)                                                {'codebert': 1, 'devign': 20, 'regvd': 21, 'vulberta_cnn': 22, 'vulberta_mlp': 20}
2 {                                                                                      {'codebert': 9, 'devign': -1, 'regvd': 51, 'vulberta_cnn': 20, 'vulberta_mlp': 43}
4     Error *local_err = NULL;                                                           {'codebert': 10, 'devign': 46, 'regvd': 39, 'vulberta_cnn': 2, 'vulberta_mlp': 54}
8     if (ram_state_init(rsp)) {                                                         {'codebert': 4, 'devign': 23, 'regvd': 24, 'vulberta_cnn': 16, 'vulberta_mlp': 49}
10         return -1;                                                                    {'codebert': 17, 'devign': 32, 'regvd': 49, 'vulberta_cnn': 21, 'vulberta_mlp': 31}
12     }                                                                                 {'codebert': 13, 'devign': -1, 'regvd': 60, 'vulberta_cnn': 31, 'vulberta_mlp': 19}
16     if (migrate_use_xbzrle()) {                                                       {'codebert': 2, 'devign': 10, 'regvd': 15, 'vulberta_cnn': 6, 'vulberta_mlp': 24}
18         XBZRLE_cache_lock();                                                          {'codebert': 11, 'devign': 40, 'regvd': 11, 'vulberta_cnn': 7, 'vulberta_mlp': 21}
20         XBZRLE.zero_target_page = g_malloc0(TARGET_PAGE_SIZE);                        {'codebert': 0, 'devign': 21, 'regvd': 2, 'vulberta_cnn': 54, 'vulberta_mlp': 9}
22         XBZRLE.cache = cache_init(migrate_xbzrle_cache_size(),                        {'codebert': 3, 'devign': 11, 'regvd': 3, 'vulberta_cnn': 52, 'vulberta_mlp': 7}
24                                   TARGET_PAGE_SIZE, &local_err);                      {'codebert': 6, 'devign': 22, 'regvd': 22, 'vulberta_cnn': 9, 'vulberta_mlp': 34}
26         if (!XBZRLE.cache) {                                                          {'codebert': 14, 'devign': 4, 'regvd': 28, 'vulberta_cnn': 36, 'vulberta_mlp': 28}
28             XBZRLE_cache_unlock();                                                    {'codebert': 12, 'devign': 25, 'regvd': 9, 'vulberta_cnn': 5, 'vulberta_mlp': 33}
30             error_report_err(local_err);                                              {'codebert': 8, 'devign': 36, 'regvd': 37, 'vulberta_cnn': 34, 'vulberta_mlp': 50}
32             g_free(*rsp);                                                             {'codebert': 7, 'devign': 8, 'regvd': 32, 'vulberta_cnn': 15, 'vulberta_mlp': 48}
34             *rsp = NULL;                                                              {'codebert': 16, 'devign': 19, 'regvd': 44, 'vulberta_cnn': 8, 'vulberta_mlp': 57}
36             return -1;                                                                {'codebert': 18, 'devign': 31, 'regvd': 48, 'vulberta_cnn': 48, 'vulberta_mlp': 26}
38         }                                                                             {'codebert': 19, 'devign': -1, 'regvd': 59, 'vulberta_cnn': 37, 'vulberta_mlp': 4}
40         XBZRLE_cache_unlock();                                                        {'codebert': 15, 'devign': 24, 'regvd': 8, 'vulberta_cnn': 12, 'vulberta_mlp': 23}
44         /* We prefer not to abort if there is no memory */                            {'codebert': 5, 'devign': -1, 'regvd': 40, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
46         XBZRLE.encoded_buf = g_try_malloc0(TARGET_PAGE_SIZE);                         {'codebert': -1, 'devign': 12, 'regvd': 0, 'vulberta_cnn': 53, 'vulberta_mlp': 18}
48         if (!XBZRLE.encoded_buf) {                                                    {'codebert': -1, 'devign': 9, 'regvd': 6, 'vulberta_cnn': 13, 'vulberta_mlp': 13}
50             error_report("Error allocating encoded_buf");                             {'codebert': -1, 'devign': 45, 'regvd': 7, 'vulberta_cnn': 17, 'vulberta_mlp': 12}
52             g_free(*rsp);                                                             {'codebert': -1, 'devign': 7, 'regvd': 31, 'vulberta_cnn': 29, 'vulberta_mlp': 42}
54             *rsp = NULL;                                                              {'codebert': -1, 'devign': 18, 'regvd': 43, 'vulberta_cnn': 45, 'vulberta_mlp': 41}
56             return -1;                                                                {'codebert': -1, 'devign': 30, 'regvd': 47, 'vulberta_cnn': 41, 'vulberta_mlp': 40}
58         }                                                                             {'codebert': -1, 'devign': -1, 'regvd': 58, 'vulberta_cnn': 42, 'vulberta_mlp': 6}
62         XBZRLE.current_buf = g_try_malloc(TARGET_PAGE_SIZE);                          {'codebert': -1, 'devign': 13, 'regvd': 1, 'vulberta_cnn': 46, 'vulberta_mlp': 15}
64         if (!XBZRLE.current_buf) {                                                    {'codebert': -1, 'devign': 1, 'regvd': 5, 'vulberta_cnn': 24, 'vulberta_mlp': 5}
66             error_report("Error allocating current_buf");                             {'codebert': -1, 'devign': 44, 'regvd': 10, 'vulberta_cnn': 1, 'vulberta_mlp': 17}
68             g_free(XBZRLE.encoded_buf);                                               {'codebert': -1, 'devign': 16, 'regvd': 4, 'vulberta_cnn': 18, 'vulberta_mlp': 11}
70             XBZRLE.encoded_buf = NULL;                                                {'codebert': -1, 'devign': 43, 'regvd': 12, 'vulberta_cnn': 4, 'vulberta_mlp': 45}
72             g_free(*rsp);                                                             {'codebert': -1, 'devign': 6, 'regvd': 30, 'vulberta_cnn': 19, 'vulberta_mlp': 30}
74             *rsp = NULL;                                                              {'codebert': -1, 'devign': 17, 'regvd': 42, 'vulberta_cnn': 33, 'vulberta_mlp': 53}
76             return -1;                                                                {'codebert': -1, 'devign': 29, 'regvd': 46, 'vulberta_cnn': 28, 'vulberta_mlp': 56}
78         }                                                                             {'codebert': -1, 'devign': -1, 'regvd': 57, 'vulberta_cnn': 23, 'vulberta_mlp': 3}
80     }                                                                                 {'codebert': -1, 'devign': -1, 'regvd': 56, 'vulberta_cnn': 44, 'vulberta_mlp': 1}
84     /* For memory_global_dirty_log_start below.  */                                   {'codebert': -1, 'devign': 48, 'regvd': 36, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
86     qemu_mutex_lock_iothread();                                                       {'codebert': -1, 'devign': 33, 'regvd': 18, 'vulberta_cnn': 14, 'vulberta_mlp': 55}
90     qemu_mutex_lock_ramlist();                                                        {'codebert': -1, 'devign': 35, 'regvd': 16, 'vulberta_cnn': 47, 'vulberta_mlp': 32}
92     rcu_read_lock();                                                                  {'codebert': -1, 'devign': 38, 'regvd': 38, 'vulberta_cnn': 39, 'vulberta_mlp': 2}
96     /* Skip setting bitmap if there is no RAM */                                      {'codebert': -1, 'devign': -1, 'regvd': 41, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
98     if (ram_bytes_total()) {                                                          {'codebert': -1, 'devign': 5, 'regvd': 33, 'vulberta_cnn': 25, 'vulberta_mlp': 47}
100         RAMBlock *block;                                                             {'codebert': -1, 'devign': 42, 'regvd': 45, 'vulberta_cnn': 32, 'vulberta_mlp': 39}
104         QLIST_FOREACH_RCU(block, &ram_list.blocks, next) {                           {'codebert': -1, 'devign': 0, 'regvd': 17, 'vulberta_cnn': 27, 'vulberta_mlp': 35}
106             unsigned long pages = block->max_length >> TARGET_PAGE_BITS;             {'codebert': -1, 'devign': 41, 'regvd': 19, 'vulberta_cnn': 11, 'vulberta_mlp': 14}
110             block->bmap = bitmap_new(pages);                                         {'codebert': -1, 'devign': 15, 'regvd': 29, 'vulberta_cnn': 51, 'vulberta_mlp': 27}
112             bitmap_set(block->bmap, 0, pages);                                       {'codebert': -1, 'devign': 2, 'regvd': 34, 'vulberta_cnn': 0, 'vulberta_mlp': 16}
114             if (migrate_postcopy_ram()) {                                            {'codebert': -1, 'devign': 27, 'regvd': 25, 'vulberta_cnn': 55, 'vulberta_mlp': 22}
116                 block->unsentmap = bitmap_new(pages);                                {'codebert': -1, 'devign': 14, 'regvd': 23, 'vulberta_cnn': 49, 'vulberta_mlp': 46}
118                 bitmap_set(block->unsentmap, 0, pages);                              {'codebert': -1, 'devign': 3, 'regvd': 27, 'vulberta_cnn': 3, 'vulberta_mlp': 52}
120             }                                                                        {'codebert': -1, 'devign': -1, 'regvd': 55, 'vulberta_cnn': 38, 'vulberta_mlp': 38}
122         }                                                                            {'codebert': -1, 'devign': -1, 'regvd': 54, 'vulberta_cnn': 30, 'vulberta_mlp': 37}
124     }                                                                                {'codebert': -1, 'devign': -1, 'regvd': 53, 'vulberta_cnn': 40, 'vulberta_mlp': 36}
128     memory_global_dirty_log_start();                                                 {'codebert': -1, 'devign': 26, 'regvd': 20, 'vulberta_cnn': 50, 'vulberta_mlp': 25}
130     migration_bitmap_sync(*rsp);                                                     {'codebert': -1, 'devign': 28, 'regvd': 26, 'vulberta_cnn': 56, 'vulberta_mlp': 51}
132     qemu_mutex_unlock_ramlist();                                                     {'codebert': -1, 'devign': 34, 'regvd': 13, 'vulberta_cnn': 35, 'vulberta_mlp': 44}
134     qemu_mutex_unlock_iothread();                                                    {'codebert': -1, 'devign': 37, 'regvd': 14, 'vulberta_cnn': 43, 'vulberta_mlp': 29}
136     rcu_read_unlock();                                                               {'codebert': -1, 'devign': 39, 'regvd': 35, 'vulberta_cnn': 10, 'vulberta_mlp': 10}
140     return 0;                                                                        {'codebert': -1, 'devign': 47, 'regvd': 50, 'vulberta_cnn': 26, 'vulberta_mlp': 8}
142 }                                                                                    {'codebert': -1, 'devign': -1, 'regvd': 52, 'vulberta_cnn': 57, 'vulberta_mlp': 0}
-----------------------
Highlighted lines: 
20         XBZRLE.zero_target_page = g_malloc0(TARGET_PAGE_SIZE);
22         XBZRLE.cache = cache_init(migrate_xbzrle_cache_size(),
64         if (!XBZRLE.current_buf) {
--------------------------------------------------------------------------------------------------------------
Example ids:  4029 project:  FFmpeg commit id:  8c5cd1c9d33b4b287f85d42efb1aecfaee31de6c Number of lines:  183 tground truth:  1
Original lines: 
Predicted Correctly by :  ['linevul', 'codebert', 'PLBART', 'devign', 'regvd', 'vulberta_cnn']
0 static int decode_entropy_coded_image(WebPContext *s, enum ImageRole role,                  {'linevul': 7, 'codebert': 0, 'PLBART': 1, 'devign': 75, 'regvd': 51, 'vulberta_cnn': 33}
2                                       int w, int h)                                         {'linevul': 0, 'codebert': 1, 'PLBART': 11, 'devign': 129, 'regvd': 118, 'vulberta_cnn': 53}
4 {                                                                                           {'linevul': 26, 'codebert': 2, 'PLBART': 13, 'devign': 397, 'regvd': 158, 'vulberta_cnn': 63}
6     ImageContext *img;                                                                      {'linevul': 23, 'codebert': 9, 'PLBART': 10, 'devign': 133, 'regvd': 109, 'vulberta_cnn': 30}
8     HuffReader *hg;                                                                         {'linevul': 20, 'codebert': 6, 'PLBART': 8, 'devign': 132, 'regvd': 125, 'vulberta_cnn': 93}
10     int i, j, ret, x, y, width;                                                            {'linevul': 13, 'codebert': 14, 'PLBART': 3, 'devign': 116, 'regvd': 105, 'vulberta_cnn': 13}
14     img       = &s->image[role];                                                           {'linevul': 11, 'codebert': 16, 'PLBART': 2, 'devign': 15, 'regvd': 66, 'vulberta_cnn': 74}
16     img->role = role;                                                                      {'linevul': 21, 'codebert': 22, 'PLBART': -1, 'devign': 76, 'regvd': 85, 'vulberta_cnn': 44}
20     if (!img->frame) {                                                                     {'linevul': 18, 'codebert': 12, 'PLBART': 4, 'devign': 40, 'regvd': 62, 'vulberta_cnn': 58}
22         img->frame = av_frame_alloc();                                                     {'linevul': 12, 'codebert': 8, 'PLBART': 7, 'devign': 36, 'regvd': 30, 'vulberta_cnn': 56}
24         if (!img->frame)                                                                   {'linevul': 15, 'codebert': 3, 'PLBART': 9, 'devign': 39, 'regvd': 71, 'vulberta_cnn': 32}
26             return AVERROR(ENOMEM);                                                        {'linevul': 9, 'codebert': 4, 'PLBART': 5, 'devign': 100, 'regvd': 82, 'vulberta_cnn': 100}
28     }                                                                                      {'linevul': 25, 'codebert': 7, 'PLBART': 14, 'devign': 382, 'regvd': 182, 'vulberta_cnn': 70}
32     img->frame->format = AV_PIX_FMT_ARGB;                                                  {'linevul': 8, 'codebert': 15, 'PLBART': 0, 'devign': 53, 'regvd': 46, 'vulberta_cnn': 46}
34     img->frame->width  = w;                                                                {'linevul': 16, 'codebert': 18, 'PLBART': 6, 'devign': 30, 'regvd': 68, 'vulberta_cnn': 23}
36     img->frame->height = h;                                                                {'linevul': 17, 'codebert': 20, 'PLBART': 12, 'devign': 37, 'regvd': 76, 'vulberta_cnn': 36}
40     if (role == IMAGE_ROLE_ARGB && !img->is_alpha_primary) {                               {'linevul': 4, 'codebert': 17, 'PLBART': 15, 'devign': 28, 'regvd': 4, 'vulberta_cnn': 99}
42         ThreadFrame pt = { .f = img->frame };                                              {'linevul': 10, 'codebert': 11, 'PLBART': -1, 'devign': 42, 'regvd': 53, 'vulberta_cnn': 3}
44         ret = ff_thread_get_buffer(s->avctx, &pt, 0);                                      {'linevul': 3, 'codebert': 5, 'PLBART': -1, 'devign': 8, 'regvd': 5, 'vulberta_cnn': 8}
46     } else                                                                                 {'linevul': 24, 'codebert': 21, 'PLBART': -1, 'devign': 370, 'regvd': 146, 'vulberta_cnn': 95}
48         ret = av_frame_get_buffer(img->frame, 1);                                          {'linevul': 6, 'codebert': 10, 'PLBART': -1, 'devign': 54, 'regvd': 1, 'vulberta_cnn': 68}
50     if (ret < 0)                                                                           {'linevul': 22, 'codebert': 23, 'PLBART': -1, 'devign': 58, 'regvd': 113, 'vulberta_cnn': 86}
52         return ret;                                                                        {'linevul': 19, 'codebert': 19, 'PLBART': -1, 'devign': 127, 'regvd': 135, 'vulberta_cnn': 88}
56     if (get_bits1(&s->gb)) {                                                               {'linevul': 14, 'codebert': 13, 'PLBART': -1, 'devign': 64, 'regvd': 45, 'vulberta_cnn': 12}
58         img->color_cache_bits = get_bits(&s->gb, 4);                                       {'linevul': 5, 'codebert': -1, 'PLBART': -1, 'devign': 31, 'regvd': 0, 'vulberta_cnn': 96}
60         if (img->color_cache_bits < 1 || img->color_cache_bits > 11) {                     {'linevul': 2, 'codebert': -1, 'PLBART': -1, 'devign': 38, 'regvd': 13, 'vulberta_cnn': 83}
62             av_log(s->avctx, AV_LOG_ERROR, "invalid color cache bits: %d\n",               {'linevul': 1, 'codebert': -1, 'PLBART': -1, 'devign': 136, 'regvd': 18, 'vulberta_cnn': 17}
64                    img->color_cache_bits);                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 77, 'regvd': 38, 'vulberta_cnn': 31}
66             return AVERROR_INVALIDDATA;                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 72, 'regvd': 92, 'vulberta_cnn': 43}
68         }                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 357, 'regvd': 181, 'vulberta_cnn': 38}
70         img->color_cache = av_mallocz_array(1 << img->color_cache_bits,                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 50, 'regvd': 3, 'vulberta_cnn': 5}
72                                             sizeof(*img->color_cache));                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 123, 'regvd': 21, 'vulberta_cnn': 14}
74         if (!img->color_cache)                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 94, 'regvd': 42, 'vulberta_cnn': 62}
76             return AVERROR(ENOMEM);                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 99, 'regvd': 81, 'vulberta_cnn': 77}
78     } else {                                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 351, 'regvd': 144, 'vulberta_cnn': 61}
80         img->color_cache_bits = 0;                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 16, 'regvd': 35, 'vulberta_cnn': 21}
82     }                                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 348, 'regvd': 180, 'vulberta_cnn': 42}
86     img->nb_huffman_groups = 1;                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 49, 'regvd': 43, 'vulberta_cnn': 65}
88     if (role == IMAGE_ROLE_ARGB && get_bits1(&s->gb)) {                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 27, 'regvd': 6, 'vulberta_cnn': 1}
90         ret = decode_entropy_image(s);                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 117, 'regvd': 56, 'vulberta_cnn': 20}
92         if (ret < 0)                                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 57, 'regvd': 112, 'vulberta_cnn': 67}
94             return ret;                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 126, 'regvd': 134, 'vulberta_cnn': 49}
96         img->nb_huffman_groups = s->nb_huffman_groups;                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 68, 'regvd': 49, 'vulberta_cnn': 4}
98     }                                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 338, 'regvd': 179, 'vulberta_cnn': 69}
100     img->huffman_groups = av_mallocz_array(img->nb_huffman_groups *                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 67, 'regvd': 33, 'vulberta_cnn': 10}
102                                            HUFFMAN_CODES_PER_META_CODE,                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 335, 'regvd': 116, 'vulberta_cnn': 81}
104                                            sizeof(*img->huffman_groups));                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 122, 'regvd': 27, 'vulberta_cnn': 87}
106     if (!img->huffman_groups)                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 88, 'regvd': 41, 'vulberta_cnn': 91}
108         return AVERROR(ENOMEM);                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 98, 'regvd': 80, 'vulberta_cnn': 27}
112     for (i = 0; i < img->nb_huffman_groups; i++) {                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 9, 'regvd': 15, 'vulberta_cnn': 51}
114         hg = &img->huffman_groups[i * HUFFMAN_CODES_PER_META_CODE];                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 62, 'regvd': 39, 'vulberta_cnn': 6}
116         for (j = 0; j < HUFFMAN_CODES_PER_META_CODE; j++) {                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 32, 'regvd': 64, 'vulberta_cnn': 85}
118             int alphabet_size = alphabet_sizes[j];                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 103, 'regvd': 79, 'vulberta_cnn': 98}
120             if (!j && img->color_cache_bits > 0)                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 13, 'regvd': 16, 'vulberta_cnn': 39}
122                 alphabet_size += 1 << img->color_cache_bits;                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 34, 'regvd': 26, 'vulberta_cnn': 37}
126             if (get_bits1(&s->gb)) {                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 63, 'regvd': 44, 'vulberta_cnn': 101}
128                 read_huffman_code_simple(s, &hg[j]);                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 130, 'regvd': 50, 'vulberta_cnn': 89}
130             } else {                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 318, 'regvd': 143, 'vulberta_cnn': 54}
132                 ret = read_huffman_code_normal(s, &hg[j], alphabet_size);                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 96, 'regvd': 34, 'vulberta_cnn': 72}
134                 if (ret < 0)                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 56, 'regvd': 111, 'vulberta_cnn': 71}
136                     return ret;                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 125, 'regvd': 133, 'vulberta_cnn': 41}
138             }                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 313, 'regvd': 178, 'vulberta_cnn': 34}
140         }                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 311, 'regvd': 177, 'vulberta_cnn': 48}
142     }                                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 309, 'regvd': 176, 'vulberta_cnn': 47}
146     width = img->frame->width;                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 29, 'regvd': 67, 'vulberta_cnn': 45}
148     if (role == IMAGE_ROLE_ARGB && s->reduced_width > 0)                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 52, 'regvd': 29, 'vulberta_cnn': 35}
150         width = s->reduced_width;                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 93, 'regvd': 73, 'vulberta_cnn': 15}
154     x = 0; y = 0;                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 12, 'regvd': 127, 'vulberta_cnn': 9}
156     while (y < img->frame->height) {                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 33, 'regvd': 59, 'vulberta_cnn': 76}
158         int v;                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 141, 'regvd': 145, 'vulberta_cnn': 52}
162         hg = get_huffman_group(s, img, x, y);                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 55, 'regvd': 28, 'vulberta_cnn': 73}
164         v = huff_reader_get_symbol(&hg[HUFF_IDX_GREEN], &s->gb);                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 78, 'regvd': 22, 'vulberta_cnn': 16}
166         if (v < NUM_LITERAL_CODES) {                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 111, 'regvd': 100, 'vulberta_cnn': 50}
168             /* literal pixel values */                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 292, 'regvd': 148, 'vulberta_cnn': -1}
170             uint8_t *p = GET_PIXEL(img->frame, x, y);                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 7, 'regvd': 12, 'vulberta_cnn': 29}
172             p[2] = v;                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 118, 'regvd': 137, 'vulberta_cnn': 94}
174             p[1] = huff_reader_get_symbol(&hg[HUFF_IDX_RED],   &s->gb);                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 86, 'regvd': 14, 'vulberta_cnn': 59}
176             p[3] = huff_reader_get_symbol(&hg[HUFF_IDX_BLUE],  &s->gb);                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 87, 'regvd': 24, 'vulberta_cnn': 7}
178             p[0] = huff_reader_get_symbol(&hg[HUFF_IDX_ALPHA], &s->gb);                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 51, 'regvd': 8, 'vulberta_cnn': 0}
180             if (img->color_cache_bits)                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 61, 'regvd': 32, 'vulberta_cnn': 66}
182                 color_cache_put(img, AV_RB32(p));                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 121, 'regvd': 37, 'vulberta_cnn': 97}
184             x++;                                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 21, 'regvd': 155, 'vulberta_cnn': 22}
186             if (x == width) {                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 48, 'regvd': 97, 'vulberta_cnn': 60}
188                 x = 0;                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 24, 'regvd': 131, 'vulberta_cnn': 80}
190                 y++;                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 45, 'regvd': 152, 'vulberta_cnn': 79}
192             }                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 279, 'regvd': 175, 'vulberta_cnn': 78}
194         } else if (v < NUM_LITERAL_CODES + NUM_LENGTH_CODES) {                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 73, 'regvd': 70, 'vulberta_cnn': 25}
196             /* LZ77 backwards mapping */                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 276, 'regvd': 136, 'vulberta_cnn': -1}
198             int prefix_code, length, distance, ref_x, ref_y;                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 124, 'regvd': 78, 'vulberta_cnn': 75}
202             /* parse length and distance */                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 271, 'regvd': 132, 'vulberta_cnn': -1}
204             prefix_code = v - NUM_LITERAL_CODES;                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 102, 'regvd': 106, 'vulberta_cnn': 26}
206             if (prefix_code < 4) {                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 92, 'regvd': 87, 'vulberta_cnn': 84}
208                 length = prefix_code + 1;                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 108, 'regvd': 99, 'vulberta_cnn': 92}
210             } else {                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 266, 'regvd': 142, 'vulberta_cnn': 40}
212                 int extra_bits = (prefix_code - 2) >> 1;                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 65, 'regvd': 55, 'vulberta_cnn': 18}
214                 int offset     = 2 + (prefix_code & 1) << extra_bits;                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 81, 'regvd': 48, 'vulberta_cnn': 19}
216                 length = offset + get_bits(&s->gb, extra_bits) + 1;                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 84, 'regvd': 19, 'vulberta_cnn': 90}
218             }                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 261, 'regvd': 174, 'vulberta_cnn': 64}
220             prefix_code = huff_reader_get_symbol(&hg[HUFF_IDX_DIST], &s->gb);             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 66, 'regvd': 20, 'vulberta_cnn': 2}
222             if (prefix_code > 39) {                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 104, 'regvd': 101, 'vulberta_cnn': 24}
224                 av_log(s->avctx, AV_LOG_ERROR,                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 135, 'regvd': 58, 'vulberta_cnn': 82}
226                        "distance prefix code too large: %d\n", prefix_code);              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 140, 'regvd': 69, 'vulberta_cnn': 28}
228                 return AVERROR_INVALIDDATA;                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 71, 'regvd': 91, 'vulberta_cnn': 55}
230             }                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 254, 'regvd': 173, 'vulberta_cnn': 57}
232             if (prefix_code < 4) {                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 91, 'regvd': 86, 'vulberta_cnn': 11}
234                 distance = prefix_code + 1;                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 106, 'regvd': 93, 'vulberta_cnn': -1}
236             } else {                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 250, 'regvd': 141, 'vulberta_cnn': -1}
238                 int extra_bits = prefix_code - 2 >> 1;                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 90, 'regvd': 74, 'vulberta_cnn': -1}
240                 int offset     = 2 + (prefix_code & 1) << extra_bits;                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 80, 'regvd': 47, 'vulberta_cnn': -1}
242                 distance = offset + get_bits(&s->gb, extra_bits) + 1;                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 82, 'regvd': 25, 'vulberta_cnn': -1}
244             }                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 245, 'regvd': 172, 'vulberta_cnn': -1}
248             /* find reference location */                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 139, 'regvd': 149, 'vulberta_cnn': -1}
250             if (distance <= NUM_SHORT_DISTANCES) {                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 83, 'regvd': 63, 'vulberta_cnn': -1}
252                 int xi = lz77_distance_offsets[distance - 1][0];                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 2, 'regvd': 72, 'vulberta_cnn': -1}
254                 int yi = lz77_distance_offsets[distance - 1][1];                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 105, 'regvd': 77, 'vulberta_cnn': -1}
256                 distance = FFMAX(1, xi + yi * width);                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 113, 'regvd': 52, 'vulberta_cnn': -1}
258             } else {                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 236, 'regvd': 140, 'vulberta_cnn': -1}
260                 distance -= NUM_SHORT_DISTANCES;                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 115, 'regvd': 102, 'vulberta_cnn': -1}
262             }                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 233, 'regvd': 171, 'vulberta_cnn': -1}
264             ref_x = x;                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 85, 'regvd': 115, 'vulberta_cnn': -1}
266             ref_y = y;                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 97, 'regvd': 114, 'vulberta_cnn': -1}
268             if (distance <= x) {                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 74, 'regvd': 98, 'vulberta_cnn': -1}
270                 ref_x -= distance;                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 35, 'regvd': 103, 'vulberta_cnn': -1}
272                 distance = 0;                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 79, 'regvd': 117, 'vulberta_cnn': -1}
274             } else {                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 226, 'regvd': 139, 'vulberta_cnn': -1}
276                 ref_x = 0;                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 4, 'regvd': 108, 'vulberta_cnn': -1}
278                 distance -= x;                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 101, 'regvd': 119, 'vulberta_cnn': -1}
280             }                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 222, 'regvd': 170, 'vulberta_cnn': -1}
282             while (distance >= width) {                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 95, 'regvd': 94, 'vulberta_cnn': -1}
284                 ref_y--;                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 110, 'regvd': 123, 'vulberta_cnn': -1}
286                 distance -= width;                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 107, 'regvd': 110, 'vulberta_cnn': -1}
288             }                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 217, 'regvd': 169, 'vulberta_cnn': -1}
290             if (distance > 0) {                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 119, 'regvd': 104, 'vulberta_cnn': -1}
292                 ref_x = width - distance;                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 59, 'regvd': 83, 'vulberta_cnn': -1}
294                 ref_y--;                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 109, 'regvd': 122, 'vulberta_cnn': -1}
296             }                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 212, 'regvd': 168, 'vulberta_cnn': -1}
298             ref_x = FFMAX(0, ref_x);                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 1, 'regvd': 61, 'vulberta_cnn': -1}
300             ref_y = FFMAX(0, ref_y);                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 41, 'regvd': 60, 'vulberta_cnn': -1}
304             /* copy pixels                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 206, 'regvd': 147, 'vulberta_cnn': -1}
306              * source and dest regions can overlap and wrap lines, so just                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 204, 'regvd': 120, 'vulberta_cnn': -1}
308              * copy per-pixel */                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 202, 'regvd': 157, 'vulberta_cnn': -1}
310             for (i = 0; i < length; i++) {                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 18, 'regvd': 84, 'vulberta_cnn': -1}
312                 uint8_t *p_ref = GET_PIXEL(img->frame, ref_x, ref_y);                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 0, 'regvd': 11, 'vulberta_cnn': -1}
314                 uint8_t *p     = GET_PIXEL(img->frame,     x,     y);                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 6, 'regvd': 10, 'vulberta_cnn': -1}
318                 AV_COPY32(p, p_ref);                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 128, 'regvd': 75, 'vulberta_cnn': -1}
320                 if (img->color_cache_bits)                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 60, 'regvd': 31, 'vulberta_cnn': -1}
322                     color_cache_put(img, AV_RB32(p));                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 120, 'regvd': 36, 'vulberta_cnn': -1}
324                 x++;                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 20, 'regvd': 154, 'vulberta_cnn': -1}
326                 ref_x++;                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 11, 'regvd': 124, 'vulberta_cnn': -1}
328                 if (x == width) {                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 47, 'regvd': 96, 'vulberta_cnn': -1}
330                     x = 0;                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 23, 'regvd': 130, 'vulberta_cnn': -1}
332                     y++;                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 44, 'regvd': 151, 'vulberta_cnn': -1}
334                 }                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 187, 'regvd': 167, 'vulberta_cnn': -1}
336                 if (ref_x == width) {                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 14, 'regvd': 65, 'vulberta_cnn': -1}
338                     ref_x = 0;                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 3, 'regvd': 107, 'vulberta_cnn': -1}
340                     ref_y++;                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 25, 'regvd': 121, 'vulberta_cnn': -1}
342                 }                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 182, 'regvd': 166, 'vulberta_cnn': -1}
344                 if (y == img->frame->height || ref_y == img->frame->height)               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 10, 'regvd': 40, 'vulberta_cnn': -1}
346                     break;                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 142, 'regvd': 156, 'vulberta_cnn': -1}
348             }                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 178, 'regvd': 165, 'vulberta_cnn': -1}
350         } else {                                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 176, 'regvd': 138, 'vulberta_cnn': -1}
352             /* read from color cache */                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 138, 'regvd': 126, 'vulberta_cnn': -1}
354             uint8_t *p = GET_PIXEL(img->frame, x, y);                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 5, 'regvd': 9, 'vulberta_cnn': -1}
356             int cache_idx = v - (NUM_LITERAL_CODES + NUM_LENGTH_CODES);                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 89, 'regvd': 54, 'vulberta_cnn': -1}
360             if (!img->color_cache_bits) {                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 26, 'regvd': 23, 'vulberta_cnn': -1}
362                 av_log(s->avctx, AV_LOG_ERROR, "color cache not found\n");                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 131, 'regvd': 7, 'vulberta_cnn': -1}
364                 return AVERROR_INVALIDDATA;                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 70, 'regvd': 90, 'vulberta_cnn': -1}
366             }                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 166, 'regvd': 164, 'vulberta_cnn': -1}
368             if (cache_idx >= 1 << img->color_cache_bits) {                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 17, 'regvd': 2, 'vulberta_cnn': -1}
370                 av_log(s->avctx, AV_LOG_ERROR,                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 134, 'regvd': 57, 'vulberta_cnn': -1}
372                        "color cache index out-of-bounds\n");                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 137, 'regvd': 88, 'vulberta_cnn': -1}
374                 return AVERROR_INVALIDDATA;                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 69, 'regvd': 89, 'vulberta_cnn': -1}
376             }                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 160, 'regvd': 163, 'vulberta_cnn': -1}
378             AV_WB32(p, img->color_cache[cache_idx]);                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 112, 'regvd': 17, 'vulberta_cnn': -1}
380             x++;                                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 19, 'regvd': 153, 'vulberta_cnn': -1}
382             if (x == width) {                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 46, 'regvd': 95, 'vulberta_cnn': -1}
384                 x = 0;                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 22, 'regvd': 129, 'vulberta_cnn': -1}
386                 y++;                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 43, 'regvd': 150, 'vulberta_cnn': -1}
388             }                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 153, 'regvd': 162, 'vulberta_cnn': -1}
390         }                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 151, 'regvd': 161, 'vulberta_cnn': -1}
392     }                                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 149, 'regvd': 160, 'vulberta_cnn': -1}
396     return 0;                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 114, 'regvd': 128, 'vulberta_cnn': -1}
398 }                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 144, 'regvd': 159, 'vulberta_cnn': -1}
-----------------------
Highlighted lines: 
0 static int decode_entropy_coded_image(WebPContext *s, enum ImageRole role,
26             return AVERROR(ENOMEM);
44         ret = ff_thread_get_buffer(s->avctx, &pt, 0);
--------------------------------------------------------------------------------------------------------------
Example ids:  4070 project:  FFmpeg commit id:  969267482de97b08503d27d2fe090ec820273e40 Number of lines:  48 tground truth:  1
Original lines: 
Predicted Correctly by :  ['codebert', 'PLBART', 'devign', 'vulberta_cnn', 'vulberta_mlp']
0 static void write_frame(AVFormatContext *s, AVPacket *pkt, OutputStream *ost)                                                                                       {'codebert': 1, 'PLBART': 1, 'devign': 0, 'vulberta_cnn': 18, 'vulberta_mlp': 9}
2 {                                                                                                                                                                   {'codebert': 9, 'PLBART': 8, 'devign': -1, 'vulberta_cnn': 23, 'vulberta_mlp': 15}
4     AVBitStreamFilterContext *bsfc = ost->bitstream_filters;                                                                                                        {'codebert': 7, 'PLBART': 2, 'devign': 2, 'vulberta_cnn': 0, 'vulberta_mlp': 21}
6     AVCodecContext          *avctx = ost->st->codec;                                                                                                                {'codebert': 10, 'PLBART': 4, 'devign': 1, 'vulberta_cnn': 22, 'vulberta_mlp': 28}
8     int ret;                                                                                                                                                        {'codebert': 11, 'PLBART': 6, 'devign': 5, 'vulberta_cnn': 21, 'vulberta_mlp': 40}
12     if ((avctx->codec_type == AVMEDIA_TYPE_VIDEO && video_sync_method == VSYNC_DROP) ||                                                                            {'codebert': 5, 'PLBART': 0, 'devign': -1, 'vulberta_cnn': 36, 'vulberta_mlp': 32}
14         (avctx->codec_type == AVMEDIA_TYPE_AUDIO && audio_sync_method < 0))                                                                                        {'codebert': 6, 'PLBART': 5, 'devign': -1, 'vulberta_cnn': 37, 'vulberta_mlp': 17}
16         pkt->pts = pkt->dts = AV_NOPTS_VALUE;                                                                                                                      {'codebert': 8, 'PLBART': 3, 'devign': 7, 'vulberta_cnn': 40, 'vulberta_mlp': 19}
20     if (avctx->codec_type == AVMEDIA_TYPE_AUDIO && pkt->dts != AV_NOPTS_VALUE) {                                                                                   {'codebert': 3, 'PLBART': 7, 'devign': -1, 'vulberta_cnn': 16, 'vulberta_mlp': 23}
22         int64_t max = ost->st->cur_dts + !(s->oformat->flags & AVFMT_TS_NONSTRICT);                                                                                {'codebert': 2, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 4, 'vulberta_mlp': 37}
24         if (ost->st->cur_dts && ost->st->cur_dts != AV_NOPTS_VALUE &&  max > pkt->dts) {                                                                           {'codebert': 4, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 8, 'vulberta_mlp': 24}
26             av_log(s, max - pkt->dts > 2 ? AV_LOG_WARNING : AV_LOG_DEBUG, "Audio timestamp %"PRId64" < %"PRId64" invalid, cliping\n", pkt->dts, max);              {'codebert': 0, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 34, 'vulberta_mlp': 16}
28             pkt->pts = pkt->dts = max;                                                                                                                             {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 38, 'vulberta_mlp': 22}
34     /*                                                                                                                                                             {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
36      * Audio encoders may split the packets --  #frames in != #packets out.                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
38      * But there is no reordering, so we can limit the number of output packets                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
40      * by simply dropping them here.                                                                                                                               {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
42      * Counting encoded video frames needs to be done separately because of                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
44      * reordering, see do_video_out()                                                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
46      */                                                                                                                                                            {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
48     if (!(avctx->codec_type == AVMEDIA_TYPE_VIDEO && avctx->codec)) {                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 5, 'vulberta_mlp': 14}
50         if (ost->frame_number >= ost->max_frames) {                                                                                                                {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 15, 'vulberta_mlp': 18}
52             av_free_packet(pkt);                                                                                                                                   {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 1, 'vulberta_mlp': 7}
54             return;                                                                                                                                                {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 9, 'vulberta_mlp': 0}
57         ost->frame_number++;                                                                                                                                       {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 3, 'vulberta_mlp': 13}
62     while (bsfc) {                                                                                                                                                 {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 10, 'vulberta_mlp': 36}
64         AVPacket new_pkt = *pkt;                                                                                                                                   {'codebert': -1, 'PLBART': -1, 'devign': 6, 'vulberta_cnn': 11, 'vulberta_mlp': 12}
66         int a = av_bitstream_filter_filter(bsfc, avctx, NULL,                                                                                                      {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 24, 'vulberta_mlp': 34}
68                                            &new_pkt.data, &new_pkt.size,                                                                                           {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 6, 'vulberta_mlp': 31}
70                                            pkt->data, pkt->size,                                                                                                   {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 26, 'vulberta_mlp': 33}
72                                            pkt->flags & AV_PKT_FLAG_KEY);                                                                                          {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 7, 'vulberta_mlp': 26}
84         if (a > 0) {                                                                                                                                               {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 20, 'vulberta_mlp': 20}
86             av_free_packet(pkt);                                                                                                                                   {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 32, 'vulberta_mlp': 6}
88             new_pkt.destruct = av_destruct_packet;                                                                                                                 {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 27, 'vulberta_mlp': 27}
90         } else if (a < 0) {                                                                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 29, 'vulberta_mlp': 35}
92             av_log(NULL, AV_LOG_ERROR, "Failed to open bitstream filter %s for stream %d with codec %s",                                                           {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 39, 'vulberta_mlp': 39}
94                    bsfc->filter->name, pkt->stream_index,                                                                                                          {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 2, 'vulberta_mlp': 29}
96                    avctx->codec ? avctx->codec->name : "copy");                                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 25, 'vulberta_mlp': 10}
98             print_error("", a);                                                                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 17, 'vulberta_mlp': 2}
100             if (exit_on_error)                                                                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 19, 'vulberta_mlp': 3}
102                 exit_program(1);                                                                                                                                  {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 33, 'vulberta_mlp': 1}
105         *pkt = new_pkt;                                                                                                                                           {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 28, 'vulberta_mlp': 8}
109         bsfc = bsfc->next;                                                                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 12, 'vulberta_mlp': 25}
114     pkt->stream_index = ost->index;                                                                                                                               {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 14, 'vulberta_mlp': 38}
116     ret = av_interleaved_write_frame(s, pkt);                                                                                                                     {'codebert': -1, 'PLBART': -1, 'devign': 4, 'vulberta_cnn': 13, 'vulberta_mlp': 11}
118     if (ret < 0) {                                                                                                                                                {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 30, 'vulberta_mlp': 30}
120         print_error("av_interleaved_write_frame()", ret);                                                                                                         {'codebert': -1, 'PLBART': -1, 'devign': 3, 'vulberta_cnn': 35, 'vulberta_mlp': 4}
122         exit_program(1);                                                                                                                                          {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 31, 'vulberta_mlp': 5}
-----------------------
Highlighted lines: 
0 static void write_frame(AVFormatContext *s, AVPacket *pkt, OutputStream *ost)
4     AVBitStreamFilterContext *bsfc = ost->bitstream_filters;
16         pkt->pts = pkt->dts = AV_NOPTS_VALUE;
--------------------------------------------------------------------------------------------------------------
Example ids:  4639 project:  FFmpeg commit id:  57d04d3f11290d1848efa3b47031762f936d4cb3 Number of lines:  106 tground truth:  1
Original lines: 
Predicted Correctly by :  ['linevul', 'PLBART', 'devign', 'vulberta_cnn', 'vulberta_mlp']
0 static inline void blockCopy(uint8_t dst[], int dstStride, uint8_t src[], int srcStride,               {'linevul': 0, 'PLBART': 0, 'devign': 26, 'vulberta_cnn': 51, 'vulberta_mlp': 33}
2 	int numLines, int levelFix)                                                                           {'linevul': 19, 'PLBART': 8, 'devign': 0, 'vulberta_cnn': 9, 'vulberta_mlp': 69}
4 {                                                                                                      {'linevul': 25, 'PLBART': 14, 'devign': 221, 'vulberta_cnn': 93, 'vulberta_mlp': 7}
6 	int i;                                                                                                {'linevul': 23, 'PLBART': 13, 'devign': 80, 'vulberta_cnn': 10, 'vulberta_mlp': 15}
8 	if(levelFix)                                                                                          {'linevul': 22, 'PLBART': 10, 'devign': 1, 'vulberta_cnn': 90, 'vulberta_mlp': 68}
10 	{                                                                                                    {'linevul': 24, 'PLBART': 15, 'devign': 217, 'vulberta_cnn': 31, 'vulberta_mlp': 13}
12 #ifdef HAVE_MMX                                                                                       {'linevul': 21, 'PLBART': 7, 'devign': 215, 'vulberta_cnn': 12, 'vulberta_mlp': 9}
14 					asm volatile(                                                                                    {'linevul': 20, 'PLBART': 11, 'devign': 34, 'vulberta_cnn': 63, 'vulberta_mlp': 6}
16 						"movl %4, %%eax \n\t"                                                                           {'linevul': 15, 'PLBART': 2, 'devign': 71, 'vulberta_cnn': 14, 'vulberta_mlp': 72}
18 						"movl %%eax, temp0\n\t"                                                                         {'linevul': 14, 'PLBART': 6, 'devign': 70, 'vulberta_cnn': 23, 'vulberta_mlp': 67}
20 						"pushl %0 \n\t"                                                                                 {'linevul': 16, 'PLBART': 4, 'devign': 210, 'vulberta_cnn': 77, 'vulberta_mlp': 51}
22 						"pushl %1 \n\t"                                                                                 {'linevul': 17, 'PLBART': 9, 'devign': 208, 'vulberta_cnn': 39, 'vulberta_mlp': 50}
24 						"leal (%2,%2), %%eax	\n\t"                                                                      {'linevul': 8, 'PLBART': 1, 'devign': 15, 'vulberta_cnn': 33, 'vulberta_mlp': 8}
26 						"leal (%3,%3), %%ebx	\n\t"                                                                      {'linevul': 7, 'PLBART': 5, 'devign': 25, 'vulberta_cnn': 64, 'vulberta_mlp': 39}
28 						"movq packedYOffset, %%mm2	\n\t"                                                                {'linevul': 9, 'PLBART': 3, 'devign': 40, 'vulberta_cnn': 25, 'vulberta_mlp': 16}
30 						"movq packedYScale, %%mm3	\n\t"                                                                 {'linevul': 11, 'PLBART': 12, 'devign': 69, 'vulberta_cnn': 37, 'vulberta_mlp': 52}
32 						"pxor %%mm4, %%mm4	\n\t"                                                                        {'linevul': 13, 'PLBART': -1, 'devign': 68, 'vulberta_cnn': 34, 'vulberta_mlp': 34}
36 #define SCALED_CPY					\                                                                              {'linevul': 18, 'PLBART': -1, 'devign': 74, 'vulberta_cnn': 40, 'vulberta_mlp': 28}
38 						"movq (%0), %%mm0	\n\t"\                                                                        {'linevul': 12, 'PLBART': -1, 'devign': 24, 'vulberta_cnn': 2, 'vulberta_mlp': 37}
40 						"movq (%0,%2), %%mm1	\n\t"\                                                                     {'linevul': 2, 'PLBART': -1, 'devign': 14, 'vulberta_cnn': 104, 'vulberta_mlp': 42}
42 						"psubusb %%mm2, %%mm0	\n\t"\                                                                    {'linevul': 5, 'PLBART': -1, 'devign': 39, 'vulberta_cnn': 55, 'vulberta_mlp': 88}
44 						"psubusb %%mm2, %%mm1	\n\t"\                                                                    {'linevul': 4, 'PLBART': -1, 'devign': 38, 'vulberta_cnn': 75, 'vulberta_mlp': 87}
46 						"movq %%mm0, %%mm5	\n\t"\                                                                       {'linevul': 6, 'PLBART': -1, 'devign': 67, 'vulberta_cnn': 83, 'vulberta_mlp': 94}
48 						"punpcklbw %%mm4, %%mm0 \n\t"\                                                                  {'linevul': 3, 'PLBART': -1, 'devign': 66, 'vulberta_cnn': 74, 'vulberta_mlp': 96}
50 						"punpckhbw %%mm4, %%mm5 \n\t"\                                                                  {'linevul': 1, 'PLBART': -1, 'devign': 65, 'vulberta_cnn': 88, 'vulberta_mlp': 36}
52 						"psllw $7, %%mm0	\n\t"\                                                                         {'linevul': 10, 'PLBART': -1, 'devign': 64, 'vulberta_cnn': 84, 'vulberta_mlp': 70}
54 						"psllw $7, %%mm5	\n\t"\                                                                         {'linevul': -1, 'PLBART': -1, 'devign': 63, 'vulberta_cnn': 97, 'vulberta_mlp': 47}
56 						"pmulhw %%mm3, %%mm0	\n\t"\                                                                     {'linevul': -1, 'PLBART': -1, 'devign': 62, 'vulberta_cnn': 101, 'vulberta_mlp': 44}
58 						"pmulhw %%mm3, %%mm5	\n\t"\                                                                     {'linevul': -1, 'PLBART': -1, 'devign': 61, 'vulberta_cnn': 19, 'vulberta_mlp': 75}
60 						"packuswb %%mm5, %%mm0	\n\t"\                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 60, 'vulberta_cnn': 100, 'vulberta_mlp': 97}
62 						"movq %%mm0, (%1)	\n\t"\                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 23, 'vulberta_cnn': 8, 'vulberta_mlp': 93}
64 						"movq %%mm1, %%mm5	\n\t"\                                                                       {'linevul': -1, 'PLBART': -1, 'devign': 59, 'vulberta_cnn': 92, 'vulberta_mlp': 78}
66 						"punpcklbw %%mm4, %%mm1 \n\t"\                                                                  {'linevul': -1, 'PLBART': -1, 'devign': 58, 'vulberta_cnn': 50, 'vulberta_mlp': 83}
68 						"punpckhbw %%mm4, %%mm5 \n\t"\                                                                  {'linevul': -1, 'PLBART': -1, 'devign': 57, 'vulberta_cnn': 91, 'vulberta_mlp': 82}
70 						"psllw $7, %%mm1	\n\t"\                                                                         {'linevul': -1, 'PLBART': -1, 'devign': 56, 'vulberta_cnn': 7, 'vulberta_mlp': 86}
72 						"psllw $7, %%mm5	\n\t"\                                                                         {'linevul': -1, 'PLBART': -1, 'devign': 55, 'vulberta_cnn': 98, 'vulberta_mlp': 85}
74 						"pmulhw %%mm3, %%mm1	\n\t"\                                                                     {'linevul': -1, 'PLBART': -1, 'devign': 54, 'vulberta_cnn': 61, 'vulberta_mlp': 81}
76 						"pmulhw %%mm3, %%mm5	\n\t"\                                                                     {'linevul': -1, 'PLBART': -1, 'devign': 53, 'vulberta_cnn': 105, 'vulberta_mlp': 80}
78 						"packuswb %%mm5, %%mm1	\n\t"\                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 52, 'vulberta_cnn': 85, 'vulberta_mlp': 84}
80 						"movq %%mm1, (%1, %3)	\n\t"\                                                                    {'linevul': -1, 'PLBART': -1, 'devign': 22, 'vulberta_cnn': 87, 'vulberta_mlp': 56}
84 						"1:			\n\t"                                                                                     {'linevul': -1, 'PLBART': -1, 'devign': 73, 'vulberta_cnn': 47, 'vulberta_mlp': 79}
86 SCALED_CPY                                                                                            {'linevul': -1, 'PLBART': -1, 'devign': 77, 'vulberta_cnn': 81, 'vulberta_mlp': 92}
88 						"addl %%eax, %0		\n\t"                                                                          {'linevul': -1, 'PLBART': -1, 'devign': 51, 'vulberta_cnn': 4, 'vulberta_mlp': 60}
90 						"addl %%ebx, %1		\n\t"                                                                          {'linevul': -1, 'PLBART': -1, 'devign': 50, 'vulberta_cnn': 86, 'vulberta_mlp': 59}
92 SCALED_CPY                                                                                            {'linevul': -1, 'PLBART': -1, 'devign': 76, 'vulberta_cnn': 48, 'vulberta_mlp': 91}
94 						"addl %%eax, %0		\n\t"                                                                          {'linevul': -1, 'PLBART': -1, 'devign': 49, 'vulberta_cnn': 35, 'vulberta_mlp': 58}
96 						"addl %%ebx, %1		\n\t"                                                                          {'linevul': -1, 'PLBART': -1, 'devign': 48, 'vulberta_cnn': 49, 'vulberta_mlp': 24}
98 						"decl temp0		\n\t"                                                                              {'linevul': -1, 'PLBART': -1, 'devign': 167, 'vulberta_cnn': 62, 'vulberta_mlp': 38}
100 						"jnz 1b			\n\t"                                                                                {'linevul': -1, 'PLBART': -1, 'devign': 165, 'vulberta_cnn': 65, 'vulberta_mlp': 18}
104 						"popl %1 \n\t"                                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 161, 'vulberta_cnn': 59, 'vulberta_mlp': 55}
106 						"popl %0 \n\t"                                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 159, 'vulberta_cnn': 73, 'vulberta_mlp': 74}
108 						: : "r" (src),                                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 3, 'vulberta_cnn': 30, 'vulberta_mlp': 19}
110 						"r" (dst),                                                                                     {'linevul': -1, 'PLBART': -1, 'devign': 17, 'vulberta_cnn': 89, 'vulberta_mlp': 43}
112 						"r" (srcStride),                                                                               {'linevul': -1, 'PLBART': -1, 'devign': 11, 'vulberta_cnn': 32, 'vulberta_mlp': 26}
114 						"r" (dstStride),                                                                               {'linevul': -1, 'PLBART': -1, 'devign': 7, 'vulberta_cnn': 72, 'vulberta_mlp': 17}
116 						"m" (numLines>>2)                                                                              {'linevul': -1, 'PLBART': -1, 'devign': 28, 'vulberta_cnn': 94, 'vulberta_mlp': 105}
118 						: "%eax", "%ebx"                                                                               {'linevul': -1, 'PLBART': -1, 'devign': 32, 'vulberta_cnn': 3, 'vulberta_mlp': 71}
120 					);                                                                                              {'linevul': -1, 'PLBART': -1, 'devign': 36, 'vulberta_cnn': 57, 'vulberta_mlp': 0}
122 #else                                                                                                {'linevul': -1, 'PLBART': -1, 'devign': 150, 'vulberta_cnn': 36, 'vulberta_mlp': 104}
124 				for(i=0; i<numLines; i++)                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 30, 'vulberta_cnn': 17, 'vulberta_mlp': 11}
126 					memcpy(	&(dst[dstStride*i]),                                                                    {'linevul': -1, 'PLBART': -1, 'devign': 6, 'vulberta_cnn': 82, 'vulberta_mlp': 25}
128 						&(src[srcStride*i]), BLOCK_SIZE);                                                              {'linevul': -1, 'PLBART': -1, 'devign': 10, 'vulberta_cnn': 0, 'vulberta_mlp': 4}
130 #endif                                                                                               {'linevul': -1, 'PLBART': -1, 'devign': 145, 'vulberta_cnn': 53, 'vulberta_mlp': 66}
132 	}                                                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 143, 'vulberta_cnn': 54, 'vulberta_mlp': 31}
134 	else                                                                                                {'linevul': -1, 'PLBART': -1, 'devign': 141, 'vulberta_cnn': 38, 'vulberta_mlp': 103}
136 	{                                                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 139, 'vulberta_cnn': 58, 'vulberta_mlp': 12}
138 #ifdef HAVE_MMX                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 137, 'vulberta_cnn': 28, 'vulberta_mlp': 90}
140 					asm volatile(                                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 33, 'vulberta_cnn': 79, 'vulberta_mlp': 65}
142 						"movl %4, %%eax \n\t"                                                                          {'linevul': -1, 'PLBART': -1, 'devign': 47, 'vulberta_cnn': 18, 'vulberta_mlp': 21}
144 						"movl %%eax, temp0\n\t"                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 46, 'vulberta_cnn': 6, 'vulberta_mlp': 49}
146 						"pushl %0 \n\t"                                                                                {'linevul': -1, 'PLBART': -1, 'devign': 132, 'vulberta_cnn': 27, 'vulberta_mlp': 45}
148 						"pushl %1 \n\t"                                                                                {'linevul': -1, 'PLBART': -1, 'devign': 130, 'vulberta_cnn': 41, 'vulberta_mlp': 3}
150 						"leal (%2,%2), %%eax	\n\t"                                                                     {'linevul': -1, 'PLBART': -1, 'devign': 13, 'vulberta_cnn': 1, 'vulberta_mlp': 57}
152 						"leal (%3,%3), %%ebx	\n\t"                                                                     {'linevul': -1, 'PLBART': -1, 'devign': 21, 'vulberta_cnn': 26, 'vulberta_mlp': 32}
154 						"movq packedYOffset, %%mm2	\n\t"                                                               {'linevul': -1, 'PLBART': -1, 'devign': 37, 'vulberta_cnn': 70, 'vulberta_mlp': 64}
156 						"movq packedYScale, %%mm3	\n\t"                                                                {'linevul': -1, 'PLBART': -1, 'devign': 45, 'vulberta_cnn': 43, 'vulberta_mlp': 95}
160 #define SIMPLE_CPY					\                                                                             {'linevul': -1, 'PLBART': -1, 'devign': 75, 'vulberta_cnn': 44, 'vulberta_mlp': 98}
162 						"movq (%0), %%mm0	\n\t"\                                                                       {'linevul': -1, 'PLBART': -1, 'devign': 20, 'vulberta_cnn': 95, 'vulberta_mlp': 40}
164 						"movq (%0,%2), %%mm1	\n\t"\                                                                    {'linevul': -1, 'PLBART': -1, 'devign': 12, 'vulberta_cnn': 13, 'vulberta_mlp': 41}
166 						"movq %%mm0, (%1)	\n\t"\                                                                       {'linevul': -1, 'PLBART': -1, 'devign': 19, 'vulberta_cnn': 21, 'vulberta_mlp': 20}
168 						"movq %%mm1, (%1, %3)	\n\t"\                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 18, 'vulberta_cnn': 20, 'vulberta_mlp': 30}
172 						"1:			\n\t"                                                                                    {'linevul': -1, 'PLBART': -1, 'devign': 72, 'vulberta_cnn': 96, 'vulberta_mlp': 63}
174 SIMPLE_CPY                                                                                           {'linevul': -1, 'PLBART': -1, 'devign': 79, 'vulberta_cnn': 76, 'vulberta_mlp': 102}
176 						"addl %%eax, %0		\n\t"                                                                         {'linevul': -1, 'PLBART': -1, 'devign': 44, 'vulberta_cnn': 46, 'vulberta_mlp': 10}
178 						"addl %%ebx, %1		\n\t"                                                                         {'linevul': -1, 'PLBART': -1, 'devign': 43, 'vulberta_cnn': 102, 'vulberta_mlp': 27}
180 SIMPLE_CPY                                                                                           {'linevul': -1, 'PLBART': -1, 'devign': 78, 'vulberta_cnn': 69, 'vulberta_mlp': 101}
182 						"addl %%eax, %0		\n\t"                                                                         {'linevul': -1, 'PLBART': -1, 'devign': 42, 'vulberta_cnn': 22, 'vulberta_mlp': 23}
184 						"addl %%ebx, %1		\n\t"                                                                         {'linevul': -1, 'PLBART': -1, 'devign': 41, 'vulberta_cnn': 52, 'vulberta_mlp': 46}
186 						"decl temp0		\n\t"                                                                             {'linevul': -1, 'PLBART': -1, 'devign': 108, 'vulberta_cnn': 56, 'vulberta_mlp': 77}
188 						"jnz 1b			\n\t"                                                                                {'linevul': -1, 'PLBART': -1, 'devign': 106, 'vulberta_cnn': 66, 'vulberta_mlp': 76}
192 						"popl %1 \n\t"                                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 102, 'vulberta_cnn': 103, 'vulberta_mlp': 54}
194 						"popl %0 \n\t"                                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 100, 'vulberta_cnn': 68, 'vulberta_mlp': 73}
196 						: : "r" (src),                                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 2, 'vulberta_cnn': 99, 'vulberta_mlp': 48}
198 						"r" (dst),                                                                                     {'linevul': -1, 'PLBART': -1, 'devign': 16, 'vulberta_cnn': 24, 'vulberta_mlp': 53}
200 						"r" (srcStride),                                                                               {'linevul': -1, 'PLBART': -1, 'devign': 9, 'vulberta_cnn': 15, 'vulberta_mlp': 22}
202 						"r" (dstStride),                                                                               {'linevul': -1, 'PLBART': -1, 'devign': 5, 'vulberta_cnn': 29, 'vulberta_mlp': 35}
204 						"m" (numLines>>2)                                                                              {'linevul': -1, 'PLBART': -1, 'devign': 27, 'vulberta_cnn': 16, 'vulberta_mlp': 62}
206 						: "%eax", "%ebx"                                                                               {'linevul': -1, 'PLBART': -1, 'devign': 31, 'vulberta_cnn': 11, 'vulberta_mlp': 89}
208 					);                                                                                              {'linevul': -1, 'PLBART': -1, 'devign': 35, 'vulberta_cnn': 80, 'vulberta_mlp': 1}
210 #else                                                                                                {'linevul': -1, 'PLBART': -1, 'devign': 91, 'vulberta_cnn': 45, 'vulberta_mlp': 100}
212 				for(i=0; i<numLines; i++)                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 29, 'vulberta_cnn': 71, 'vulberta_mlp': 2}
214 					memcpy(	&(dst[dstStride*i]),                                                                    {'linevul': -1, 'PLBART': -1, 'devign': 4, 'vulberta_cnn': 60, 'vulberta_mlp': 14}
216 						&(src[srcStride*i]), BLOCK_SIZE);                                                              {'linevul': -1, 'PLBART': -1, 'devign': 8, 'vulberta_cnn': 5, 'vulberta_mlp': 5}
218 #endif                                                                                               {'linevul': -1, 'PLBART': -1, 'devign': 86, 'vulberta_cnn': 78, 'vulberta_mlp': 61}
220 	}                                                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 84, 'vulberta_cnn': 67, 'vulberta_mlp': 99}
222 }                                                                                                    {'linevul': -1, 'PLBART': -1, 'devign': 82, 'vulberta_cnn': 42, 'vulberta_mlp': 29}
-----------------------
Highlighted lines: 
2 	int numLines, int levelFix)
24 						"leal (%2,%2), %%eax	\n\t"
216 						&(src[srcStride*i]), BLOCK_SIZE);
--------------------------------------------------------------------------------------------------------------
Example ids:  8707 project:  qemu commit id:  7453c96b78c2b09aa72924f933bb9616e5474194 Number of lines:  65 tground truth:  1
Original lines: 
Predicted Correctly by :  ['linevul', 'devign', 'regvd', 'vulberta_cnn', 'vulberta_mlp']
0 static int check_refcounts_l1(BlockDriverState *bs,                                         {'linevul': 12, 'devign': 20, 'regvd': 4, 'vulberta_cnn': 51, 'vulberta_mlp': 18}
2                               BdrvCheckResult *res,                                         {'linevul': 3, 'devign': 26, 'regvd': 37, 'vulberta_cnn': 5, 'vulberta_mlp': 20}
4                               uint16_t **refcount_table,                                    {'linevul': 2, 'devign': 33, 'regvd': 16, 'vulberta_cnn': 31, 'vulberta_mlp': 45}
6                               int64_t *refcount_table_size,                                 {'linevul': 1, 'devign': 32, 'regvd': 19, 'vulberta_cnn': 7, 'vulberta_mlp': 1}
8                               int64_t l1_table_offset, int l1_size,                         {'linevul': 0, 'devign': 21, 'regvd': 21, 'vulberta_cnn': 41, 'vulberta_mlp': 50}
10                               int flags)                                                   {'linevul': 5, 'devign': 44, 'regvd': 42, 'vulberta_cnn': 43, 'vulberta_mlp': 44}
12 {                                                                                          {'linevul': 21, 'devign': 137, 'regvd': 54, 'vulberta_cnn': 36, 'vulberta_mlp': 24}
14     BDRVQcowState *s = bs->opaque;                                                         {'linevul': 10, 'devign': 46, 'regvd': 32, 'vulberta_cnn': 11, 'vulberta_mlp': 19}
16     uint64_t *l1_table = NULL, l2_offset, l1_size2;                                        {'linevul': 7, 'devign': 8, 'regvd': 2, 'vulberta_cnn': 8, 'vulberta_mlp': 57}
18     int i, ret;                                                                            {'linevul': 19, 'devign': 40, 'regvd': 43, 'vulberta_cnn': 19, 'vulberta_mlp': 58}
22     l1_size2 = l1_size * sizeof(uint64_t);                                                 {'linevul': 9, 'devign': 14, 'regvd': 3, 'vulberta_cnn': 33, 'vulberta_mlp': 55}
26     /* Mark L1 table as used */                                                            {'linevul': 16, 'devign': 127, 'regvd': 29, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
28     ret = inc_refcounts(bs, res, refcount_table, refcount_table_size,                      {'linevul': 6, 'devign': 38, 'regvd': 6, 'vulberta_cnn': 32, 'vulberta_mlp': 16}
30                         l1_table_offset, l1_size2);                                        {'linevul': 4, 'devign': 39, 'regvd': 14, 'vulberta_cnn': 26, 'vulberta_mlp': 25}
32     if (ret < 0) {                                                                         {'linevul': 18, 'devign': 5, 'regvd': 36, 'vulberta_cnn': 54, 'vulberta_mlp': 52}
34         goto fail;                                                                         {'linevul': 17, 'devign': 31, 'regvd': 49, 'vulberta_cnn': 28, 'vulberta_mlp': 43}
36     }                                                                                      {'linevul': 20, 'devign': 121, 'regvd': 64, 'vulberta_cnn': 44, 'vulberta_mlp': 42}
40     /* Read L1 table entries from disk */                                                  {'linevul': 15, 'devign': 117, 'regvd': 26, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
42     if (l1_size2 > 0) {                                                                    {'linevul': 14, 'devign': 24, 'regvd': 20, 'vulberta_cnn': 13, 'vulberta_mlp': 49}
44         l1_table = g_try_malloc(l1_size2);                                                 {'linevul': 8, 'devign': 25, 'regvd': 7, 'vulberta_cnn': 2, 'vulberta_mlp': 54}
46         if (l1_table == NULL) {                                                            {'linevul': 13, 'devign': 22, 'regvd': 13, 'vulberta_cnn': 17, 'vulberta_mlp': 51}
48             ret = -ENOMEM;                                                                 {'linevul': 11, 'devign': 47, 'regvd': 50, 'vulberta_cnn': 39, 'vulberta_mlp': 53}
50             res->check_errors++;                                                           {'linevul': -1, 'devign': 43, 'regvd': 39, 'vulberta_cnn': 48, 'vulberta_mlp': 12}
52             goto fail;                                                                     {'linevul': -1, 'devign': 30, 'regvd': 48, 'vulberta_cnn': 25, 'vulberta_mlp': 15}
54         }                                                                                  {'linevul': -1, 'devign': 109, 'regvd': 63, 'vulberta_cnn': 24, 'vulberta_mlp': 41}
56         ret = bdrv_pread(bs->file, l1_table_offset, l1_table, l1_size2);                   {'linevul': -1, 'devign': 13, 'regvd': 0, 'vulberta_cnn': 55, 'vulberta_mlp': 32}
58         if (ret < 0) {                                                                     {'linevul': -1, 'devign': 4, 'regvd': 35, 'vulberta_cnn': 4, 'vulberta_mlp': 40}
60             fprintf(stderr, "ERROR: I/O error in check_refcounts_l1\n");                   {'linevul': -1, 'devign': 12, 'regvd': 1, 'vulberta_cnn': 6, 'vulberta_mlp': 13}
62             res->check_errors++;                                                           {'linevul': -1, 'devign': 42, 'regvd': 38, 'vulberta_cnn': 21, 'vulberta_mlp': 14}
64             goto fail;                                                                     {'linevul': -1, 'devign': 29, 'regvd': 47, 'vulberta_cnn': 23, 'vulberta_mlp': 39}
66         }                                                                                  {'linevul': -1, 'devign': 102, 'regvd': 62, 'vulberta_cnn': 46, 'vulberta_mlp': 9}
68         for(i = 0;i < l1_size; i++)                                                        {'linevul': -1, 'devign': 1, 'regvd': 15, 'vulberta_cnn': 9, 'vulberta_mlp': 38}
70             be64_to_cpus(&l1_table[i]);                                                    {'linevul': -1, 'devign': 34, 'regvd': 10, 'vulberta_cnn': 10, 'vulberta_mlp': 6}
72     }                                                                                      {'linevul': -1, 'devign': 98, 'regvd': 61, 'vulberta_cnn': 40, 'vulberta_mlp': 37}
76     /* Do the actual checks */                                                             {'linevul': -1, 'devign': 94, 'regvd': 41, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
78     for(i = 0; i < l1_size; i++) {                                                         {'linevul': -1, 'devign': 0, 'regvd': 9, 'vulberta_cnn': 50, 'vulberta_mlp': 26}
80         l2_offset = l1_table[i];                                                           {'linevul': -1, 'devign': 17, 'regvd': 23, 'vulberta_cnn': 0, 'vulberta_mlp': 28}
82         if (l2_offset) {                                                                   {'linevul': -1, 'devign': 15, 'regvd': 27, 'vulberta_cnn': 49, 'vulberta_mlp': 48}
84             /* Mark L2 table as used */                                                    {'linevul': -1, 'devign': 89, 'regvd': 31, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
86             l2_offset &= L1E_OFFSET_MASK;                                                  {'linevul': -1, 'devign': 23, 'regvd': 28, 'vulberta_cnn': 22, 'vulberta_mlp': 46}
88             ret = inc_refcounts(bs, res, refcount_table, refcount_table_size,              {'linevul': -1, 'devign': 37, 'regvd': 5, 'vulberta_cnn': 53, 'vulberta_mlp': 23}
90                                 l2_offset, s->cluster_size);                               {'linevul': -1, 'devign': 11, 'regvd': 22, 'vulberta_cnn': 14, 'vulberta_mlp': 56}
92             if (ret < 0) {                                                                 {'linevul': -1, 'devign': 3, 'regvd': 34, 'vulberta_cnn': 34, 'vulberta_mlp': 47}
94                 goto fail;                                                                 {'linevul': -1, 'devign': 28, 'regvd': 46, 'vulberta_cnn': 30, 'vulberta_mlp': 8}
96             }                                                                              {'linevul': -1, 'devign': 82, 'regvd': 60, 'vulberta_cnn': 47, 'vulberta_mlp': 22}
100             /* L2 tables are cluster aligned */                                           {'linevul': -1, 'devign': 78, 'regvd': 30, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
102             if (offset_into_cluster(s, l2_offset)) {                                      {'linevul': -1, 'devign': 6, 'regvd': 18, 'vulberta_cnn': 45, 'vulberta_mlp': 30}
104                 fprintf(stderr, "ERROR l2_offset=%" PRIx64 ": Table is not "              {'linevul': -1, 'devign': 7, 'regvd': 11, 'vulberta_cnn': 12, 'vulberta_mlp': 17}
106                     "cluster aligned; L1 entry corrupted\n", l2_offset);                  {'linevul': -1, 'devign': 10, 'regvd': 17, 'vulberta_cnn': 1, 'vulberta_mlp': 5}
108                 res->corruptions++;                                                       {'linevul': -1, 'devign': 16, 'regvd': 44, 'vulberta_cnn': 20, 'vulberta_mlp': 0}
110             }                                                                             {'linevul': -1, 'devign': 72, 'regvd': 59, 'vulberta_cnn': 37, 'vulberta_mlp': 4}
114             /* Process and check L2 entries */                                            {'linevul': -1, 'devign': 68, 'regvd': 40, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
116             ret = check_refcounts_l2(bs, res, refcount_table,                             {'linevul': -1, 'devign': 36, 'regvd': 8, 'vulberta_cnn': 52, 'vulberta_mlp': 31}
118                                      refcount_table_size, l2_offset, flags);              {'linevul': -1, 'devign': 9, 'regvd': 12, 'vulberta_cnn': 56, 'vulberta_mlp': 21}
120             if (ret < 0) {                                                                {'linevul': -1, 'devign': 2, 'regvd': 33, 'vulberta_cnn': 38, 'vulberta_mlp': 29}
122                 goto fail;                                                                {'linevul': -1, 'devign': 27, 'regvd': 45, 'vulberta_cnn': 15, 'vulberta_mlp': 36}
124             }                                                                             {'linevul': -1, 'devign': 62, 'regvd': 58, 'vulberta_cnn': 29, 'vulberta_mlp': 35}
126         }                                                                                 {'linevul': -1, 'devign': 60, 'regvd': 57, 'vulberta_cnn': 16, 'vulberta_mlp': 34}
128     }                                                                                     {'linevul': -1, 'devign': 58, 'regvd': 56, 'vulberta_cnn': 42, 'vulberta_mlp': 33}
130     g_free(l1_table);                                                                     {'linevul': -1, 'devign': 19, 'regvd': 25, 'vulberta_cnn': 57, 'vulberta_mlp': 27}
132     return 0;                                                                             {'linevul': -1, 'devign': 35, 'regvd': 51, 'vulberta_cnn': 27, 'vulberta_mlp': 10}
136 fail:                                                                                     {'linevul': -1, 'devign': 41, 'regvd': 52, 'vulberta_cnn': 18, 'vulberta_mlp': 7}
138     g_free(l1_table);                                                                     {'linevul': -1, 'devign': 18, 'regvd': 24, 'vulberta_cnn': 3, 'vulberta_mlp': 2}
140     return ret;                                                                           {'linevul': -1, 'devign': 45, 'regvd': 53, 'vulberta_cnn': 35, 'vulberta_mlp': 11}
142 }                                                                                         {'linevul': -1, 'devign': 49, 'regvd': 55, 'vulberta_cnn': 58, 'vulberta_mlp': 3}
-----------------------
Highlighted lines: 
6                               int64_t *refcount_table_size,
16     uint64_t *l1_table = NULL, l2_offset, l1_size2;
44         l1_table = g_try_malloc(l1_size2);
--------------------------------------------------------------------------------------------------------------
Example ids:  9109 project:  FFmpeg commit id:  428098165de4c3edfe42c1b7f00627d287015863 Number of lines:  76 tground truth:  1
Original lines: 
Predicted Correctly by :  ['codebert', 'PLBART', 'devign', 'vulberta_cnn', 'vulberta_mlp']
0 static inline int RENAME(yuv420_rgb16)(SwsContext *c, uint8_t* src[], int srcStride[], int srcSliceY,                                             {'codebert': 2, 'PLBART': 0, 'devign': 6, 'vulberta_cnn': 4, 'vulberta_mlp': 34}
2              int srcSliceH, uint8_t* dst[], int dstStride[]){                                                                                     {'codebert': 7, 'PLBART': 5, 'devign': 31, 'vulberta_cnn': 53, 'vulberta_mlp': 30}
4     int y, h_size;                                                                                                                                {'codebert': 10, 'PLBART': 7, 'devign': 55, 'vulberta_cnn': 32, 'vulberta_mlp': 60}
8     if(c->srcFormat == PIX_FMT_YUV422P){                                                                                                          {'codebert': 4, 'PLBART': 2, 'devign': 17, 'vulberta_cnn': 1, 'vulberta_mlp': 52}
10 	srcStride[1] *= 2;                                                                                                                              {'codebert': 11, 'PLBART': 6, 'devign': 51, 'vulberta_cnn': 14, 'vulberta_mlp': 20}
12 	srcStride[2] *= 2;                                                                                                                              {'codebert': 12, 'PLBART': 8, 'devign': 56, 'vulberta_cnn': 41, 'vulberta_mlp': 35}
14     }                                                                                                                                            {'codebert': 14, 'PLBART': 9, 'devign': 179, 'vulberta_cnn': 26, 'vulberta_mlp': 9}
18     h_size= (c->dstW+7)&~7;                                                                                                                      {'codebert': 5, 'PLBART': 4, 'devign': 18, 'vulberta_cnn': 33, 'vulberta_mlp': 40}
20     if(h_size*2 > FFABS(dstStride[0])) h_size-=8;                                                                                                {'codebert': 1, 'PLBART': 1, 'devign': 15, 'vulberta_cnn': 27, 'vulberta_mlp': 48}
24     __asm__ __volatile__ ("pxor %mm4, %mm4;" /* zero mm4 */ );                                                                                   {'codebert': 0, 'PLBART': 3, 'devign': 19, 'vulberta_cnn': 45, 'vulberta_mlp': 29}
26 //printf("%X %X %X %X %X %X %X %X %X %X\n", (int)&c->redDither, (int)&b5Dither, (int)src[0], (int)src[1], (int)src[2], (int)dst[0],              {'codebert': 3, 'PLBART': -1, 'devign': 2, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
28 //srcStride[0],srcStride[1],srcStride[2],dstStride[0]);                                                                                          {'codebert': 9, 'PLBART': -1, 'devign': 32, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
30     for (y= 0; y<srcSliceH; y++ ) {                                                                                                              {'codebert': 13, 'PLBART': -1, 'devign': 0, 'vulberta_cnn': 55, 'vulberta_mlp': 59}
32 	uint8_t *_image = dst[0] + (y+srcSliceY)*dstStride[0];                                                                                          {'codebert': 6, 'PLBART': -1, 'devign': 8, 'vulberta_cnn': 57, 'vulberta_mlp': 37}
34 	uint8_t *_py = src[0] + y*srcStride[0];                                                                                                         {'codebert': 8, 'PLBART': -1, 'devign': 35, 'vulberta_cnn': 58, 'vulberta_mlp': 44}
36 	uint8_t *_pu = src[1] + (y>>1)*srcStride[1];                                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': 16, 'vulberta_cnn': 16, 'vulberta_mlp': 53}
38 	uint8_t *_pv = src[2] + (y>>1)*srcStride[2];                                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': 9, 'vulberta_cnn': 35, 'vulberta_mlp': 45}
40 	long index= -h_size/2;                                                                                                                          {'codebert': -1, 'PLBART': -1, 'devign': 36, 'vulberta_cnn': 21, 'vulberta_mlp': 33}
44 	b5Dither= dither8[y&1];                                                                                                                         {'codebert': -1, 'PLBART': -1, 'devign': 59, 'vulberta_cnn': 28, 'vulberta_mlp': 47}
46 	g6Dither= dither4[y&1];                                                                                                                         {'codebert': -1, 'PLBART': -1, 'devign': 60, 'vulberta_cnn': 54, 'vulberta_mlp': 49}
48 	g5Dither= dither8[y&1];                                                                                                                         {'codebert': -1, 'PLBART': -1, 'devign': 61, 'vulberta_cnn': 5, 'vulberta_mlp': 46}
50 	r5Dither= dither8[(y+1)&1];                                                                                                                     {'codebert': -1, 'PLBART': -1, 'devign': 26, 'vulberta_cnn': 3, 'vulberta_mlp': 41}
52 	    /* this mmx assembly code deals with SINGLE scan line at a time, it convert 8                                                               {'codebert': -1, 'PLBART': -1, 'devign': 50, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
54 	       pixels in each iteration */                                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': 64, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
56 	    __asm__ __volatile__ (                                                                                                                      {'codebert': -1, 'PLBART': -1, 'devign': 33, 'vulberta_cnn': 52, 'vulberta_mlp': 24}
58 	/* load data for start of next scan line */                                                                                                     {'codebert': -1, 'PLBART': -1, 'devign': 63, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
60 		     "movd (%2, %0), %%mm0;" /* Load 4 Cb 00 00 00 00 u3 u2 u1 u0 */                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 25, 'vulberta_cnn': 59, 'vulberta_mlp': 10}
62 		     "movd (%3, %0), %%mm1;" /* Load 4 Cr 00 00 00 00 v3 v2 v1 v0 */                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 24, 'vulberta_cnn': 25, 'vulberta_mlp': 26}
64 		     "movq (%5, %0, 2), %%mm6;" /* Load 8  Y Y7 Y6 Y5 Y4 Y3 Y2 Y1 Y0 */                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 23, 'vulberta_cnn': 60, 'vulberta_mlp': 11}
66 //		    ".balign 16			\n\t"                                                                                                                      {'codebert': -1, 'PLBART': -1, 'devign': 149, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
68 		    "1:				\n\t"                                                                                                                               {'codebert': -1, 'PLBART': -1, 'devign': 65, 'vulberta_cnn': 46, 'vulberta_mlp': 58}
70 /* no speed diference on my p3@500 with prefetch,                                                                                                {'codebert': -1, 'PLBART': -1, 'devign': 49, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
72  * if it is faster for anyone with -benchmark then tell me                                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 52, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
74 			PREFETCH" 64(%0) \n\t"                                                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 30, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
76 			PREFETCH" 64(%1) \n\t"                                                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 29, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
78 			PREFETCH" 64(%2) \n\t"                                                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 28, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
80 */                                                                                                                                               {'codebert': -1, 'PLBART': -1, 'devign': 68, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
82 YUV2RGB                                                                                                                                          {'codebert': -1, 'PLBART': -1, 'devign': 66, 'vulberta_cnn': 40, 'vulberta_mlp': 32}
86 #ifdef DITHER1XBPP                                                                                                                               {'codebert': -1, 'PLBART': -1, 'devign': 137, 'vulberta_cnn': 56, 'vulberta_mlp': 57}
88 			"paddusb "MANGLE(b5Dither)", %%mm0;"                                                                                                          {'codebert': -1, 'PLBART': -1, 'devign': 10, 'vulberta_cnn': 39, 'vulberta_mlp': 39}
90 			"paddusb "MANGLE(g6Dither)", %%mm2;"                                                                                                          {'codebert': -1, 'PLBART': -1, 'devign': 7, 'vulberta_cnn': 37, 'vulberta_mlp': 28}
92 			"paddusb "MANGLE(r5Dither)", %%mm1;"                                                                                                          {'codebert': -1, 'PLBART': -1, 'devign': 11, 'vulberta_cnn': 8, 'vulberta_mlp': 31}
94 #endif                                                                                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 132, 'vulberta_cnn': 31, 'vulberta_mlp': 56}
96 		     /* mask unneeded bits off */                                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': 67, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
98 		     "pand "MANGLE(mmx_redmask)", %%mm0;" /* b7b6b5b4 b3_0_0_0 b7b6b5b4 b3_0_0_0 */                                                            {'codebert': -1, 'PLBART': -1, 'devign': 5, 'vulberta_cnn': 0, 'vulberta_mlp': 25}
100 		     "pand "MANGLE(mmx_grnmask)", %%mm2;" /* g7g6g5g4 g3g2_0_0 g7g6g5g4 g3g2_0_0 */                                                           {'codebert': -1, 'PLBART': -1, 'devign': 3, 'vulberta_cnn': 10, 'vulberta_mlp': 19}
102 		     "pand "MANGLE(mmx_redmask)", %%mm1;" /* r7r6r5r4 r3_0_0_0 r7r6r5r4 r3_0_0_0 */                                                           {'codebert': -1, 'PLBART': -1, 'devign': 4, 'vulberta_cnn': 11, 'vulberta_mlp': 16}
106 		     "psrlw $3,%%mm0;" /* 0_0_0_b7 b6b5b4b3 0_0_0_b7 b6b5b4b3 */                                                                              {'codebert': -1, 'PLBART': -1, 'devign': 54, 'vulberta_cnn': 48, 'vulberta_mlp': 12}
108 		     "pxor %%mm4, %%mm4;" /* zero mm4 */                                                                                                      {'codebert': -1, 'PLBART': -1, 'devign': 53, 'vulberta_cnn': 6, 'vulberta_mlp': 7}
112 		     "movq %%mm0, %%mm5;" /* Copy B7-B0 */                                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': 38, 'vulberta_cnn': 22, 'vulberta_mlp': 15}
114 		     "movq %%mm2, %%mm7;" /* Copy G7-G0 */                                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': 37, 'vulberta_cnn': 19, 'vulberta_mlp': 14}
118 		     /* convert rgb24 plane to rgb16 pack for pixel 0-3 */                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': 42, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
120 		     "punpcklbw %%mm4, %%mm2;" /* 0_0_0_0 0_0_0_0 g7g6g5g4 g3g2_0_0 */                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 40, 'vulberta_cnn': 51, 'vulberta_mlp': 23}
122 		     "punpcklbw %%mm1, %%mm0;" /* r7r6r5r4 r3_0_0_0 0_0_0_b7 b6b5b4b3 */                                                                      {'codebert': -1, 'PLBART': -1, 'devign': 48, 'vulberta_cnn': 17, 'vulberta_mlp': 27}
126 		     "psllw $3, %%mm2;" /* 0_0_0_0 0_g7g6g5 g4g3g2_0 0_0_0_0 */                                                                               {'codebert': -1, 'PLBART': -1, 'devign': 46, 'vulberta_cnn': 30, 'vulberta_mlp': 18}
128 		     "por %%mm2, %%mm0;" /* r7r6r5r4 r3g7g6g5 g4g3g2b7 b6b5b4b3 */                                                                            {'codebert': -1, 'PLBART': -1, 'devign': 45, 'vulberta_cnn': 24, 'vulberta_mlp': 50}
132 		     "movq 8 (%5, %0, 2), %%mm6;" /* Load 8 Y Y7 Y6 Y5 Y4 Y3 Y2 Y1 Y0 */                                                                      {'codebert': -1, 'PLBART': -1, 'devign': 22, 'vulberta_cnn': 13, 'vulberta_mlp': 36}
134 		     MOVNTQ " %%mm0, (%1);" /* store pixel 0-3 */                                                                                             {'codebert': -1, 'PLBART': -1, 'devign': 14, 'vulberta_cnn': 49, 'vulberta_mlp': 3}
138 		     /* convert rgb24 plane to rgb16 pack for pixel 0-3 */                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': 41, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
140 		     "punpckhbw %%mm4, %%mm7;" /* 0_0_0_0 0_0_0_0 g7g6g5g4 g3g2_0_0 */                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 39, 'vulberta_cnn': 42, 'vulberta_mlp': 43}
142 		     "punpckhbw %%mm1, %%mm5;" /* r7r6r5r4 r3_0_0_0 0_0_0_b7 b6b5b4b3 */                                                                      {'codebert': -1, 'PLBART': -1, 'devign': 47, 'vulberta_cnn': 50, 'vulberta_mlp': 1}
146 		     "psllw $3, %%mm7;" /* 0_0_0_0 0_g7g6g5 g4g3g2_0 0_0_0_0 */                                                                               {'codebert': -1, 'PLBART': -1, 'devign': 44, 'vulberta_cnn': 12, 'vulberta_mlp': 51}
148 		     "movd 4 (%2, %0), %%mm0;" /* Load 4 Cb 00 00 00 00 u3 u2 u1 u0 */                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 21, 'vulberta_cnn': 23, 'vulberta_mlp': 17}
152 		     "por %%mm7, %%mm5;" /* r7r6r5r4 r3g7g6g5 g4g3g2b7 b6b5b4b3 */                                                                            {'codebert': -1, 'PLBART': -1, 'devign': 43, 'vulberta_cnn': 18, 'vulberta_mlp': 42}
154 		     "movd 4 (%3, %0), %%mm1;" /* Load 4 Cr 00 00 00 00 v3 v2 v1 v0 */                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 20, 'vulberta_cnn': 43, 'vulberta_mlp': 0}
158 		     MOVNTQ " %%mm5, 8 (%1);" /* store pixel 4-7 */                                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 13, 'vulberta_cnn': 34, 'vulberta_mlp': 38}
162 		     "add $16, %1			\n\t"                                                                                                                     {'codebert': -1, 'PLBART': -1, 'devign': 58, 'vulberta_cnn': 47, 'vulberta_mlp': 2}
164 		     "add $4, %0			\n\t"                                                                                                                      {'codebert': -1, 'PLBART': -1, 'devign': 57, 'vulberta_cnn': 29, 'vulberta_mlp': 55}
166 		     " js 1b				\n\t"                                                                                                                         {'codebert': -1, 'PLBART': -1, 'devign': 85, 'vulberta_cnn': 36, 'vulberta_mlp': 4}
170 		     : "+r" (index), "+r" (_image)                                                                                                            {'codebert': -1, 'PLBART': -1, 'devign': 12, 'vulberta_cnn': 20, 'vulberta_mlp': 21}
172 		     : "r" (_pu - index), "r" (_pv - index), "r"(&c->redDither), "r" (_py - 2*index)                                                          {'codebert': -1, 'PLBART': -1, 'devign': 1, 'vulberta_cnn': 2, 'vulberta_mlp': 22}
174 		     );                                                                                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 34, 'vulberta_cnn': 15, 'vulberta_mlp': 8}
176     }                                                                                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 78, 'vulberta_cnn': 44, 'vulberta_mlp': 54}
180     __asm__ __volatile__ (EMMS);                                                                                                                {'codebert': -1, 'PLBART': -1, 'devign': 27, 'vulberta_cnn': 9, 'vulberta_mlp': 5}
184     return srcSliceH;                                                                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 62, 'vulberta_cnn': 7, 'vulberta_mlp': 13}
186 }                                                                                                                                               {'codebert': -1, 'PLBART': -1, 'devign': 70, 'vulberta_cnn': 38, 'vulberta_mlp': 6}
-----------------------
Highlighted lines: 
0 static inline int RENAME(yuv420_rgb16)(SwsContext *c, uint8_t* src[], int srcStride[], int srcSliceY,
8     if(c->srcFormat == PIX_FMT_YUV422P){
--------------------------------------------------------------------------------------------------------------
Example ids:  9283 project:  FFmpeg commit id:  a2085a7e9d83d99aca58bfb385f6db1afa5673dd Number of lines:  116 tground truth:  1
Original lines: 
Predicted Correctly by :  ['linevul', 'PLBART', 'devign', 'vulberta_cnn', 'vulberta_mlp']
0 static int dpcm_decode_frame(AVCodecContext *avctx,                                                   {'linevul': 8, 'PLBART': 0, 'devign': 81, 'vulberta_cnn': 85, 'vulberta_mlp': 7}
1                              void *data, int *data_size,                                              {'linevul': 1, 'PLBART': 5, 'devign': 83, 'vulberta_cnn': 26, 'vulberta_mlp': 101}
2                              uint8_t *buf, int buf_size)                                              {'linevul': 0, 'PLBART': 3, 'devign': 56, 'vulberta_cnn': 93, 'vulberta_mlp': 22}
3 {                                                                                                     {'linevul': 27, 'PLBART': 16, 'devign': -1, 'vulberta_cnn': 75, 'vulberta_mlp': 100}
4     DPCMContext *s = avctx->priv_data;                                                                {'linevul': 11, 'PLBART': 1, 'devign': 74, 'vulberta_cnn': 73, 'vulberta_mlp': 13}
5     int in, out = 0;                                                                                  {'linevul': 18, 'PLBART': 6, 'devign': 64, 'vulberta_cnn': 76, 'vulberta_mlp': 21}
6     int predictor[2];                                                                                 {'linevul': 23, 'PLBART': 10, 'devign': 34, 'vulberta_cnn': 101, 'vulberta_mlp': 99}
7     int channel_number = 0;                                                                           {'linevul': 17, 'PLBART': 9, 'devign': 43, 'vulberta_cnn': 92, 'vulberta_mlp': 98}
8     short *output_samples = data;                                                                     {'linevul': 15, 'PLBART': 7, 'devign': 84, 'vulberta_cnn': 57, 'vulberta_mlp': 20}
9     int shift[2];                                                                                     {'linevul': 22, 'PLBART': 14, 'devign': 62, 'vulberta_cnn': 44, 'vulberta_mlp': 15}
10     unsigned char byte;                                                                              {'linevul': 25, 'PLBART': 12, 'devign': 89, 'vulberta_cnn': 63, 'vulberta_mlp': 9}
11     short diff;                                                                                      {'linevul': 26, 'PLBART': 13, 'devign': 90, 'vulberta_cnn': 31, 'vulberta_mlp': 97}
12     if (!buf_size)                                                                                   {'linevul': 20, 'PLBART': 11, 'devign': 71, 'vulberta_cnn': 35, 'vulberta_mlp': 12}
13         return 0;                                                                                    {'linevul': 19, 'PLBART': 15, 'devign': 85, 'vulberta_cnn': 68, 'vulberta_mlp': 6}
14     switch(avctx->codec->id) {                                                                       {'linevul': 14, 'PLBART': 4, 'devign': 33, 'vulberta_cnn': 29, 'vulberta_mlp': 27}
15     case CODEC_ID_ROQ_DPCM:                                                                          {'linevul': 12, 'PLBART': 2, 'devign': 91, 'vulberta_cnn': 97, 'vulberta_mlp': 96}
16         if (s->channels == 1)                                                                        {'linevul': 13, 'PLBART': 8, 'devign': 58, 'vulberta_cnn': 98, 'vulberta_mlp': 24}
17             predictor[0] = AV_RL16(&buf[6]);                                                         {'linevul': 5, 'PLBART': 17, 'devign': 25, 'vulberta_cnn': 14, 'vulberta_mlp': 25}
18         else {                                                                                       {'linevul': 21, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 38, 'vulberta_mlp': 95}
19             predictor[0] = buf[7] << 8;                                                              {'linevul': 6, 'PLBART': -1, 'devign': 52, 'vulberta_cnn': 3, 'vulberta_mlp': 94}
20             predictor[1] = buf[6] << 8;                                                              {'linevul': 7, 'PLBART': -1, 'devign': 50, 'vulberta_cnn': 0, 'vulberta_mlp': 8}
21         }                                                                                            {'linevul': 24, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 34, 'vulberta_mlp': 1}
22         SE_16BIT(predictor[0]);                                                                      {'linevul': 10, 'PLBART': -1, 'devign': 8, 'vulberta_cnn': 11, 'vulberta_mlp': 39}
23         SE_16BIT(predictor[1]);                                                                      {'linevul': 9, 'PLBART': -1, 'devign': 17, 'vulberta_cnn': 82, 'vulberta_mlp': 38}
24         /* decode the samples */                                                                     {'linevul': 16, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
25         for (in = 8, out = 0; in < buf_size; in++, out++) {                                          {'linevul': 4, 'PLBART': -1, 'devign': 0, 'vulberta_cnn': 1, 'vulberta_mlp': 5}
26             predictor[channel_number] += s->roq_square_array[buf[in]];                               {'linevul': 3, 'PLBART': -1, 'devign': 45, 'vulberta_cnn': 86, 'vulberta_mlp': 35}
27             predictor[channel_number] = av_clip_int16(predictor[channel_number]);                    {'linevul': 2, 'PLBART': -1, 'devign': 5, 'vulberta_cnn': 80, 'vulberta_mlp': 44}
28             output_samples[out] = predictor[channel_number];                                         {'linevul': -1, 'PLBART': -1, 'devign': 53, 'vulberta_cnn': 64, 'vulberta_mlp': 41}
29             /* toggle channel */                                                                     {'linevul': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
30             channel_number ^= s->channels - 1;                                                       {'linevul': -1, 'PLBART': -1, 'devign': 41, 'vulberta_cnn': 10, 'vulberta_mlp': 11}
31         }                                                                                            {'linevul': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 45, 'vulberta_mlp': 93}
32         break;                                                                                       {'linevul': -1, 'PLBART': -1, 'devign': 78, 'vulberta_cnn': 79, 'vulberta_mlp': 4}
33     case CODEC_ID_INTERPLAY_DPCM:                                                                    {'linevul': -1, 'PLBART': -1, 'devign': 94, 'vulberta_cnn': 42, 'vulberta_mlp': 10}
34         in = 6;  /* skip over the stream mask and stream length */                                   {'linevul': -1, 'PLBART': -1, 'devign': 86, 'vulberta_cnn': 33, 'vulberta_mlp': 92}
35         predictor[0] = AV_RL16(&buf[in]);                                                            {'linevul': -1, 'PLBART': -1, 'devign': 2, 'vulberta_cnn': 87, 'vulberta_mlp': 91}
36         in += 2;                                                                                     {'linevul': -1, 'PLBART': -1, 'devign': 68, 'vulberta_cnn': 67, 'vulberta_mlp': 90}
37         SE_16BIT(predictor[0])                                                                       {'linevul': -1, 'PLBART': -1, 'devign': 7, 'vulberta_cnn': 96, 'vulberta_mlp': 34}
38         output_samples[out++] = predictor[0];                                                        {'linevul': -1, 'PLBART': -1, 'devign': 42, 'vulberta_cnn': 25, 'vulberta_mlp': 17}
39         if (s->channels == 2) {                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 49, 'vulberta_cnn': 91, 'vulberta_mlp': 89}
40             predictor[1] = AV_RL16(&buf[in]);                                                        {'linevul': -1, 'PLBART': -1, 'devign': 19, 'vulberta_cnn': 6, 'vulberta_mlp': 88}
41             in += 2;                                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 67, 'vulberta_cnn': 70, 'vulberta_mlp': 87}
42             SE_16BIT(predictor[1])                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 16, 'vulberta_cnn': 36, 'vulberta_mlp': 33}
43             output_samples[out++] = predictor[1];                                                    {'linevul': -1, 'PLBART': -1, 'devign': 47, 'vulberta_cnn': 41, 'vulberta_mlp': 16}
44         }                                                                                            {'linevul': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 78, 'vulberta_mlp': 86}
45         while (in < buf_size) {                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 12, 'vulberta_cnn': 39, 'vulberta_mlp': 19}
46             predictor[channel_number] += interplay_delta_table[buf[in++]];                           {'linevul': -1, 'PLBART': -1, 'devign': 31, 'vulberta_cnn': 69, 'vulberta_mlp': 2}
47             predictor[channel_number] = av_clip_int16(predictor[channel_number]);                    {'linevul': -1, 'PLBART': -1, 'devign': 4, 'vulberta_cnn': 90, 'vulberta_mlp': 29}
48             output_samples[out++] = predictor[channel_number];                                       {'linevul': -1, 'PLBART': -1, 'devign': 27, 'vulberta_cnn': 51, 'vulberta_mlp': 85}
49             /* toggle channel */                                                                     {'linevul': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
50             channel_number ^= s->channels - 1;                                                       {'linevul': -1, 'PLBART': -1, 'devign': 40, 'vulberta_cnn': 16, 'vulberta_mlp': 84}
51         }                                                                                            {'linevul': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 54, 'vulberta_mlp': 83}
52         break;                                                                                       {'linevul': -1, 'PLBART': -1, 'devign': 77, 'vulberta_cnn': 17, 'vulberta_mlp': 82}
53     case CODEC_ID_XAN_DPCM:                                                                          {'linevul': -1, 'PLBART': -1, 'devign': 93, 'vulberta_cnn': 22, 'vulberta_mlp': 81}
54         in = 0;                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 80, 'vulberta_cnn': 100, 'vulberta_mlp': 80}
55         shift[0] = shift[1] = 4;                                                                     {'linevul': -1, 'PLBART': -1, 'devign': 55, 'vulberta_cnn': 4, 'vulberta_mlp': 79}
56         predictor[0] = AV_RL16(&buf[in]);                                                            {'linevul': -1, 'PLBART': -1, 'devign': 1, 'vulberta_cnn': 94, 'vulberta_mlp': 42}
57         in += 2;                                                                                     {'linevul': -1, 'PLBART': -1, 'devign': 66, 'vulberta_cnn': 60, 'vulberta_mlp': 3}
58         SE_16BIT(predictor[0]);                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 6, 'vulberta_cnn': 23, 'vulberta_mlp': 37}
59         if (s->channels == 2) {                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 48, 'vulberta_cnn': 61, 'vulberta_mlp': 78}
60             predictor[1] = AV_RL16(&buf[in]);                                                        {'linevul': -1, 'PLBART': -1, 'devign': 18, 'vulberta_cnn': 62, 'vulberta_mlp': 77}
61             in += 2;                                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 65, 'vulberta_cnn': 74, 'vulberta_mlp': 76}
62             SE_16BIT(predictor[1]);                                                                  {'linevul': -1, 'PLBART': -1, 'devign': 15, 'vulberta_cnn': 19, 'vulberta_mlp': 75}
63         }                                                                                            {'linevul': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 43, 'vulberta_mlp': 74}
64         while (in < buf_size) {                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 11, 'vulberta_cnn': 32, 'vulberta_mlp': 73}
65             byte = buf[in++];                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 51, 'vulberta_cnn': 66, 'vulberta_mlp': 72}
66             diff = (byte & 0xFC) << 8;                                                               {'linevul': -1, 'PLBART': -1, 'devign': 69, 'vulberta_cnn': 46, 'vulberta_mlp': 14}
67             if ((byte & 0x03) == 3)                                                                  {'linevul': -1, 'PLBART': -1, 'devign': 61, 'vulberta_cnn': 88, 'vulberta_mlp': 32}
68                 shift[channel_number]++;                                                             {'linevul': -1, 'PLBART': -1, 'devign': 57, 'vulberta_cnn': 89, 'vulberta_mlp': 71}
69             else                                                                                     {'linevul': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 81, 'vulberta_mlp': 70}
70                 shift[channel_number] -= (2 * (byte & 3));                                           {'linevul': -1, 'PLBART': -1, 'devign': 36, 'vulberta_cnn': 9, 'vulberta_mlp': 23}
71             /* saturate the shifter to a lower limit of 0 */                                         {'linevul': -1, 'PLBART': -1, 'devign': 87, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
72             if (shift[channel_number] < 0)                                                           {'linevul': -1, 'PLBART': -1, 'devign': 32, 'vulberta_cnn': 47, 'vulberta_mlp': 31}
73                 shift[channel_number] = 0;                                                           {'linevul': -1, 'PLBART': -1, 'devign': 59, 'vulberta_cnn': 27, 'vulberta_mlp': 69}
74             diff >>= shift[channel_number];                                                          {'linevul': -1, 'PLBART': -1, 'devign': 60, 'vulberta_cnn': 48, 'vulberta_mlp': 68}
75             predictor[channel_number] += diff;                                                       {'linevul': -1, 'PLBART': -1, 'devign': 46, 'vulberta_cnn': 55, 'vulberta_mlp': 26}
76             predictor[channel_number] = av_clip_int16(predictor[channel_number]);                    {'linevul': -1, 'PLBART': -1, 'devign': 3, 'vulberta_cnn': 99, 'vulberta_mlp': 67}
77             output_samples[out++] = predictor[channel_number];                                       {'linevul': -1, 'PLBART': -1, 'devign': 26, 'vulberta_cnn': 7, 'vulberta_mlp': 18}
78             /* toggle channel */                                                                     {'linevul': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
79             channel_number ^= s->channels - 1;                                                       {'linevul': -1, 'PLBART': -1, 'devign': 39, 'vulberta_cnn': 21, 'vulberta_mlp': 66}
80         }                                                                                            {'linevul': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 50, 'vulberta_mlp': 65}
81         break;                                                                                       {'linevul': -1, 'PLBART': -1, 'devign': 76, 'vulberta_cnn': 71, 'vulberta_mlp': 0}
82     case CODEC_ID_SOL_DPCM:                                                                          {'linevul': -1, 'PLBART': -1, 'devign': 95, 'vulberta_cnn': 30, 'vulberta_mlp': 64}
83         in = 0;                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 79, 'vulberta_cnn': 59, 'vulberta_mlp': 63}
84         if (avctx->codec_tag != 3) {                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 72, 'vulberta_cnn': 24, 'vulberta_mlp': 62}
85             if(*data_size/4 < buf_size)                                                              {'linevul': -1, 'PLBART': -1, 'devign': 73, 'vulberta_cnn': 12, 'vulberta_mlp': 61}
86             while (in < buf_size) {                                                                  {'linevul': -1, 'PLBART': -1, 'devign': 10, 'vulberta_cnn': 58, 'vulberta_mlp': 60}
87                 int n1, n2;                                                                          {'linevul': -1, 'PLBART': -1, 'devign': 82, 'vulberta_cnn': 15, 'vulberta_mlp': 59}
88                 n1 = (buf[in] >> 4) & 0xF;                                                           {'linevul': -1, 'PLBART': -1, 'devign': 22, 'vulberta_cnn': 20, 'vulberta_mlp': 40}
89                 n2 = buf[in++] & 0xF;                                                                {'linevul': -1, 'PLBART': -1, 'devign': 30, 'vulberta_cnn': 83, 'vulberta_mlp': 30}
90                 s->sample[0] += s->sol_table[n1];                                                    {'linevul': -1, 'PLBART': -1, 'devign': 35, 'vulberta_cnn': 72, 'vulberta_mlp': 58}
91                  if (s->sample[0] < 0) s->sample[0] = 0;                                             {'linevul': -1, 'PLBART': -1, 'devign': 28, 'vulberta_cnn': 95, 'vulberta_mlp': 57}
92                 if (s->sample[0] > 255) s->sample[0] = 255;                                          {'linevul': -1, 'PLBART': -1, 'devign': 23, 'vulberta_cnn': 13, 'vulberta_mlp': 56}
93                 output_samples[out++] = (s->sample[0] - 128) << 8;                                   {'linevul': -1, 'PLBART': -1, 'devign': 14, 'vulberta_cnn': 77, 'vulberta_mlp': 55}
94                 s->sample[s->channels - 1] += s->sol_table[n2];                                      {'linevul': -1, 'PLBART': -1, 'devign': 37, 'vulberta_cnn': 37, 'vulberta_mlp': 43}
95                 if (s->sample[s->channels - 1] < 0) s->sample[s->channels - 1] = 0;                  {'linevul': -1, 'PLBART': -1, 'devign': 13, 'vulberta_cnn': 2, 'vulberta_mlp': 54}
96                 if (s->sample[s->channels - 1] > 255) s->sample[s->channels - 1] = 255;              {'linevul': -1, 'PLBART': -1, 'devign': 24, 'vulberta_cnn': 8, 'vulberta_mlp': 28}
97                 output_samples[out++] = (s->sample[s->channels - 1] - 128) << 8;                     {'linevul': -1, 'PLBART': -1, 'devign': 29, 'vulberta_cnn': 84, 'vulberta_mlp': 46}
98             }                                                                                        {'linevul': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 65, 'vulberta_mlp': 53}
99         } else {                                                                                     {'linevul': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 53, 'vulberta_mlp': 52}
100             while (in < buf_size) {                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 9, 'vulberta_cnn': 56, 'vulberta_mlp': 51}
101                 int n;                                                                              {'linevul': -1, 'PLBART': -1, 'devign': 92, 'vulberta_cnn': 28, 'vulberta_mlp': 50}
102                 n = buf[in++];                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 70, 'vulberta_cnn': 18, 'vulberta_mlp': 49}
103                 if (n & 0x80) s->sample[channel_number] -= s->sol_table[n & 0x7F];                  {'linevul': -1, 'PLBART': -1, 'devign': 21, 'vulberta_cnn': 40, 'vulberta_mlp': 48}
104                 else s->sample[channel_number] += s->sol_table[n & 0x7F];                           {'linevul': -1, 'PLBART': -1, 'devign': 44, 'vulberta_cnn': 49, 'vulberta_mlp': 45}
105                 s->sample[channel_number] = av_clip_int16(s->sample[channel_number]);               {'linevul': -1, 'PLBART': -1, 'devign': 20, 'vulberta_cnn': 5, 'vulberta_mlp': 47}
106                 output_samples[out++] = s->sample[channel_number];                                  {'linevul': -1, 'PLBART': -1, 'devign': 63, 'vulberta_cnn': 52, 'vulberta_mlp': 36}
107                 /* toggle channel */                                                                {'linevul': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
108                 channel_number ^= s->channels - 1;                                                  {'linevul': -1, 'PLBART': -1, 'devign': 38, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
109             }                                                                                       {'linevul': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
110         }                                                                                           {'linevul': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
111         break;                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 75, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
112     }                                                                                               {'linevul': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
113     *data_size = out * sizeof(short);                                                               {'linevul': -1, 'PLBART': -1, 'devign': 54, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
114     return buf_size;                                                                                {'linevul': -1, 'PLBART': -1, 'devign': 88, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
115 }                                                                                                   {'linevul': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
-----------------------
Highlighted lines: 
0 static int dpcm_decode_frame(AVCodecContext *avctx,
20             predictor[1] = buf[6] << 8;
25         for (in = 8, out = 0; in < buf_size; in++, out++) {
--------------------------------------------------------------------------------------------------------------
Example ids:  10180 project:  qemu commit id:  338c25b6929b5436a42aaa106c7e9136cf1ff4dc Number of lines:  63 tground truth:  1
Original lines: 
Predicted Correctly by :  ['codebert', 'devign', 'regvd', 'vulberta_cnn', 'vulberta_mlp']
0 static int htab_save_later_pass(QEMUFile *f, sPAPREnvironment *spapr,                                    {'codebert': 1, 'devign': 13, 'regvd': 10, 'vulberta_cnn': 8, 'vulberta_mlp': 10}
2                                 int64_t max_ns)                                                          {'codebert': 5, 'devign': 34, 'regvd': 41, 'vulberta_cnn': 18, 'vulberta_mlp': 42}
4 {                                                                                                        {'codebert': 10, 'devign': -1, 'regvd': 53, 'vulberta_cnn': 35, 'vulberta_mlp': 59}
6     bool final = max_ns < 0;                                                                             {'codebert': 4, 'devign': 28, 'regvd': 39, 'vulberta_cnn': 48, 'vulberta_mlp': 41}
8     int htabslots = HTAB_SIZE(spapr) / HASH_PTE_SIZE_64;                                                 {'codebert': 2, 'devign': 21, 'regvd': 8, 'vulberta_cnn': 14, 'vulberta_mlp': 9}
10     int examined = 0, sent = 0;                                                                         {'codebert': 11, 'devign': 25, 'regvd': 40, 'vulberta_cnn': 30, 'vulberta_mlp': 58}
12     int index = spapr->htab_save_index;                                                                 {'codebert': 6, 'devign': 6, 'regvd': 13, 'vulberta_cnn': 33, 'vulberta_mlp': 49}
14     int64_t starttime = qemu_clock_get_ns(QEMU_CLOCK_REALTIME);                                         {'codebert': 0, 'devign': 37, 'regvd': 9, 'vulberta_cnn': 34, 'vulberta_mlp': 43}
18     assert(!spapr->htab_first_pass);                                                                    {'codebert': 3, 'devign': 38, 'regvd': 15, 'vulberta_cnn': 56, 'vulberta_mlp': 34}
22     do {                                                                                                {'codebert': 16, 'devign': -1, 'regvd': 52, 'vulberta_cnn': 24, 'vulberta_mlp': 40}
24         int chunkstart, invalidstart;                                                                   {'codebert': 7, 'devign': 36, 'regvd': 31, 'vulberta_cnn': 6, 'vulberta_mlp': 37}
28         /* Consume non-dirty HPTEs */                                                                   {'codebert': 13, 'devign': -1, 'regvd': 29, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
30         while ((index < htabslots)                                                                      {'codebert': 12, 'devign': -1, 'regvd': 35, 'vulberta_cnn': 52, 'vulberta_mlp': 12}
32                && !HPTE_DIRTY(HPTE(spapr->htab, index))) {                                              {'codebert': 8, 'devign': -1, 'regvd': 1, 'vulberta_cnn': 16, 'vulberta_mlp': 25}
34             index++;                                                                                    {'codebert': 18, 'devign': 2, 'regvd': 46, 'vulberta_cnn': 45, 'vulberta_mlp': 46}
36             examined++;                                                                                 {'codebert': 17, 'devign': 5, 'regvd': 49, 'vulberta_cnn': 31, 'vulberta_mlp': 24}
38         }                                                                                               {'codebert': 19, 'devign': -1, 'regvd': 62, 'vulberta_cnn': 40, 'vulberta_mlp': 1}
42         chunkstart = index;                                                                             {'codebert': 9, 'devign': 23, 'regvd': 37, 'vulberta_cnn': 46, 'vulberta_mlp': 19}
44         /* Consume valid dirty HPTEs */                                                                 {'codebert': 15, 'devign': -1, 'regvd': 32, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
46         while ((index < htabslots)                                                                      {'codebert': 14, 'devign': -1, 'regvd': 34, 'vulberta_cnn': 41, 'vulberta_mlp': 6}
48                && HPTE_DIRTY(HPTE(spapr->htab, index))                                                  {'codebert': -1, 'devign': -1, 'regvd': 6, 'vulberta_cnn': 3, 'vulberta_mlp': 20}
50                && HPTE_VALID(HPTE(spapr->htab, index))) {                                               {'codebert': -1, 'devign': -1, 'regvd': 4, 'vulberta_cnn': 32, 'vulberta_mlp': 22}
52             CLEAN_HPTE(HPTE(spapr->htab, index));                                                       {'codebert': -1, 'devign': 17, 'regvd': 3, 'vulberta_cnn': 37, 'vulberta_mlp': 47}
54             index++;                                                                                    {'codebert': -1, 'devign': 1, 'regvd': 45, 'vulberta_cnn': 21, 'vulberta_mlp': 57}
56             examined++;                                                                                 {'codebert': -1, 'devign': 4, 'regvd': 48, 'vulberta_cnn': 13, 'vulberta_mlp': 51}
58         }                                                                                               {'codebert': -1, 'devign': -1, 'regvd': 61, 'vulberta_cnn': 25, 'vulberta_mlp': 18}
62         invalidstart = index;                                                                           {'codebert': -1, 'devign': 26, 'regvd': 38, 'vulberta_cnn': 10, 'vulberta_mlp': 56}
64         /* Consume invalid dirty HPTEs */                                                               {'codebert': -1, 'devign': -1, 'regvd': 25, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
66         while ((index < htabslots)                                                                      {'codebert': -1, 'devign': -1, 'regvd': 33, 'vulberta_cnn': 54, 'vulberta_mlp': 5}
68                && HPTE_DIRTY(HPTE(spapr->htab, index))                                                  {'codebert': -1, 'devign': -1, 'regvd': 5, 'vulberta_cnn': 11, 'vulberta_mlp': 30}
70                && !HPTE_VALID(HPTE(spapr->htab, index))) {                                              {'codebert': -1, 'devign': -1, 'regvd': 0, 'vulberta_cnn': 57, 'vulberta_mlp': 32}
72             CLEAN_HPTE(HPTE(spapr->htab, index));                                                       {'codebert': -1, 'devign': 16, 'regvd': 2, 'vulberta_cnn': 49, 'vulberta_mlp': 44}
74             index++;                                                                                    {'codebert': -1, 'devign': 0, 'regvd': 44, 'vulberta_cnn': 22, 'vulberta_mlp': 33}
76             examined++;                                                                                 {'codebert': -1, 'devign': 3, 'regvd': 47, 'vulberta_cnn': 19, 'vulberta_mlp': 50}
78         }                                                                                               {'codebert': -1, 'devign': -1, 'regvd': 60, 'vulberta_cnn': 27, 'vulberta_mlp': 17}
82         if (index > chunkstart) {                                                                       {'codebert': -1, 'devign': 15, 'regvd': 26, 'vulberta_cnn': 55, 'vulberta_mlp': 45}
84             int n_valid = invalidstart - chunkstart;                                                    {'codebert': -1, 'devign': 29, 'regvd': 17, 'vulberta_cnn': 1, 'vulberta_mlp': 36}
86             int n_invalid = index - invalidstart;                                                       {'codebert': -1, 'devign': 14, 'regvd': 16, 'vulberta_cnn': 12, 'vulberta_mlp': 52}
90             qemu_put_be32(f, chunkstart);                                                               {'codebert': -1, 'devign': 32, 'regvd': 18, 'vulberta_cnn': 9, 'vulberta_mlp': 21}
92             qemu_put_be16(f, n_valid);                                                                  {'codebert': -1, 'devign': 35, 'regvd': 30, 'vulberta_cnn': 4, 'vulberta_mlp': 7}
94             qemu_put_be16(f, n_invalid);                                                                {'codebert': -1, 'devign': 33, 'regvd': 24, 'vulberta_cnn': 2, 'vulberta_mlp': 11}
96             qemu_put_buffer(f, HPTE(spapr->htab, chunkstart),                                           {'codebert': -1, 'devign': -1, 'regvd': 7, 'vulberta_cnn': 17, 'vulberta_mlp': 27}
98                             HASH_PTE_SIZE_64 * n_valid);                                                {'codebert': -1, 'devign': -1, 'regvd': 36, 'vulberta_cnn': 53, 'vulberta_mlp': 35}
100             sent += index - chunkstart;                                                                {'codebert': -1, 'devign': 9, 'regvd': 28, 'vulberta_cnn': 51, 'vulberta_mlp': 48}
104             if (!final && (qemu_clock_get_ns(QEMU_CLOCK_REALTIME) - starttime) > max_ns) {             {'codebert': -1, 'devign': 27, 'regvd': 11, 'vulberta_cnn': 47, 'vulberta_mlp': 29}
106                 break;                                                                                 {'codebert': -1, 'devign': 31, 'regvd': 51, 'vulberta_cnn': 20, 'vulberta_mlp': 16}
108             }                                                                                          {'codebert': -1, 'devign': -1, 'regvd': 59, 'vulberta_cnn': 42, 'vulberta_mlp': 15}
110         }                                                                                              {'codebert': -1, 'devign': -1, 'regvd': 58, 'vulberta_cnn': 36, 'vulberta_mlp': 55}
114         if (examined >= htabslots) {                                                                   {'codebert': -1, 'devign': 22, 'regvd': 27, 'vulberta_cnn': 26, 'vulberta_mlp': 28}
116             break;                                                                                     {'codebert': -1, 'devign': 30, 'regvd': 50, 'vulberta_cnn': 39, 'vulberta_mlp': 54}
118         }                                                                                              {'codebert': -1, 'devign': -1, 'regvd': 57, 'vulberta_cnn': 28, 'vulberta_mlp': 14}
122         if (index >= htabslots) {                                                                      {'codebert': -1, 'devign': 8, 'regvd': 23, 'vulberta_cnn': 43, 'vulberta_mlp': 8}
124             assert(index == htabslots);                                                                {'codebert': -1, 'devign': 19, 'regvd': 20, 'vulberta_cnn': 7, 'vulberta_mlp': 26}
126             index = 0;                                                                                 {'codebert': -1, 'devign': 12, 'regvd': 43, 'vulberta_cnn': 50, 'vulberta_mlp': 39}
128         }                                                                                              {'codebert': -1, 'devign': -1, 'regvd': 56, 'vulberta_cnn': 29, 'vulberta_mlp': 53}
130     } while ((examined < htabslots) && (!qemu_file_rate_limit(f) || final));                           {'codebert': -1, 'devign': 20, 'regvd': 12, 'vulberta_cnn': 59, 'vulberta_mlp': 23}
134     if (index >= htabslots) {                                                                          {'codebert': -1, 'devign': 7, 'regvd': 22, 'vulberta_cnn': 0, 'vulberta_mlp': 0}
136         assert(index == htabslots);                                                                    {'codebert': -1, 'devign': 18, 'regvd': 19, 'vulberta_cnn': 15, 'vulberta_mlp': 2}
138         index = 0;                                                                                     {'codebert': -1, 'devign': 11, 'regvd': 42, 'vulberta_cnn': 44, 'vulberta_mlp': 38}
140     }                                                                                                  {'codebert': -1, 'devign': -1, 'regvd': 55, 'vulberta_cnn': 38, 'vulberta_mlp': 4}
144     spapr->htab_save_index = index;                                                                    {'codebert': -1, 'devign': 24, 'regvd': 14, 'vulberta_cnn': 23, 'vulberta_mlp': 31}
148     return (examined >= htabslots) && (sent == 0) ? 1 : 0;                                             {'codebert': -1, 'devign': 10, 'regvd': 21, 'vulberta_cnn': 5, 'vulberta_mlp': 3}
150 }                                                                                                      {'codebert': -1, 'devign': -1, 'regvd': 54, 'vulberta_cnn': 58, 'vulberta_mlp': 13}
-----------------------
Highlighted lines: 
8     int htabslots = HTAB_SIZE(spapr) / HASH_PTE_SIZE_64;
134     if (index >= htabslots) {
--------------------------------------------------------------------------------------------------------------
Example ids:  11877 project:  FFmpeg commit id:  03acb035d1292685cc24a2be0f62dd8332711734 Number of lines:  71 tground truth:  1
Original lines: 
Predicted Correctly by :  ['linevul', 'codebert', 'PLBART', 'devign', 'vulberta_mlp']
0 static int decode_format80(VqaContext *s, int src_size,                                                                                      {'linevul': 10, 'codebert': 9, 'PLBART': 0, 'devign': 19, 'vulberta_mlp': 36}
2     unsigned char *dest, int dest_size, int check_size) {                                                                                    {'linevul': 9, 'codebert': 13, 'PLBART': 5, 'devign': 12, 'vulberta_mlp': 49}
6     int dest_index = 0;                                                                                                                      {'linevul': 19, 'codebert': 16, 'PLBART': 9, 'devign': 11, 'vulberta_mlp': 65}
8     int count, opcode, start;                                                                                                                {'linevul': 18, 'codebert': 15, 'PLBART': 6, 'devign': 40, 'vulberta_mlp': 64}
10     int src_pos;                                                                                                                            {'linevul': 20, 'codebert': 19, 'PLBART': 7, 'devign': 41, 'vulberta_mlp': 63}
12     unsigned char color;                                                                                                                    {'linevul': 22, 'codebert': 17, 'PLBART': 11, 'devign': 48, 'vulberta_mlp': 27}
14     int i;                                                                                                                                  {'linevul': 23, 'codebert': 18, 'PLBART': 10, 'devign': 49, 'vulberta_mlp': 62}
18     start = bytestream2_tell(&s->gb);                                                                                                       {'linevul': 15, 'codebert': 11, 'PLBART': 3, 'devign': 47, 'vulberta_mlp': 39}
20     while (bytestream2_tell(&s->gb) - start < src_size) {                                                                                   {'linevul': 5, 'codebert': 10, 'PLBART': 1, 'devign': 18, 'vulberta_mlp': 12}
22         opcode = bytestream2_get_byte(&s->gb);                                                                                              {'linevul': 6, 'codebert': 12, 'PLBART': 4, 'devign': 31, 'vulberta_mlp': 20}
24         av_dlog(s->avctx, "opcode %02X: ", opcode);                                                                                         {'linevul': 4, 'codebert': 6, 'PLBART': 2, 'devign': -1, 'vulberta_mlp': 16}
28         /* 0x80 means that frame is finished */                                                                                             {'linevul': 12, 'codebert': 5, 'PLBART': 8, 'devign': -1, 'vulberta_mlp': -1}
30         if (opcode == 0x80)                                                                                                                 {'linevul': 16, 'codebert': 1, 'PLBART': -1, 'devign': 39, 'vulberta_mlp': 37}
32             break;                                                                                                                          {'linevul': 17, 'codebert': 0, 'PLBART': -1, 'devign': 51, 'vulberta_mlp': 61}
36         if (dest_index >= dest_size) {                                                                                                      {'linevul': 11, 'codebert': 2, 'PLBART': -1, 'devign': 28, 'vulberta_mlp': 25}
38             av_log(s->avctx, AV_LOG_ERROR, "decode_format80 problem: dest_index (%d) exceeded dest_size (%d)\n",                            {'linevul': 0, 'codebert': 4, 'PLBART': -1, 'devign': -1, 'vulberta_mlp': 24}
40                 dest_index, dest_size);                                                                                                     {'linevul': 7, 'codebert': 14, 'PLBART': -1, 'devign': -1, 'vulberta_mlp': 11}
42             return AVERROR_INVALIDDATA;                                                                                                     {'linevul': 8, 'codebert': 7, 'PLBART': -1, 'devign': 50, 'vulberta_mlp': 60}
44         }                                                                                                                                   {'linevul': 21, 'codebert': 3, 'PLBART': -1, 'devign': -1, 'vulberta_mlp': 5}
48         if (opcode == 0xFF) {                                                                                                               {'linevul': 14, 'codebert': 8, 'PLBART': -1, 'devign': 30, 'vulberta_mlp': 26}
52             count   = bytestream2_get_le16(&s->gb);                                                                                         {'linevul': 3, 'codebert': -1, 'PLBART': -1, 'devign': 26, 'vulberta_mlp': 10}
54             src_pos = bytestream2_get_le16(&s->gb);                                                                                         {'linevul': 2, 'codebert': -1, 'PLBART': -1, 'devign': 23, 'vulberta_mlp': 21}
56             av_dlog(s->avctx, "(1) copy %X bytes from absolute pos %X\n", count, src_pos);                                                  {'linevul': 1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_mlp': 2}
58             CHECK_COUNT();                                                                                                                  {'linevul': 13, 'codebert': -1, 'PLBART': -1, 'devign': 17, 'vulberta_mlp': 1}
60             CHECK_COPY(src_pos);                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 34, 'vulberta_mlp': 4}
62             for (i = 0; i < count; i++)                                                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 7, 'vulberta_mlp': 48}
64                 dest[dest_index + i] = dest[src_pos + i];                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 10, 'vulberta_mlp': 44}
66             dest_index += count;                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 4, 'vulberta_mlp': 59}
70         } else if (opcode == 0xFE) {                                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 35, 'vulberta_mlp': 35}
74             count = bytestream2_get_le16(&s->gb);                                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 25, 'vulberta_mlp': 9}
76             color = bytestream2_get_byte(&s->gb);                                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 44, 'vulberta_mlp': 29}
78             av_dlog(s->avctx, "(2) set %X bytes to %02X\n", count, color);                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_mlp': 13}
80             CHECK_COUNT();                                                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 16, 'vulberta_mlp': 0}
82             memset(&dest[dest_index], color, count);                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 36, 'vulberta_mlp': 15}
84             dest_index += count;                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 3, 'vulberta_mlp': 58}
88         } else if ((opcode & 0xC0) == 0xC0) {                                                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 29, 'vulberta_mlp': 34}
92             count = (opcode & 0x3F) + 3;                                                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 27, 'vulberta_mlp': 7}
94             src_pos = bytestream2_get_le16(&s->gb);                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 22, 'vulberta_mlp': 31}
96             av_dlog(s->avctx, "(3) copy %X bytes from absolute pos %X\n", count, src_pos);                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_mlp': 6}
98             CHECK_COUNT();                                                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 15, 'vulberta_mlp': 3}
100             CHECK_COPY(src_pos);                                                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 33, 'vulberta_mlp': 41}
102             for (i = 0; i < count; i++)                                                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 6, 'vulberta_mlp': 47}
104                 dest[dest_index + i] = dest[src_pos + i];                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 9, 'vulberta_mlp': 43}
106             dest_index += count;                                                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 2, 'vulberta_mlp': 33}
110         } else if (opcode > 0x80) {                                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 24, 'vulberta_mlp': 30}
114             count = opcode & 0x3F;                                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 46, 'vulberta_mlp': 14}
116             av_dlog(s->avctx, "(4) copy %X bytes from source to dest\n", count);                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_mlp': 23}
118             CHECK_COUNT();                                                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 14, 'vulberta_mlp': 57}
120             bytestream2_get_buffer(&s->gb, &dest[dest_index], count);                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 32, 'vulberta_mlp': 22}
122             dest_index += count;                                                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 1, 'vulberta_mlp': 19}
126         } else {                                                                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_mlp': 56}
130             count = ((opcode & 0x70) >> 4) + 3;                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 45, 'vulberta_mlp': 18}
132             src_pos = bytestream2_get_byte(&s->gb) | ((opcode & 0x0F) << 8);                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 21, 'vulberta_mlp': 28}
134             av_dlog(s->avctx, "(5) copy %X bytes from relpos %X\n", count, src_pos);                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_mlp': 8}
136             CHECK_COUNT();                                                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 13, 'vulberta_mlp': 55}
138             CHECK_COPY(dest_index - src_pos);                                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 20, 'vulberta_mlp': 54}
140             for (i = 0; i < count; i++)                                                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 5, 'vulberta_mlp': 46}
142                 dest[dest_index + i] = dest[dest_index - src_pos + i];                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 8, 'vulberta_mlp': 38}
144             dest_index += count;                                                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 0, 'vulberta_mlp': 17}
146         }                                                                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_mlp': 53}
148     }                                                                                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_mlp': 52}
152     /* validate that the entire destination buffer was filled; this is                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_mlp': -1}
154      * important for decoding frame maps since each vector needs to have a                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_mlp': -1}
156      * codebook entry; it is not important for compressed codebooks because                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_mlp': -1}
158      * not every entry needs to be filled */                                                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_mlp': -1}
160     if (check_size)                                                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 42, 'vulberta_mlp': 32}
162         if (dest_index < dest_size)                                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 38, 'vulberta_mlp': 42}
164             av_log(s->avctx, AV_LOG_ERROR, "decode_format80 problem: decode finished with dest_index (%d) < dest_size (%d)\n",             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 37, 'vulberta_mlp': 45}
166                 dest_index, dest_size);                                                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_mlp': 40}
170     return 0; // let's display what we decoded anyway                                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 43, 'vulberta_mlp': 51}
172 }                                                                                                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_mlp': 50}
-----------------------
Highlighted lines: 
24         av_dlog(s->avctx, "opcode %02X: ", opcode);
--------------------------------------------------------------------------------------------------------------
Example ids:  12245 project:  qemu commit id:  f4bf56fb78ed0e9f60fa1ed656c14ff4c494da5a Number of lines:  49 tground truth:  1
Original lines: 
Predicted Correctly by :  ['linevul', 'PLBART', 'devign', 'vulberta_cnn', 'vulberta_mlp']
0 static int vhost_user_set_mem_table(struct vhost_dev *dev,                                           {'linevul': 11, 'PLBART': 0, 'devign': 25, 'vulberta_cnn': 45, 'vulberta_mlp': 10}
2                                     struct vhost_memory *mem)                                        {'linevul': 1, 'PLBART': 9, 'devign': 31, 'vulberta_cnn': 29, 'vulberta_mlp': 9}
4 {                                                                                                    {'linevul': 21, 'PLBART': 12, 'devign': 115, 'vulberta_cnn': 24, 'vulberta_mlp': 48}
6     int fds[VHOST_MEMORY_MAX_NREGIONS];                                                              {'linevul': 10, 'PLBART': 4, 'devign': 34, 'vulberta_cnn': 40, 'vulberta_mlp': 27}
8     int i, fd;                                                                                       {'linevul': 18, 'PLBART': 10, 'devign': 30, 'vulberta_cnn': 7, 'vulberta_mlp': 46}
10     size_t fd_num = 0;                                                                              {'linevul': 14, 'PLBART': 7, 'devign': 15, 'vulberta_cnn': 47, 'vulberta_mlp': 47}
12     bool reply_supported = virtio_has_feature(dev->protocol_features,                               {'linevul': 9, 'PLBART': 2, 'devign': 12, 'vulberta_cnn': 3, 'vulberta_mlp': 25}
14                                               VHOST_USER_PROTOCOL_F_REPLY_ACK);                     {'linevul': 0, 'PLBART': 3, 'devign': 37, 'vulberta_cnn': 42, 'vulberta_mlp': 20}
18     VhostUserMsg msg = {                                                                            {'linevul': 16, 'PLBART': 6, 'devign': 24, 'vulberta_cnn': 19, 'vulberta_mlp': 41}
20         .hdr.request = VHOST_USER_SET_MEM_TABLE,                                                    {'linevul': 6, 'PLBART': 1, 'devign': 3, 'vulberta_cnn': 25, 'vulberta_mlp': 37}
22         .hdr.flags = VHOST_USER_VERSION,                                                            {'linevul': 12, 'PLBART': 5, 'devign': 4, 'vulberta_cnn': 43, 'vulberta_mlp': 45}
24     };                                                                                              {'linevul': 19, 'PLBART': 13, 'devign': 103, 'vulberta_cnn': 36, 'vulberta_mlp': 34}
28     if (reply_supported) {                                                                          {'linevul': 17, 'PLBART': 8, 'devign': 23, 'vulberta_cnn': 39, 'vulberta_mlp': 13}
30         msg.hdr.flags |= VHOST_USER_NEED_REPLY_MASK;                                                {'linevul': 4, 'PLBART': 11, 'devign': 5, 'vulberta_cnn': 13, 'vulberta_mlp': 36}
32     }                                                                                               {'linevul': 20, 'PLBART': -1, 'devign': 97, 'vulberta_cnn': 23, 'vulberta_mlp': 19}
36     for (i = 0; i < dev->mem->nregions; ++i) {                                                      {'linevul': 8, 'PLBART': -1, 'devign': 7, 'vulberta_cnn': 41, 'vulberta_mlp': 35}
38         struct vhost_memory_region *reg = dev->mem->regions + i;                                    {'linevul': 7, 'PLBART': -1, 'devign': 20, 'vulberta_cnn': 34, 'vulberta_mlp': 26}
40         ram_addr_t offset;                                                                          {'linevul': 13, 'PLBART': -1, 'devign': 35, 'vulberta_cnn': 30, 'vulberta_mlp': 42}
42         MemoryRegion *mr;                                                                           {'linevul': 15, 'PLBART': -1, 'devign': 38, 'vulberta_cnn': 22, 'vulberta_mlp': 18}
46         assert((uintptr_t)reg->userspace_addr == reg->userspace_addr);                              {'linevul': 5, 'PLBART': -1, 'devign': 17, 'vulberta_cnn': 6, 'vulberta_mlp': 31}
48         mr = memory_region_from_host((void *)(uintptr_t)reg->userspace_addr,                        {'linevul': 3, 'PLBART': -1, 'devign': 14, 'vulberta_cnn': 18, 'vulberta_mlp': 17}
50                                      &offset);                                                      {'linevul': 2, 'PLBART': -1, 'devign': 36, 'vulberta_cnn': 37, 'vulberta_mlp': 33}
52         fd = memory_region_get_fd(mr);                                                              {'linevul': -1, 'PLBART': -1, 'devign': 16, 'vulberta_cnn': 4, 'vulberta_mlp': 3}
54         if (fd > 0) {                                                                               {'linevul': -1, 'PLBART': -1, 'devign': 26, 'vulberta_cnn': 28, 'vulberta_mlp': 30}
56             msg.payload.memory.regions[fd_num].userspace_addr = reg->userspace_addr;                {'linevul': -1, 'PLBART': -1, 'devign': 9, 'vulberta_cnn': 11, 'vulberta_mlp': 43}
58             msg.payload.memory.regions[fd_num].memory_size  = reg->memory_size;                     {'linevul': -1, 'PLBART': -1, 'devign': 10, 'vulberta_cnn': 1, 'vulberta_mlp': 28}
60             msg.payload.memory.regions[fd_num].guest_phys_addr = reg->guest_phys_addr;              {'linevul': -1, 'PLBART': -1, 'devign': 8, 'vulberta_cnn': 48, 'vulberta_mlp': 24}
62             msg.payload.memory.regions[fd_num].mmap_offset = offset;                                {'linevul': -1, 'PLBART': -1, 'devign': 6, 'vulberta_cnn': 33, 'vulberta_mlp': 8}
64             assert(fd_num < VHOST_MEMORY_MAX_NREGIONS);                                             {'linevul': -1, 'PLBART': -1, 'devign': 29, 'vulberta_cnn': 31, 'vulberta_mlp': 29}
66             fds[fd_num++] = fd;                                                                     {'linevul': -1, 'PLBART': -1, 'devign': 18, 'vulberta_cnn': 9, 'vulberta_mlp': 44}
68         }                                                                                           {'linevul': -1, 'PLBART': -1, 'devign': 76, 'vulberta_cnn': 12, 'vulberta_mlp': 16}
70     }                                                                                               {'linevul': -1, 'PLBART': -1, 'devign': 74, 'vulberta_cnn': 21, 'vulberta_mlp': 15}
74     msg.payload.memory.nregions = fd_num;                                                           {'linevul': -1, 'PLBART': -1, 'devign': 11, 'vulberta_cnn': 26, 'vulberta_mlp': 39}
78     if (!fd_num) {                                                                                  {'linevul': -1, 'PLBART': -1, 'devign': 21, 'vulberta_cnn': 8, 'vulberta_mlp': 40}
80         error_report("Failed initializing vhost-user memory map, "                                  {'linevul': -1, 'PLBART': -1, 'devign': 28, 'vulberta_cnn': 38, 'vulberta_mlp': 12}
82                      "consider using -object memory-backend-file share=on");                        {'linevul': -1, 'PLBART': -1, 'devign': 27, 'vulberta_cnn': 44, 'vulberta_mlp': 21}
84         return -1;                                                                                  {'linevul': -1, 'PLBART': -1, 'devign': 33, 'vulberta_cnn': 15, 'vulberta_mlp': 32}
86     }                                                                                               {'linevul': -1, 'PLBART': -1, 'devign': 63, 'vulberta_cnn': 17, 'vulberta_mlp': 14}
90     msg.hdr.size = sizeof(msg.payload.memory.nregions);                                             {'linevul': -1, 'PLBART': -1, 'devign': 1, 'vulberta_cnn': 0, 'vulberta_mlp': 22}
92     msg.hdr.size += sizeof(msg.payload.memory.padding);                                             {'linevul': -1, 'PLBART': -1, 'devign': 0, 'vulberta_cnn': 10, 'vulberta_mlp': 23}
94     msg.hdr.size += fd_num * sizeof(VhostUserMemoryRegion);                                         {'linevul': -1, 'PLBART': -1, 'devign': 2, 'vulberta_cnn': 2, 'vulberta_mlp': 11}
98     if (vhost_user_write(dev, &msg, fds, fd_num) < 0) {                                             {'linevul': -1, 'PLBART': -1, 'devign': 13, 'vulberta_cnn': 5, 'vulberta_mlp': 4}
100         return -1;                                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 32, 'vulberta_cnn': 32, 'vulberta_mlp': 0}
102     }                                                                                              {'linevul': -1, 'PLBART': -1, 'devign': 52, 'vulberta_cnn': 16, 'vulberta_mlp': 2}
106     if (reply_supported) {                                                                         {'linevul': -1, 'PLBART': -1, 'devign': 22, 'vulberta_cnn': 35, 'vulberta_mlp': 6}
108         return process_message_reply(dev, &msg);                                                   {'linevul': -1, 'PLBART': -1, 'devign': 19, 'vulberta_cnn': 14, 'vulberta_mlp': 5}
110     }                                                                                              {'linevul': -1, 'PLBART': -1, 'devign': 46, 'vulberta_cnn': 27, 'vulberta_mlp': 7}
114     return 0;                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 39, 'vulberta_cnn': 20, 'vulberta_mlp': 38}
116 }                                                                                                  {'linevul': -1, 'PLBART': -1, 'devign': 41, 'vulberta_cnn': 46, 'vulberta_mlp': 1}
-----------------------
Highlighted lines: 
2                                     struct vhost_memory *mem)
12     bool reply_supported = virtio_has_feature(dev->protocol_features,
20         .hdr.request = VHOST_USER_SET_MEM_TABLE,
--------------------------------------------------------------------------------------------------------------
Example ids:  12799 project:  qemu commit id:  de82815db1c89da058b7fb941dab137d6d9ab738 Number of lines:  51 tground truth:  1
Original lines: 
Predicted Correctly by :  ['codebert', 'PLBART', 'devign', 'vulberta_cnn', 'vulberta_mlp']
0 int qcow2_expand_zero_clusters(BlockDriverState *bs)                                          {'codebert': 7, 'PLBART': 4, 'devign': 14, 'vulberta_cnn': 43, 'vulberta_mlp': 25}
2 {                                                                                             {'codebert': 12, 'PLBART': 11, 'devign': -1, 'vulberta_cnn': 23, 'vulberta_mlp': 12}
4     BDRVQcowState *s = bs->opaque;                                                            {'codebert': 4, 'PLBART': 3, 'devign': 11, 'vulberta_cnn': 34, 'vulberta_mlp': 17}
6     uint64_t *l1_table = NULL;                                                                {'codebert': 10, 'PLBART': 5, 'devign': 18, 'vulberta_cnn': 35, 'vulberta_mlp': 27}
8     uint64_t nb_clusters;                                                                     {'codebert': 16, 'PLBART': 8, 'devign': 24, 'vulberta_cnn': 18, 'vulberta_mlp': 43}
10     uint8_t *expanded_clusters;                                                              {'codebert': 13, 'PLBART': 7, 'devign': 22, 'vulberta_cnn': 11, 'vulberta_mlp': 32}
12     int ret;                                                                                 {'codebert': 18, 'PLBART': 9, 'devign': 21, 'vulberta_cnn': 24, 'vulberta_mlp': 39}
14     int i, j;                                                                                {'codebert': 19, 'PLBART': 10, 'devign': 23, 'vulberta_cnn': 39, 'vulberta_mlp': 29}
18     nb_clusters = size_to_clusters(s, bs->file->total_sectors *                              {'codebert': 5, 'PLBART': 1, 'devign': -1, 'vulberta_cnn': 15, 'vulberta_mlp': 18}
20                                    BDRV_SECTOR_SIZE);                                        {'codebert': 3, 'PLBART': 6, 'devign': -1, 'vulberta_cnn': 14, 'vulberta_mlp': 4}
22     expanded_clusters = g_malloc0((nb_clusters + 7) / 8);                                    {'codebert': 1, 'PLBART': 2, 'devign': 19, 'vulberta_cnn': 9, 'vulberta_mlp': 6}
26     ret = expand_zero_clusters_in_l1(bs, s->l1_table, s->l1_size,                            {'codebert': 11, 'PLBART': 0, 'devign': -1, 'vulberta_cnn': 7, 'vulberta_mlp': 41}
28                                      &expanded_clusters, &nb_clusters);                      {'codebert': 9, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 38, 'vulberta_mlp': 31}
30     if (ret < 0) {                                                                           {'codebert': 8, 'PLBART': -1, 'devign': 4, 'vulberta_cnn': 20, 'vulberta_mlp': 38}
32         goto fail;                                                                           {'codebert': 2, 'PLBART': -1, 'devign': 10, 'vulberta_cnn': 21, 'vulberta_mlp': 28}
34     }                                                                                        {'codebert': 0, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 26, 'vulberta_mlp': 37}
38     /* Inactive L1 tables may point to active L2 tables - therefore it is                    {'codebert': 6, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
40      * necessary to flush the L2 table cache before trying to access the L2                  {'codebert': 15, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
42      * tables pointed to by inactive L1 entries (else we might try to expand                 {'codebert': 17, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
44      * zero clusters that have already been expanded); furthermore, it is also               {'codebert': 14, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
46      * necessary to empty the L2 table cache, since it may contain tables which              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
48      * are now going to be modified directly on disk, bypassing the cache.                   {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
50      * qcow2_cache_empty() does both for us. */                                              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
52     ret = qcow2_cache_empty(bs, s->l2_table_cache);                                          {'codebert': -1, 'PLBART': -1, 'devign': 15, 'vulberta_cnn': 16, 'vulberta_mlp': 30}
54     if (ret < 0) {                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 3, 'vulberta_cnn': 2, 'vulberta_mlp': 36}
56         goto fail;                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 9, 'vulberta_cnn': 37, 'vulberta_mlp': 13}
58     }                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 32, 'vulberta_mlp': 24}
62     for (i = 0; i < s->nb_snapshots; i++) {                                                  {'codebert': -1, 'PLBART': -1, 'devign': 5, 'vulberta_cnn': 40, 'vulberta_mlp': 40}
64         int l1_sectors = (s->snapshots[i].l1_size * sizeof(uint64_t) +                       {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 1, 'vulberta_mlp': 33}
66                 BDRV_SECTOR_SIZE - 1) / BDRV_SECTOR_SIZE;                                    {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 25, 'vulberta_mlp': 8}
70         l1_table = g_realloc(l1_table, l1_sectors * BDRV_SECTOR_SIZE);                       {'codebert': -1, 'PLBART': -1, 'devign': 12, 'vulberta_cnn': 0, 'vulberta_mlp': 11}
74         ret = bdrv_read(bs->file, s->snapshots[i].l1_table_offset /                          {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 41, 'vulberta_mlp': 7}
76                 BDRV_SECTOR_SIZE, (void *)l1_table, l1_sectors);                             {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 4, 'vulberta_mlp': 5}
78         if (ret < 0) {                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 2, 'vulberta_cnn': 5, 'vulberta_mlp': 20}
80             goto fail;                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 8, 'vulberta_cnn': 28, 'vulberta_mlp': 16}
82         }                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 33, 'vulberta_mlp': 15}
86         for (j = 0; j < s->snapshots[i].l1_size; j++) {                                      {'codebert': -1, 'PLBART': -1, 'devign': 0, 'vulberta_cnn': 29, 'vulberta_mlp': 34}
88             be64_to_cpus(&l1_table[j]);                                                      {'codebert': -1, 'PLBART': -1, 'devign': 17, 'vulberta_cnn': 27, 'vulberta_mlp': 35}
90         }                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 17, 'vulberta_mlp': 9}
94         ret = expand_zero_clusters_in_l1(bs, l1_table, s->snapshots[i].l1_size,              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 30, 'vulberta_mlp': 42}
96                                          &expanded_clusters, &nb_clusters);                  {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 6, 'vulberta_mlp': 26}
98         if (ret < 0) {                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 1, 'vulberta_cnn': 36, 'vulberta_mlp': 19}
100             goto fail;                                                                      {'codebert': -1, 'PLBART': -1, 'devign': 7, 'vulberta_cnn': 12, 'vulberta_mlp': 23}
102         }                                                                                   {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 10, 'vulberta_mlp': 22}
104     }                                                                                       {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 31, 'vulberta_mlp': 21}
108     ret = 0;                                                                                {'codebert': -1, 'PLBART': -1, 'devign': 25, 'vulberta_cnn': 8, 'vulberta_mlp': 14}
112 fail:                                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 6, 'vulberta_cnn': 19, 'vulberta_mlp': 1}
114     g_free(expanded_clusters);                                                              {'codebert': -1, 'PLBART': -1, 'devign': 20, 'vulberta_cnn': 3, 'vulberta_mlp': 3}
116     g_free(l1_table);                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 16, 'vulberta_cnn': 22, 'vulberta_mlp': 10}
118     return ret;                                                                             {'codebert': -1, 'PLBART': -1, 'devign': 13, 'vulberta_cnn': 13, 'vulberta_mlp': 2}
120 }                                                                                           {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 42, 'vulberta_mlp': 0}
-----------------------
Highlighted lines: 
20                                    BDRV_SECTOR_SIZE);
22     expanded_clusters = g_malloc0((nb_clusters + 7) / 8);
--------------------------------------------------------------------------------------------------------------
Example ids:  13268 project:  FFmpeg commit id:  fd0f45e58b010c0d7049914a392c3e96a2223107 Number of lines:  690 tground truth:  1
Original lines: 
Predicted Correctly by :  ['linevul', 'codebert', 'devign', 'regvd', 'vulberta_cnn']
0 static int av_encode(AVFormatContext **output_files,                                                                                                                                   {'linevul': 14, 'codebert': 3, 'devign': 331, 'regvd': 29, 'vulberta_cnn': 59}
2                      int nb_output_files,                                                                                                                                              {'linevul': 5, 'codebert': 15, 'devign': 388, 'regvd': 226, 'vulberta_cnn': 101}
4                      AVFormatContext **input_files,                                                                                                                                    {'linevul': 3, 'codebert': 9, 'devign': 393, 'regvd': 71, 'vulberta_cnn': 19}
6                      int nb_input_files,                                                                                                                                               {'linevul': 4, 'codebert': 16, 'devign': 377, 'regvd': 187, 'vulberta_cnn': 102}
8                      AVStreamMap *stream_maps, int nb_stream_maps)                                                                                                                     {'linevul': 0, 'codebert': 2, 'devign': 306, 'regvd': 55, 'vulberta_cnn': 10}
10 {                                                                                                                                                                                     {'linevul': 28, 'codebert': 1, 'devign': -1, 'regvd': 573, 'vulberta_cnn': 27}
12     int ret, i, j, k, n, nb_istreams = 0, nb_ostreams = 0;                                                                                                                            {'linevul': 1, 'codebert': 5, 'devign': 29, 'regvd': 8, 'vulberta_cnn': 74}
14     AVFormatContext *is, *os;                                                                                                                                                         {'linevul': 17, 'codebert': 6, 'devign': 418, 'regvd': 154, 'vulberta_cnn': 12}
16     AVCodecContext *codec, *icodec;                                                                                                                                                   {'linevul': 10, 'codebert': 4, 'devign': 313, 'regvd': 233, 'vulberta_cnn': 30}
18     AVOutputStream *ost, **ost_table = NULL;                                                                                                                                          {'linevul': 11, 'codebert': 14, 'devign': 198, 'regvd': 45, 'vulberta_cnn': 23}
20     AVInputStream *ist, **ist_table = NULL;                                                                                                                                           {'linevul': 12, 'codebert': 13, 'devign': 278, 'regvd': 6, 'vulberta_cnn': 63}
22     AVInputFile *file_table;                                                                                                                                                          {'linevul': 19, 'codebert': 17, 'devign': 424, 'regvd': 118, 'vulberta_cnn': 36}
24     AVFormatContext *stream_no_data;                                                                                                                                                  {'linevul': 16, 'codebert': 10, 'devign': 423, 'regvd': 134, 'vulberta_cnn': 8}
26     int key;                                                                                                                                                                          {'linevul': 25, 'codebert': 18, 'devign': 364, 'regvd': 446, 'vulberta_cnn': 66}
30     file_table= (AVInputFile*) av_mallocz(nb_input_files * sizeof(AVInputFile));                                                                                                      {'linevul': 2, 'codebert': 0, 'devign': 285, 'regvd': 1, 'vulberta_cnn': 31}
32     if (!file_table)                                                                                                                                                                  {'linevul': 21, 'codebert': 7, 'devign': 189, 'regvd': 289, 'vulberta_cnn': 83}
34         goto fail;                                                                                                                                                                    {'linevul': 20, 'codebert': 8, 'devign': 208, 'regvd': 491, 'vulberta_cnn': 35}
38     /* input stream init */                                                                                                                                                           {'linevul': 23, 'codebert': 11, 'devign': -1, 'regvd': 338, 'vulberta_cnn': -1}
40     j = 0;                                                                                                                                                                            {'linevul': 24, 'codebert': 21, 'devign': 223, 'regvd': 451, 'vulberta_cnn': 57}
42     for(i=0;i<nb_input_files;i++) {                                                                                                                                                   {'linevul': 8, 'codebert': 12, 'devign': 24, 'regvd': 19, 'vulberta_cnn': 3}
44         is = input_files[i];                                                                                                                                                          {'linevul': 15, 'codebert': 19, 'devign': 289, 'regvd': 81, 'vulberta_cnn': 99}
46         file_table[i].ist_index = j;                                                                                                                                                  {'linevul': 9, 'codebert': -1, 'devign': 344, 'regvd': 49, 'vulberta_cnn': 11}
48         file_table[i].nb_streams = is->nb_streams;                                                                                                                                    {'linevul': 7, 'codebert': -1, 'devign': 197, 'regvd': 41, 'vulberta_cnn': 84}
50         j += is->nb_streams;                                                                                                                                                          {'linevul': 13, 'codebert': -1, 'devign': 372, 'regvd': 64, 'vulberta_cnn': 40}
52     }                                                                                                                                                                                 {'linevul': 26, 'codebert': -1, 'devign': -1, 'regvd': 670, 'vulberta_cnn': 46}
54     nb_istreams = j;                                                                                                                                                                  {'linevul': 18, 'codebert': -1, 'devign': 329, 'regvd': 53, 'vulberta_cnn': 7}
58     ist_table = av_mallocz(nb_istreams * sizeof(AVInputStream *));                                                                                                                    {'linevul': 6, 'codebert': -1, 'devign': 188, 'regvd': 0, 'vulberta_cnn': 2}
60     if (!ist_table)                                                                                                                                                                   {'linevul': 22, 'codebert': -1, 'devign': 133, 'regvd': 194, 'vulberta_cnn': 88}
62         goto fail;                                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 207, 'regvd': 490, 'vulberta_cnn': 61}
64                                                                                                                                                                                       {'linevul': 27, 'codebert': 20, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1}
66     for(i=0;i<nb_istreams;i++) {                                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 16, 'regvd': 14, 'vulberta_cnn': 85}
68         ist = av_mallocz(sizeof(AVInputStream));                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 416, 'regvd': 7, 'vulberta_cnn': 1}
70         if (!ist)                                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 200, 'regvd': 366, 'vulberta_cnn': 24}
72             goto fail;                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 206, 'regvd': 489, 'vulberta_cnn': 82}
74         ist_table[i] = ist;                                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 80, 'regvd': 120, 'vulberta_cnn': 92}
76     }                                                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 669, 'vulberta_cnn': 49}
78     j = 0;                                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 222, 'regvd': 450, 'vulberta_cnn': 77}
80     for(i=0;i<nb_input_files;i++) {                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 23, 'regvd': 18, 'vulberta_cnn': 71}
82         is = input_files[i];                                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 288, 'regvd': 80, 'vulberta_cnn': 72}
84         for(k=0;k<is->nb_streams;k++) {                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 21, 'regvd': 15, 'vulberta_cnn': 75}
86             ist = ist_table[j++];                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 27, 'regvd': 77, 'vulberta_cnn': 87}
88             ist->st = is->streams[k];                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 233, 'regvd': 145, 'vulberta_cnn': 70}
90             ist->file_index = i;                                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 217, 'regvd': 132, 'vulberta_cnn': 90}
92             ist->index = k;                                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 369, 'regvd': 246, 'vulberta_cnn': 80}
94             ist->discard = 1; /* the stream is discarded by default                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 134, 'regvd': 125, 'vulberta_cnn': 56}
96                                  (changed later) */                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 494, 'vulberta_cnn': -1}
100             if (ist->st->codec.rate_emu) {                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 235, 'regvd': 174, 'vulberta_cnn': 81}
102                 ist->start = av_gettime();                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 415, 'regvd': 85, 'vulberta_cnn': 13}
104                 ist->frame = 0;                                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 42, 'regvd': 243, 'vulberta_cnn': 18}
106             }                                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 668, 'vulberta_cnn': 39}
108         }                                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 667, 'vulberta_cnn': 53}
110     }                                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 666, 'vulberta_cnn': 55}
114     /* output stream init */                                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 375, 'vulberta_cnn': -1}
116     nb_ostreams = 0;                                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 194, 'regvd': 123, 'vulberta_cnn': 89}
118     for(i=0;i<nb_output_files;i++) {                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 20, 'regvd': 38, 'vulberta_cnn': 107}
120         os = output_files[i];                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 212, 'regvd': 162, 'vulberta_cnn': 65}
122         nb_ostreams += os->nb_streams;                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 219, 'regvd': 137, 'vulberta_cnn': 37}
124     }                                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 665, 'vulberta_cnn': 76}
126     if (nb_stream_maps > 0 && nb_stream_maps != nb_ostreams) {                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': 87, 'regvd': 54, 'vulberta_cnn': 15}
128         fprintf(stderr, "Number of stream maps must match number of output streams\n");                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 446, 'regvd': 140, 'vulberta_cnn': 58}
130         exit(1);                                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 147, 'regvd': 443, 'vulberta_cnn': 94}
132     }                                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 664, 'vulberta_cnn': 69}
136     /* Sanity check the mapping args -- do the input files & streams exist? */                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 133, 'vulberta_cnn': -1}
138     for(i=0;i<nb_stream_maps;i++) {                                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 26, 'regvd': 34, 'vulberta_cnn': 6}
140         int fi = stream_maps[i].file_index;                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 311, 'regvd': 69, 'vulberta_cnn': 106}
142         int si = stream_maps[i].stream_index;                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 305, 'regvd': 99, 'vulberta_cnn': 91}
144                                                                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1}
146         if (fi < 0 || fi > nb_input_files - 1 ||                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 166, 'regvd': 136, 'vulberta_cnn': 78}
148             si < 0 || si > file_table[fi].nb_streams - 1) {                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 74, 'vulberta_cnn': 68}
150             fprintf(stderr,"Could not find input stream #%d.%d\n", fi, si);                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 445, 'regvd': 149, 'vulberta_cnn': 51}
152             exit(1);                                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 146, 'regvd': 442, 'vulberta_cnn': 14}
154         }                                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 663, 'vulberta_cnn': 45}
156     }                                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 662, 'vulberta_cnn': 47}
158                                                                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1}
160     ost_table = av_mallocz(sizeof(AVOutputStream *) * nb_ostreams);                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 148, 'regvd': 2, 'vulberta_cnn': 16}
162     if (!ost_table)                                                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 113, 'regvd': 262, 'vulberta_cnn': 52}
164         goto fail;                                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 205, 'regvd': 488, 'vulberta_cnn': 38}
166     for(i=0;i<nb_ostreams;i++) {                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 8, 'regvd': 28, 'vulberta_cnn': 62}
168         ost = av_mallocz(sizeof(AVOutputStream));                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 296, 'regvd': 39, 'vulberta_cnn': 29}
170         if (!ost)                                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 163, 'regvd': 424, 'vulberta_cnn': 28}
172             goto fail;                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 204, 'regvd': 487, 'vulberta_cnn': 43}
174         ost_table[i] = ost;                                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 61, 'regvd': 184, 'vulberta_cnn': 21}
176     }                                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 661, 'vulberta_cnn': 48}
178                                                                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1}
180     n = 0;                                                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 431, 'regvd': 462, 'vulberta_cnn': 103}
182     for(k=0;k<nb_output_files;k++) {                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 11, 'regvd': 32, 'vulberta_cnn': 104}
184         os = output_files[k];                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 173, 'regvd': 152, 'vulberta_cnn': 79}
186         for(i=0;i<os->nb_streams;i++) {                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 25, 'regvd': 30, 'vulberta_cnn': 98}
188             int found;                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 371, 'regvd': 472, 'vulberta_cnn': 42}
190             ost = ost_table[n++];                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 162, 'regvd': 195, 'vulberta_cnn': 17}
192             ost->file_index = k;                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 179, 'regvd': 179, 'vulberta_cnn': 34}
194             ost->index = i;                                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 244, 'regvd': 332, 'vulberta_cnn': 60}
196             ost->st = os->streams[i];                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 128, 'regvd': 229, 'vulberta_cnn': 41}
198             if (nb_stream_maps > 0) {                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 327, 'regvd': 121, 'vulberta_cnn': 105}
200                 ost->source_index = file_table[stream_maps[n-1].file_index].ist_index +                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 118, 'regvd': 44, 'vulberta_cnn': 97}
202                     stream_maps[n-1].stream_index;                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 213, 'vulberta_cnn': 108}
204                                                                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1}
206                 /* Sanity check that the stream types match */                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 362, 'vulberta_cnn': -1}
208                 if (ist_table[ost->source_index]->st->codec.codec_type != ost->st->codec.codec_type) {                                                                               {'linevul': -1, 'codebert': -1, 'devign': 28, 'regvd': 40, 'vulberta_cnn': 9}
210                     fprintf(stderr, "Codec type mismatch for mapping #%d.%d -> #%d.%d\n",                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 266, 'vulberta_cnn': 54}
212                         stream_maps[n-1].file_index, stream_maps[n-1].stream_index,                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 207, 'vulberta_cnn': 0}
214                         ost->file_index, ost->index);                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 342, 'regvd': 201, 'vulberta_cnn': 4}
216                     exit(1);                                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 145, 'regvd': 441, 'vulberta_cnn': 22}
218                 }                                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 660, 'vulberta_cnn': 73}
220                                                                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1}
222             } else {                                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 560, 'vulberta_cnn': 5}
224                 /* get corresponding input stream index : we select the first one with the right type */                                                                             {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 323, 'vulberta_cnn': -1}
226                 found = 0;                                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 346, 'regvd': 461, 'vulberta_cnn': 33}
228                 for(j=0;j<nb_istreams;j++) {                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 10, 'regvd': 5, 'vulberta_cnn': 95}
230                     ist = ist_table[j];                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 70, 'regvd': 76, 'vulberta_cnn': 20}
232                     if (ist->discard &&                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 249, 'regvd': 394, 'vulberta_cnn': 96}
234                         ist->st->codec.codec_type == ost->st->codec.codec_type) {                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 63, 'regvd': 159, 'vulberta_cnn': 44}
236                         ost->source_index = j;                                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': 86, 'regvd': 203, 'vulberta_cnn': 25}
238                         found = 1;                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 351, 'regvd': 502, 'vulberta_cnn': 64}
240                     }                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 659, 'vulberta_cnn': 50}
242                 }                                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 658, 'vulberta_cnn': 67}
244                                                                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1}
246                 if (!found) {                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 178, 'regvd': 465, 'vulberta_cnn': 32}
248                     /* try again and reuse existing stream */                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 294, 'vulberta_cnn': -1}
250                     for(j=0;j<nb_istreams;j++) {                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 9, 'regvd': 4, 'vulberta_cnn': 86}
252                         ist = ist_table[j];                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 69, 'regvd': 75, 'vulberta_cnn': 100}
254                         if (ist->st->codec.codec_type == ost->st->codec.codec_type) {                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 62, 'regvd': 90, 'vulberta_cnn': 93}
256                             ost->source_index = j;                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 85, 'regvd': 202, 'vulberta_cnn': 26}
258                             found = 1;                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 350, 'regvd': 501, 'vulberta_cnn': -1}
260                         }                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 657, 'vulberta_cnn': -1}
262                     }                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 656, 'vulberta_cnn': -1}
264                     if (!found) {                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 177, 'regvd': 464, 'vulberta_cnn': -1}
266                         fprintf(stderr, "Could not find input stream matching output stream #%d.%d\n",                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 239, 'vulberta_cnn': -1}
268                                 ost->file_index, ost->index);                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 341, 'regvd': 200, 'vulberta_cnn': -1}
270                         exit(1);                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 144, 'regvd': 440, 'vulberta_cnn': -1}
272                     }                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 655, 'vulberta_cnn': -1}
274                 }                                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 654, 'vulberta_cnn': -1}
276             }                                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 653, 'vulberta_cnn': -1}
278             ist = ist_table[ost->source_index];                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 53, 'regvd': 61, 'vulberta_cnn': -1}
280             ist->discard = 0;                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 33, 'regvd': 265, 'vulberta_cnn': -1}
282         }                                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 652, 'vulberta_cnn': -1}
284     }                                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 651, 'vulberta_cnn': -1}
288     /* for each output stream, we compute the right encoding parameters */                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 277, 'vulberta_cnn': -1}
290     for(i=0;i<nb_ostreams;i++) {                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 7, 'regvd': 27, 'vulberta_cnn': -1}
292         ost = ost_table[i];                                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 60, 'regvd': 170, 'vulberta_cnn': -1}
294         ist = ist_table[ost->source_index];                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 52, 'regvd': 60, 'vulberta_cnn': -1}
298         codec = &ost->st->codec;                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 154, 'regvd': 381, 'vulberta_cnn': -1}
300         icodec = &ist->st->codec;                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 243, 'regvd': 247, 'vulberta_cnn': -1}
304         if (ost->st->stream_copy) {                                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 195, 'regvd': 218, 'vulberta_cnn': -1}
306             /* if stream_copy is selected, no need to decode or encode */                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 109, 'vulberta_cnn': -1}
308             codec->codec_id = icodec->codec_id;                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 409, 'regvd': 303, 'vulberta_cnn': -1}
310             codec->codec_type = icodec->codec_type;                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 149, 'regvd': 287, 'vulberta_cnn': -1}
312             codec->codec_tag = icodec->codec_tag;                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 398, 'regvd': 286, 'vulberta_cnn': -1}
314             codec->bit_rate = icodec->bit_rate;                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 275, 'regvd': 263, 'vulberta_cnn': -1}
316             switch(codec->codec_type) {                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 172, 'regvd': 305, 'vulberta_cnn': -1}
318             case CODEC_TYPE_AUDIO:                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 261, 'regvd': 529, 'vulberta_cnn': -1}
320                 codec->sample_rate = icodec->sample_rate;                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 353, 'regvd': 228, 'vulberta_cnn': -1}
322                 codec->channels = icodec->channels;                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 117, 'regvd': 345, 'vulberta_cnn': -1}
324                 break;                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 112, 'regvd': 544, 'vulberta_cnn': -1}
326             case CODEC_TYPE_VIDEO:                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 271, 'regvd': 528, 'vulberta_cnn': -1}
328                 codec->frame_rate = icodec->frame_rate;                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 396, 'regvd': 270, 'vulberta_cnn': -1}
330                 codec->frame_rate_base = icodec->frame_rate_base;                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 309, 'regvd': 211, 'vulberta_cnn': -1}
332                 codec->width = icodec->width;                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 324, 'regvd': 389, 'vulberta_cnn': -1}
334                 codec->height = icodec->height;                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 240, 'regvd': 388, 'vulberta_cnn': -1}
336                 break;                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 111, 'regvd': 543, 'vulberta_cnn': -1}
338             default:                                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 266, 'regvd': 578, 'vulberta_cnn': -1}
340                 av_abort();                                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 254, 'regvd': 354, 'vulberta_cnn': -1}
342             }                                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 650, 'vulberta_cnn': -1}
344         } else {                                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 559, 'vulberta_cnn': -1}
346             switch(codec->codec_type) {                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 171, 'regvd': 304, 'vulberta_cnn': -1}
348             case CODEC_TYPE_AUDIO:                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 260, 'regvd': 527, 'vulberta_cnn': -1}
350                 if (fifo_init(&ost->fifo, 2 * MAX_AUDIO_PACKET_SIZE))                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 221, 'regvd': 193, 'vulberta_cnn': -1}
352                     goto fail;                                                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': 203, 'regvd': 486, 'vulberta_cnn': -1}
354                                                                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1}
356                 if (codec->channels == icodec->channels &&                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 116, 'regvd': 348, 'vulberta_cnn': -1}
358                     codec->sample_rate == icodec->sample_rate) {                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 225, 'regvd': 267, 'vulberta_cnn': -1}
360                     ost->audio_resample = 0;                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 35, 'regvd': 222, 'vulberta_cnn': -1}
362                 } else {                                                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 558, 'vulberta_cnn': -1}
364                     if (codec->channels != icodec->channels &&                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': 73, 'regvd': 347, 'vulberta_cnn': -1}
366                         icodec->codec_id == CODEC_ID_AC3) {                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 408, 'regvd': 342, 'vulberta_cnn': -1}
368                         /* Special case for 5:1 AC3 input */                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 405, 'vulberta_cnn': -1}
370                         /* and mono or stereo output      */                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 493, 'vulberta_cnn': -1}
372                         /* Request specific number of channels */                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 399, 'vulberta_cnn': -1}
374                         icodec->channels = codec->channels;                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 115, 'regvd': 344, 'vulberta_cnn': -1}
376                         if (codec->sample_rate == icodec->sample_rate)                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 224, 'regvd': 216, 'vulberta_cnn': -1}
378                             ost->audio_resample = 0;                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 34, 'regvd': 221, 'vulberta_cnn': -1}
380                         else {                                                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 563, 'vulberta_cnn': -1}
382                             ost->audio_resample = 1;                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 156, 'regvd': 260, 'vulberta_cnn': -1}
384                             ost->resample = audio_resample_init(codec->channels, icodec->channels,                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 75, 'regvd': 130, 'vulberta_cnn': -1}
386                                                         codec->sample_rate,                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 407, 'vulberta_cnn': -1}
388                                                         icodec->sample_rate);                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 285, 'vulberta_cnn': -1}
390 			    if(!ost->resample)                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 120, 'regvd': 401, 'vulberta_cnn': -1}
392 			      {                                                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 572, 'vulberta_cnn': -1}
394 				printf("Can't resample.  Aborting.\n");                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 444, 'regvd': 310, 'vulberta_cnn': -1}
396 				av_abort();                                                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 253, 'regvd': 353, 'vulberta_cnn': -1}
398 			      }                                                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 649, 'vulberta_cnn': -1}
400                         }                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 648, 'vulberta_cnn': -1}
402                         /* Request specific number of channels */                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 398, 'vulberta_cnn': -1}
404                         icodec->channels = codec->channels;                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 114, 'regvd': 343, 'vulberta_cnn': -1}
406                     } else {                                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 557, 'vulberta_cnn': -1}
408                         ost->audio_resample = 1;                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 155, 'regvd': 259, 'vulberta_cnn': -1}
410                         ost->resample = audio_resample_init(codec->channels, icodec->channels,                                                                                       {'linevul': -1, 'codebert': -1, 'devign': 74, 'regvd': 129, 'vulberta_cnn': -1}
412                                                         codec->sample_rate,                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 406, 'vulberta_cnn': -1}
414                                                         icodec->sample_rate);                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 284, 'vulberta_cnn': -1}
416 			if(!ost->resample)                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 119, 'regvd': 400, 'vulberta_cnn': -1}
418 			  {                                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 571, 'vulberta_cnn': -1}
420 			    printf("Can't resample.  Aborting.\n");                                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': 443, 'regvd': 309, 'vulberta_cnn': -1}
422 			    av_abort();                                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 252, 'regvd': 352, 'vulberta_cnn': -1}
424 			  }                                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 647, 'vulberta_cnn': -1}
426                     }                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 646, 'vulberta_cnn': -1}
428                 }                                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 645, 'vulberta_cnn': -1}
430                 ist->decoding_needed = 1;                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 65, 'regvd': 148, 'vulberta_cnn': -1}
432                 ost->encoding_needed = 1;                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 68, 'regvd': 224, 'vulberta_cnn': -1}
434                 break;                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 110, 'regvd': 542, 'vulberta_cnn': -1}
436             case CODEC_TYPE_VIDEO:                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 270, 'regvd': 526, 'vulberta_cnn': -1}
438                 if (codec->width == icodec->width &&                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 323, 'regvd': 393, 'vulberta_cnn': -1}
440                     codec->height == icodec->height &&                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 239, 'regvd': 466, 'vulberta_cnn': -1}
442                     frame_topBand == 0 &&                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 430, 'regvd': 410, 'vulberta_cnn': -1}
444                     frame_bottomBand == 0 &&                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 429, 'regvd': 396, 'vulberta_cnn': -1}
446                     frame_leftBand == 0 &&                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 428, 'regvd': 409, 'vulberta_cnn': -1}
448                     frame_rightBand == 0)                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 427, 'regvd': 337, 'vulberta_cnn': -1}
450                 {                                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 570, 'vulberta_cnn': -1}
452                     ost->video_resample = 0;                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 37, 'regvd': 220, 'vulberta_cnn': -1}
454                     ost->video_crop = 0;                                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 39, 'regvd': 232, 'vulberta_cnn': -1}
456                 } else if ((codec->width == icodec->width -                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 322, 'regvd': 334, 'vulberta_cnn': -1}
458                                 (frame_leftBand + frame_rightBand)) &&                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 397, 'vulberta_cnn': -1}
460                         (codec->height == icodec->height -                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 238, 'regvd': 408, 'vulberta_cnn': -1}
462                                 (frame_topBand  + frame_bottomBand)))                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 415, 'vulberta_cnn': -1}
464                 {                                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 569, 'vulberta_cnn': -1}
466                     ost->video_resample = 0;                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 36, 'regvd': 219, 'vulberta_cnn': -1}
468                     ost->video_crop = 1;                                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 295, 'regvd': 275, 'vulberta_cnn': -1}
470                     ost->topBand = frame_topBand;                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 298, 'regvd': 283, 'vulberta_cnn': -1}
472                     ost->leftBand = frame_leftBand;                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 300, 'regvd': 282, 'vulberta_cnn': -1}
474                 } else {                                                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 556, 'vulberta_cnn': -1}
476                     uint8_t *buf;                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 375, 'regvd': 299, 'vulberta_cnn': -1}
478                     ost->video_resample = 1;                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 181, 'regvd': 258, 'vulberta_cnn': -1}
480                     ost->video_crop = 0; // cropping is handled as part of resample                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 38, 'regvd': 126, 'vulberta_cnn': -1}
482                     buf = av_malloc((codec->width * codec->height * 3) / 2);                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 343, 'regvd': 83, 'vulberta_cnn': -1}
484                     if (!buf)                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 175, 'regvd': 492, 'vulberta_cnn': -1}
486                         goto fail;                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 202, 'regvd': 485, 'vulberta_cnn': -1}
488                     ost->pict_tmp.data[0] = buf;                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 46, 'regvd': 139, 'vulberta_cnn': -1}
490                     ost->pict_tmp.data[1] = ost->pict_tmp.data[0] + (codec->width * codec->height);                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 41, 'regvd': 47, 'vulberta_cnn': -1}
492                     ost->pict_tmp.data[2] = ost->pict_tmp.data[1] + (codec->width * codec->height) / 4;                                                                              {'linevul': -1, 'codebert': -1, 'devign': 231, 'regvd': 57, 'vulberta_cnn': -1}
494                     ost->pict_tmp.linesize[0] = codec->width;                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 40, 'regvd': 87, 'vulberta_cnn': -1}
496                     ost->pict_tmp.linesize[1] = codec->width / 2;                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 153, 'regvd': 117, 'vulberta_cnn': -1}
498                     ost->pict_tmp.linesize[2] = codec->width / 2;                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 187, 'regvd': 116, 'vulberta_cnn': -1}
502                     ost->img_resample_ctx = img_resample_full_init(                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 340, 'regvd': 238, 'vulberta_cnn': -1}
504                                       ost->st->codec.width, ost->st->codec.height,                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 339, 'regvd': 426, 'vulberta_cnn': -1}
506                                       ist->st->codec.width, ist->st->codec.height,                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 374, 'vulberta_cnn': -1}
508                                       frame_topBand, frame_bottomBand,                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 453, 'vulberta_cnn': -1}
510                                       frame_leftBand, frame_rightBand);                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 320, 'vulberta_cnn': -1}
512                 }                                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 644, 'vulberta_cnn': -1}
514                 ost->encoding_needed = 1;                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 67, 'regvd': 223, 'vulberta_cnn': -1}
516                 ist->decoding_needed = 1;                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 64, 'regvd': 147, 'vulberta_cnn': -1}
518                 break;                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 109, 'regvd': 541, 'vulberta_cnn': -1}
520             default:                                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 265, 'regvd': 577, 'vulberta_cnn': -1}
522                 av_abort();                                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 251, 'regvd': 351, 'vulberta_cnn': -1}
524             }                                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 643, 'vulberta_cnn': -1}
526             /* two pass mode */                                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 514, 'vulberta_cnn': -1}
528             if (ost->encoding_needed &&                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 124, 'regvd': 298, 'vulberta_cnn': -1}
530                 (codec->flags & (CODEC_FLAG_PASS1 | CODEC_FLAG_PASS2))) {                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 280, 'regvd': 387, 'vulberta_cnn': -1}
532                 char logfilename[1024];                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 390, 'regvd': 384, 'vulberta_cnn': -1}
534                 FILE *f;                                                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 435, 'regvd': 519, 'vulberta_cnn': -1}
536                 int size;                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 360, 'regvd': 411, 'vulberta_cnn': -1}
538                 char *logbuffer;                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 419, 'regvd': 513, 'vulberta_cnn': -1}
540                                                                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1}
542                 snprintf(logfilename, sizeof(logfilename), "%s-%d.log",                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 268, 'vulberta_cnn': -1}
544                          pass_logfilename ?                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 414, 'vulberta_cnn': -1}
546                          pass_logfilename : DEFAULT_PASS_LOGFILENAME, i);                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 257, 'vulberta_cnn': -1}
548                 if (codec->flags & CODEC_FLAG_PASS1) {                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 279, 'regvd': 314, 'vulberta_cnn': -1}
550                     f = fopen(logfilename, "w");                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 241, 'vulberta_cnn': -1}
552                     if (!f) {                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 293, 'regvd': 482, 'vulberta_cnn': -1}
554                         perror(logfilename);                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 366, 'regvd': 383, 'vulberta_cnn': -1}
556                         exit(1);                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 143, 'regvd': 439, 'vulberta_cnn': -1}
558                     }                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 642, 'vulberta_cnn': -1}
560                     ost->logfile = f;                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 127, 'regvd': 333, 'vulberta_cnn': -1}
562                 } else {                                                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 555, 'vulberta_cnn': -1}
564                     /* read the log file */                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 509, 'vulberta_cnn': -1}
566                     f = fopen(logfilename, "r");                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 240, 'vulberta_cnn': -1}
568                     if (!f) {                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 292, 'regvd': 481, 'vulberta_cnn': -1}
570                         perror(logfilename);                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 365, 'regvd': 382, 'vulberta_cnn': -1}
572                         exit(1);                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 142, 'regvd': 438, 'vulberta_cnn': -1}
574                     }                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 641, 'vulberta_cnn': -1}
576                     fseek(f, 0, SEEK_END);                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 397, 'regvd': 273, 'vulberta_cnn': -1}
578                     size = ftell(f);                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 389, 'regvd': 302, 'vulberta_cnn': -1}
580                     fseek(f, 0, SEEK_SET);                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 414, 'regvd': 272, 'vulberta_cnn': -1}
582                     logbuffer = av_malloc(size + 1);                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 383, 'regvd': 151, 'vulberta_cnn': -1}
584                     if (!logbuffer) {                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 150, 'regvd': 467, 'vulberta_cnn': -1}
586                         fprintf(stderr, "Could not allocate log buffer\n");                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 442, 'regvd': 248, 'vulberta_cnn': -1}
588                         exit(1);                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 141, 'regvd': 437, 'vulberta_cnn': -1}
590                     }                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 640, 'vulberta_cnn': -1}
592                     fread(logbuffer, 1, size, f);                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 384, 'regvd': 330, 'vulberta_cnn': -1}
594                     fclose(f);                                                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': 417, 'regvd': 469, 'vulberta_cnn': -1}
596                     logbuffer[size] = '\0';                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 50, 'regvd': 324, 'vulberta_cnn': -1}
598                     codec->stats_in = logbuffer;                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 283, 'regvd': 212, 'vulberta_cnn': -1}
600                 }                                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 639, 'vulberta_cnn': -1}
602             }                                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 638, 'vulberta_cnn': -1}
604         }                                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 637, 'vulberta_cnn': -1}
606     }                                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 636, 'vulberta_cnn': -1}
610     /* dump the file output parameters - cannot be done before in case                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 377, 'vulberta_cnn': -1}
612        of stream copy */                                                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 470, 'vulberta_cnn': -1}
614     for(i=0;i<nb_output_files;i++) {                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 19, 'regvd': 37, 'vulberta_cnn': -1}
616         dump_format(output_files[i], i, output_files[i]->filename, 1);                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 386, 'regvd': 65, 'vulberta_cnn': -1}
618     }                                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 635, 'vulberta_cnn': -1}
622     /* dump the stream mapping */                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 402, 'vulberta_cnn': -1}
624     fprintf(stderr, "Stream mapping:\n");                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 441, 'regvd': 227, 'vulberta_cnn': -1}
626     for(i=0;i<nb_ostreams;i++) {                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 6, 'regvd': 26, 'vulberta_cnn': -1}
628         ost = ost_table[i];                                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 59, 'regvd': 169, 'vulberta_cnn': -1}
630         fprintf(stderr, "  Stream #%d.%d -> #%d.%d\n",                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 321, 'vulberta_cnn': -1}
632                 ist_table[ost->source_index]->file_index,                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 273, 'regvd': 107, 'vulberta_cnn': -1}
634                 ist_table[ost->source_index]->index,                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 272, 'regvd': 146, 'vulberta_cnn': -1}
636                 ost->file_index,                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 338, 'regvd': 313, 'vulberta_cnn': -1}
638                 ost->index);                                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 337, 'regvd': 391, 'vulberta_cnn': -1}
640     }                                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 634, 'vulberta_cnn': -1}
644     /* open each encoder */                                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 518, 'vulberta_cnn': -1}
646     for(i=0;i<nb_ostreams;i++) {                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 5, 'regvd': 25, 'vulberta_cnn': -1}
648         ost = ost_table[i];                                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 58, 'regvd': 168, 'vulberta_cnn': -1}
650         if (ost->encoding_needed) {                                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 123, 'regvd': 253, 'vulberta_cnn': -1}
652             AVCodec *codec;                                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 381, 'regvd': 422, 'vulberta_cnn': -1}
654             codec = avcodec_find_encoder(ost->st->codec.codec_id);                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 232, 'regvd': 86, 'vulberta_cnn': -1}
656             if (!codec) {                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 185, 'regvd': 445, 'vulberta_cnn': -1}
658                 fprintf(stderr, "Unsupported codec for output stream #%d.%d\n",                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 234, 'vulberta_cnn': -1}
660                         ost->file_index, ost->index);                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 336, 'regvd': 199, 'vulberta_cnn': -1}
662                 exit(1);                                                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 140, 'regvd': 436, 'vulberta_cnn': -1}
664             }                                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 633, 'vulberta_cnn': -1}
666             if (avcodec_open(&ost->st->codec, codec) < 0) {                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 220, 'regvd': 89, 'vulberta_cnn': -1}
668                 fprintf(stderr, "Error while opening codec for stream #%d.%d - maybe incorrect parameters such as bit_rate, rate, width or height\n",                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 119, 'vulberta_cnn': -1}
670                         ost->file_index, ost->index);                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 335, 'regvd': 198, 'vulberta_cnn': -1}
672                 exit(1);                                                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 139, 'regvd': 435, 'vulberta_cnn': -1}
674             }                                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 632, 'vulberta_cnn': -1}
676         }                                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 631, 'vulberta_cnn': -1}
678     }                                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 630, 'vulberta_cnn': -1}
682     /* open each decoder */                                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 515, 'vulberta_cnn': -1}
684     for(i=0;i<nb_istreams;i++) {                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 15, 'regvd': 13, 'vulberta_cnn': -1}
686         ist = ist_table[i];                                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 79, 'regvd': 106, 'vulberta_cnn': -1}
688         if (ist->decoding_needed) {                                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 91, 'regvd': 178, 'vulberta_cnn': -1}
690             AVCodec *codec;                                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 380, 'regvd': 421, 'vulberta_cnn': -1}
692             codec = avcodec_find_decoder(ist->st->codec.codec_id);                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 328, 'regvd': 58, 'vulberta_cnn': -1}
694             if (!codec) {                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 184, 'regvd': 444, 'vulberta_cnn': -1}
696                 fprintf(stderr, "Unsupported codec (id=%d) for input stream #%d.%d\n",                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 98, 'vulberta_cnn': -1}
698                         ist->st->codec.codec_id, ist->file_index, ist->index);                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 93, 'vulberta_cnn': -1}
700                 exit(1);                                                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 138, 'regvd': 434, 'vulberta_cnn': -1}
702             }                                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 629, 'vulberta_cnn': -1}
704             if (avcodec_open(&ist->st->codec, codec) < 0) {                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 302, 'regvd': 56, 'vulberta_cnn': -1}
706                 fprintf(stderr, "Error while opening codec for input stream #%d.%d\n",                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 190, 'vulberta_cnn': -1}
708                         ist->file_index, ist->index);                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 128, 'vulberta_cnn': -1}
710                 exit(1);                                                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 137, 'regvd': 433, 'vulberta_cnn': -1}
712             }                                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 628, 'vulberta_cnn': -1}
714             //if (ist->st->codec.codec_type == CODEC_TYPE_VIDEO)                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 72, 'regvd': 138, 'vulberta_cnn': -1}
716             //    ist->st->codec.flags |= CODEC_FLAG_REPEAT_FIELD;                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 157, 'vulberta_cnn': -1}
718             ist->frame_decoded = 1;                                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 93, 'regvd': 144, 'vulberta_cnn': -1}
720         }                                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 627, 'vulberta_cnn': -1}
722     }                                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 626, 'vulberta_cnn': -1}
726     /* init pts */                                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 473, 'vulberta_cnn': -1}
728     for(i=0;i<nb_istreams;i++) {                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 14, 'regvd': 12, 'vulberta_cnn': -1}
730         ist = ist_table[i];                                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 78, 'regvd': 105, 'vulberta_cnn': -1}
732 	is = input_files[ist->file_index];                                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 94, 'regvd': 50, 'vulberta_cnn': -1}
734         ist->pts = 0;                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 43, 'regvd': 264, 'vulberta_cnn': -1}
736         if (ist->decoding_needed) {                                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 90, 'regvd': 177, 'vulberta_cnn': -1}
738             switch (ist->st->codec.codec_type) {                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 82, 'regvd': 215, 'vulberta_cnn': -1}
740             case CODEC_TYPE_AUDIO:                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 259, 'regvd': 525, 'vulberta_cnn': -1}
742                 av_frac_init(&ist->next_pts,                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 192, 'vulberta_cnn': -1}
744                              0, 0, is->pts_num * ist->st->codec.sample_rate);                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 63, 'vulberta_cnn': -1}
746                 break;                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 108, 'regvd': 540, 'vulberta_cnn': -1}
748             case CODEC_TYPE_VIDEO:                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 269, 'regvd': 524, 'vulberta_cnn': -1}
750                 av_frac_init(&ist->next_pts,                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 191, 'vulberta_cnn': -1}
752                              0, 0, is->pts_num * ist->st->codec.frame_rate);                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 62, 'vulberta_cnn': -1}
754                 break;                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 107, 'regvd': 539, 'vulberta_cnn': -1}
756             default:                                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 264, 'regvd': 576, 'vulberta_cnn': -1}
758                 break;                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 106, 'regvd': 538, 'vulberta_cnn': -1}
760             }                                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 625, 'vulberta_cnn': -1}
762         }                                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 624, 'vulberta_cnn': -1}
764     }                                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 623, 'vulberta_cnn': -1}
766                                                                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1}
768     /* compute buffer size max (should use a complete heuristic) */                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 250, 'vulberta_cnn': -1}
770     for(i=0;i<nb_input_files;i++) {                                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 22, 'regvd': 17, 'vulberta_cnn': -1}
772         file_table[i].buffer_size_max = 2048;                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 44, 'regvd': 91, 'vulberta_cnn': -1}
774     }                                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 622, 'vulberta_cnn': -1}
778     /* open files and write file headers */                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 404, 'vulberta_cnn': -1}
780     for(i=0;i<nb_output_files;i++) {                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 18, 'regvd': 36, 'vulberta_cnn': -1}
782         os = output_files[i];                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 211, 'regvd': 161, 'vulberta_cnn': -1}
784         if (av_write_header(os) < 0) {                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 326, 'regvd': 261, 'vulberta_cnn': -1}
786             fprintf(stderr, "Could not write header for output file #%d (incorrect codec paramters ?)\n", i);                                                                        {'linevul': -1, 'codebert': -1, 'devign': 440, 'regvd': 150, 'vulberta_cnn': -1}
788             ret = -EINVAL;                                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 436, 'regvd': 496, 'vulberta_cnn': -1}
790             goto fail;                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 201, 'regvd': 484, 'vulberta_cnn': -1}
792         }                                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 621, 'vulberta_cnn': -1}
794     }                                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 620, 'vulberta_cnn': -1}
798 #ifndef CONFIG_WIN32                                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 500, 'vulberta_cnn': -1}
800     if ( !using_stdin )                                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 168, 'regvd': 360, 'vulberta_cnn': -1}
802         fprintf(stderr, "Press [q] to stop encoding\n");                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 439, 'regvd': 230, 'vulberta_cnn': -1}
804 #endif                                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 551, 'vulberta_cnn': -1}
806     term_init();                                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 405, 'regvd': 291, 'vulberta_cnn': -1}
810     stream_no_data = 0;                                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 315, 'regvd': 197, 'vulberta_cnn': -1}
812     key = -1;                                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 425, 'regvd': 497, 'vulberta_cnn': -1}
816     for(; received_sigterm == 0;) {                                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 45, 'regvd': 111, 'vulberta_cnn': -1}
818         int file_index, ist_index;                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 373, 'regvd': 141, 'vulberta_cnn': -1}
820         AVPacket pkt;                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 316, 'regvd': 480, 'vulberta_cnn': -1}
822         uint8_t *ptr;                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 361, 'regvd': 328, 'vulberta_cnn': -1}
824         int len;                                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 363, 'regvd': 463, 'vulberta_cnn': -1}
826         uint8_t *data_buf;                                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 312, 'regvd': 293, 'vulberta_cnn': -1}
828         int data_size, got_picture;                                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 303, 'regvd': 242, 'vulberta_cnn': -1}
830         AVPicture picture;                                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 433, 'regvd': 448, 'vulberta_cnn': -1}
832         short samples[AVCODEC_MAX_AUDIO_FRAME_SIZE / 2];                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 404, 'regvd': 312, 'vulberta_cnn': -1}
834         void *buffer_to_free;                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 434, 'regvd': 370, 'vulberta_cnn': -1}
836         double pts_min;                                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 367, 'regvd': 336, 'vulberta_cnn': -1}
838                                                                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1}
840     redo:                                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 376, 'regvd': -1, 'vulberta_cnn': -1}
842         /* if 'q' pressed, exits */                                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 430, 'vulberta_cnn': -1}
844         if (!using_stdin) {                                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 167, 'regvd': 311, 'vulberta_cnn': -1}
846             /* read_key() returns 0 on EOF */                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 274, 'vulberta_cnn': -1}
848             key = read_key();                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 432, 'regvd': 317, 'vulberta_cnn': -1}
850             if (key == 'q')                                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 352, 'regvd': 423, 'vulberta_cnn': -1}
852                 break;                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 105, 'regvd': 537, 'vulberta_cnn': -1}
854         }                                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 619, 'vulberta_cnn': -1}
858         /* select the stream that we must read now by looking at the                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 335, 'vulberta_cnn': -1}
860            smallest output pts */                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 516, 'vulberta_cnn': -1}
862         file_index = -1;                                                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 370, 'regvd': 306, 'vulberta_cnn': -1}
864         pts_min = 1e10;                                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 47, 'regvd': 236, 'vulberta_cnn': -1}
866         for(i=0;i<nb_ostreams;i++) {                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 4, 'regvd': 24, 'vulberta_cnn': -1}
868             double pts;                                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 448, 'regvd': 511, 'vulberta_cnn': -1}
870             ost = ost_table[i];                                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 57, 'regvd': 167, 'vulberta_cnn': -1}
872             os = output_files[ost->file_index];                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 84, 'regvd': 97, 'vulberta_cnn': -1}
874             ist = ist_table[ost->source_index];                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 51, 'regvd': 59, 'vulberta_cnn': -1}
876             pts = (double)ost->st->pts.val * os->pts_num / os->pts_den;                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 191, 'regvd': 108, 'vulberta_cnn': -1}
878             if (!file_table[ist->file_index].eof_reached &&                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 151, 'regvd': 79, 'vulberta_cnn': -1}
880                 pts < pts_min) {                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 379, 'vulberta_cnn': -1}
882                 pts_min = pts;                                                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': 400, 'regvd': 279, 'vulberta_cnn': -1}
884                 file_index = ist->file_index;                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 216, 'regvd': 131, 'vulberta_cnn': -1}
886             }                                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 618, 'vulberta_cnn': -1}
888         }                                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 617, 'vulberta_cnn': -1}
890         /* if none, if is finished */                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 385, 'vulberta_cnn': -1}
892         if (file_index < 0) {                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 358, 'regvd': 280, 'vulberta_cnn': -1}
894             break;                                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 104, 'regvd': 536, 'vulberta_cnn': -1}
896         }                                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 616, 'vulberta_cnn': -1}
900         /* finish if recording time exhausted */                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 390, 'vulberta_cnn': -1}
902         if (recording_time > 0 && pts_min >= (recording_time / 1000000.0))                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 274, 'regvd': 206, 'vulberta_cnn': -1}
904             break;                                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 103, 'regvd': 535, 'vulberta_cnn': -1}
908         /* read a packet from it and output it in the fifo */                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 452, 'vulberta_cnn': -1}
910         is = input_files[file_index];                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 218, 'regvd': 70, 'vulberta_cnn': -1}
912         if (av_read_packet(is, &pkt) < 0) {                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 345, 'regvd': 142, 'vulberta_cnn': -1}
914             file_table[file_index].eof_reached = 1;                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 307, 'regvd': 153, 'vulberta_cnn': -1}
916             continue;                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 319, 'regvd': 508, 'vulberta_cnn': -1}
918         }                                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 615, 'vulberta_cnn': -1}
920         if (!pkt.size) {                                                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 226, 'regvd': 395, 'vulberta_cnn': -1}
922             stream_no_data = is;                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 447, 'regvd': 135, 'vulberta_cnn': -1}
924         } else {                                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 554, 'vulberta_cnn': -1}
926             stream_no_data = 0;                                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 314, 'regvd': 196, 'vulberta_cnn': -1}
928         }                                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 614, 'vulberta_cnn': -1}
930         if (do_hex_dump) {                                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 355, 'regvd': 403, 'vulberta_cnn': -1}
932             printf("stream #%d, size=%d:\n", pkt.stream_index, pkt.size);                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 359, 'regvd': 46, 'vulberta_cnn': -1}
934             av_hex_dump(pkt.data, pkt.size);                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 422, 'regvd': 155, 'vulberta_cnn': -1}
936         }                                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 613, 'vulberta_cnn': -1}
938         /* the following test is needed in case new streams appear                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 359, 'vulberta_cnn': -1}
940            dynamically in stream : we ignore them */                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 392, 'vulberta_cnn': -1}
942         if (pkt.stream_index >= file_table[file_index].nb_streams)                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 281, 'regvd': 43, 'vulberta_cnn': -1}
944             goto discard_packet;                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 395, 'regvd': 308, 'vulberta_cnn': -1}
946         ist_index = file_table[file_index].ist_index + pkt.stream_index;                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 330, 'regvd': 33, 'vulberta_cnn': -1}
948         ist = ist_table[ist_index];                                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 66, 'regvd': 78, 'vulberta_cnn': -1}
950         if (ist->discard)                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 248, 'regvd': 365, 'vulberta_cnn': -1}
952             goto discard_packet;                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 394, 'regvd': 307, 'vulberta_cnn': -1}
956         // printf("read #%d.%d size=%d\n", ist->file_index, ist->index, pkt.size);                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 136, 'regvd': 31, 'vulberta_cnn': -1}
960         len = pkt.size;                                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 348, 'regvd': 340, 'vulberta_cnn': -1}
962         ptr = pkt.data;                                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 356, 'regvd': 474, 'vulberta_cnn': -1}
964         while (len > 0) {                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 256, 'regvd': 449, 'vulberta_cnn': -1}
966             /* decode the packet if needed */                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 428, 'vulberta_cnn': -1}
968             data_buf = NULL; /* fail safe */                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 401, 'regvd': 181, 'vulberta_cnn': -1}
970             data_size = 0;                                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 48, 'regvd': 249, 'vulberta_cnn': -1}
972             if (ist->decoding_needed) {                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 89, 'regvd': 176, 'vulberta_cnn': -1}
974                 /* NOTE1: we only take into account the PTS if a new                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 460, 'vulberta_cnn': -1}
976                    frame has begun (MPEG semantics) */                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 363, 'vulberta_cnn': -1}
978                 /* NOTE2: even if the fraction is not initialized,                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 329, 'vulberta_cnn': -1}
980                    av_frac_set can be used to set the integer part */                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 322, 'vulberta_cnn': -1}
982                 if (ist->frame_decoded) {                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 286, 'regvd': 173, 'vulberta_cnn': -1}
984                     /* If pts is unavailable -- we have to use synthetic one */                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 380, 'vulberta_cnn': -1}
986                     if( pkt.pts != AV_NOPTS_VALUE )                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 227, 'regvd': 209, 'vulberta_cnn': -1}
988                     {                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 568, 'vulberta_cnn': -1}
990                         ist->pts = ist->next_pts.val = pkt.pts;                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 192, 'regvd': 156, 'vulberta_cnn': -1}
992                     }                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 612, 'vulberta_cnn': -1}
994                     else                                                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 564, 'vulberta_cnn': -1}
996                     {                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 567, 'vulberta_cnn': -1}
998                         ist->pts = ist->next_pts.val;                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 308, 'regvd': 180, 'vulberta_cnn': -1}
1000                     }                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 611, 'vulberta_cnn': -1}
1002                     ist->frame_decoded = 0;                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 32, 'regvd': 101, 'vulberta_cnn': -1}
1004                 }                                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 610, 'vulberta_cnn': -1}
1008                 switch(ist->st->codec.codec_type) {                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 81, 'regvd': 214, 'vulberta_cnn': -1}
1010                 case CODEC_TYPE_AUDIO:                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 258, 'regvd': 523, 'vulberta_cnn': -1}
1012                     /* XXX: could avoid copy if PCM 16 bits with same                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 429, 'vulberta_cnn': -1}
1014                        endianness as CPU */                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 504, 'vulberta_cnn': -1}
1016                     ret = avcodec_decode_audio(&ist->st->codec, samples, &data_size,                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 66, 'vulberta_cnn': -1}
1018                                                ptr, len);                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 468, 'vulberta_cnn': -1}
1020                     if (ret < 0)                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 229, 'regvd': 432, 'vulberta_cnn': -1}
1022                         goto fail_decode;                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 170, 'regvd': 356, 'vulberta_cnn': -1}
1024                     /* Some bug in mpeg audio decoder gives */                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 417, 'vulberta_cnn': -1}
1026                     /* data_size < 0, it seems they are overflows */                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 255, 'vulberta_cnn': -1}
1028                     if (data_size <= 0) {                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 230, 'regvd': 182, 'vulberta_cnn': -1}
1030                         /* no audio frame */                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 510, 'vulberta_cnn': -1}
1032                         ptr += ret;                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 159, 'regvd': 478, 'vulberta_cnn': -1}
1034                         len -= ret;                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 131, 'regvd': 459, 'vulberta_cnn': -1}
1036                         continue;                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 318, 'regvd': 507, 'vulberta_cnn': -1}
1038                     }                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 609, 'vulberta_cnn': -1}
1040                     data_buf = (uint8_t *)samples;                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 276, 'regvd': 72, 'vulberta_cnn': -1}
1042 		    av_frac_add(&ist->next_pts,                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 205, 'vulberta_cnn': -1}
1044 			        is->pts_den * data_size / (2 * ist->st->codec.channels));                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 52, 'vulberta_cnn': -1}
1046                     break;                                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 102, 'regvd': 534, 'vulberta_cnn': -1}
1048                 case CODEC_TYPE_VIDEO:                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 268, 'regvd': 522, 'vulberta_cnn': -1}
1050                     {                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 566, 'vulberta_cnn': -1}
1052                         AVFrame big_picture;                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 402, 'regvd': 315, 'vulberta_cnn': -1}
1056                         data_size = (ist->st->codec.width * ist->st->codec.height * 3) / 2;                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 299, 'regvd': 48, 'vulberta_cnn': -1}
1058                         ret = avcodec_decode_video(&ist->st->codec,                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 94, 'vulberta_cnn': -1}
1060                                                    &big_picture, &got_picture, ptr, len);                                                                                           {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 288, 'vulberta_cnn': -1}
1062                         picture= *(AVPicture*)&big_picture;                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 349, 'regvd': 100, 'vulberta_cnn': -1}
1064                         ist->st->quality= big_picture.quality;                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 213, 'regvd': 171, 'vulberta_cnn': -1}
1066                         if (ret < 0) {                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 228, 'regvd': 413, 'vulberta_cnn': -1}
1068                         fail_decode:                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 214, 'regvd': 475, 'vulberta_cnn': -1}
1070                             fprintf(stderr, "Error while decoding stream #%d.%d\n",                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 281, 'vulberta_cnn': -1}
1072                                     ist->file_index, ist->index);                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 127, 'vulberta_cnn': -1}
1074                             av_free_packet(&pkt);                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 321, 'regvd': 358, 'vulberta_cnn': -1}
1076                             goto redo;                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 412, 'regvd': 545, 'vulberta_cnn': -1}
1078                         }                                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 608, 'vulberta_cnn': -1}
1080                         if (!got_picture) {                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 183, 'regvd': 369, 'vulberta_cnn': -1}
1082                             /* no picture yet */                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 499, 'vulberta_cnn': -1}
1084                             ptr += ret;                                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 158, 'regvd': 477, 'vulberta_cnn': -1}
1086                             len -= ret;                                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 130, 'regvd': 458, 'vulberta_cnn': -1}
1088                             continue;                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 317, 'regvd': 506, 'vulberta_cnn': -1}
1090                         }                                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 607, 'vulberta_cnn': -1}
1092                         av_frac_add(&ist->next_pts,                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 204, 'vulberta_cnn': -1}
1094 			            is->pts_den * ist->st->codec.frame_rate_base);                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 92, 'vulberta_cnn': -1}
1096                     }                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 606, 'vulberta_cnn': -1}
1098                     break;                                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 101, 'regvd': 533, 'vulberta_cnn': -1}
1100                 default:                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 263, 'regvd': 575, 'vulberta_cnn': -1}
1102                     goto fail_decode;                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 169, 'regvd': 355, 'vulberta_cnn': -1}
1104                 }                                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 605, 'vulberta_cnn': -1}
1106             } else {                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 553, 'vulberta_cnn': -1}
1108                 data_buf = ptr;                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 378, 'regvd': 386, 'vulberta_cnn': -1}
1110                 data_size = len;                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 368, 'regvd': 256, 'vulberta_cnn': -1}
1112                 ret = len;                                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 382, 'regvd': 457, 'vulberta_cnn': -1}
1114             }                                                                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 604, 'vulberta_cnn': -1}
1116             ptr += ret;                                                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 157, 'regvd': 476, 'vulberta_cnn': -1}
1118             len -= ret;                                                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 129, 'regvd': 456, 'vulberta_cnn': -1}
1122             buffer_to_free = 0;                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 399, 'regvd': 346, 'vulberta_cnn': -1}
1124             if (ist->st->codec.codec_type == CODEC_TYPE_VIDEO) {                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 71, 'regvd': 114, 'vulberta_cnn': -1}
1126                 pre_process_video_frame(ist, &picture, &buffer_to_free);                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 449, 'regvd': 110, 'vulberta_cnn': -1}
1128             }                                                                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 603, 'vulberta_cnn': -1}
1132             ist->frame_decoded = 1;                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 92, 'regvd': 143, 'vulberta_cnn': -1}
1136             /* frame rate emulation */                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 503, 'vulberta_cnn': -1}
1138             if (ist->st->codec.rate_emu) {                                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 234, 'regvd': 172, 'vulberta_cnn': -1}
1140                 int64_t pts = av_rescale((int64_t) ist->frame * ist->st->codec.frame_rate_base, 1000000, ist->st->codec.frame_rate);                                                {'linevul': -1, 'codebert': -1, 'devign': 31, 'regvd': 3, 'vulberta_cnn': -1}
1142                 int64_t now = av_gettime() - ist->start;                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 282, 'regvd': 51, 'vulberta_cnn': -1}
1144                 if (pts > now)                                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 385, 'regvd': 431, 'vulberta_cnn': -1}
1146                     usleep(pts - now);                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 437, 'regvd': 420, 'vulberta_cnn': -1}
1150                 ist->frame++;                                                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': 30, 'regvd': 371, 'vulberta_cnn': -1}
1152             }                                                                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 602, 'vulberta_cnn': -1}
1156 #if 0                                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 548, 'vulberta_cnn': -1}
1158             /* mpeg PTS deordering : if it is a P or I frame, the PTS                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 364, 'vulberta_cnn': -1}
1160                is the one of the next displayed one */                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 427, 'vulberta_cnn': -1}
1162             /* XXX: add mpeg4 too ? */                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 546, 'vulberta_cnn': -1}
1164             if (ist->st->codec.codec_id == CODEC_ID_MPEG1VIDEO) {                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 310, 'regvd': 113, 'vulberta_cnn': -1}
1166                 if (ist->st->codec.pict_type != B_TYPE) {                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 125, 'regvd': 102, 'vulberta_cnn': -1}
1168                     int64_t tmp;                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 374, 'regvd': 367, 'vulberta_cnn': -1}
1170                     tmp = ist->last_ip_pts;                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 379, 'regvd': 189, 'vulberta_cnn': -1}
1172                     ist->last_ip_pts  = ist->frac_pts.val;                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 357, 'regvd': 210, 'vulberta_cnn': -1}
1174                     ist->frac_pts.val = tmp;                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 242, 'regvd': 188, 'vulberta_cnn': -1}
1176                 }                                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 601, 'vulberta_cnn': -1}
1178             }                                                                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 600, 'vulberta_cnn': -1}
1180 #endif                                                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 550, 'vulberta_cnn': -1}
1182             /* transcode raw format, encode packets and output them */                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 373, 'vulberta_cnn': -1}
1186             for(i=0;i<nb_ostreams;i++) {                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 3, 'regvd': 23, 'vulberta_cnn': -1}
1188                 int frame_size;                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 304, 'regvd': 296, 'vulberta_cnn': -1}
1192                 ost = ost_table[i];                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 56, 'regvd': 166, 'vulberta_cnn': -1}
1194                 if (ost->source_index == ist_index) {                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 160, 'regvd': 95, 'vulberta_cnn': -1}
1196                     os = output_files[ost->file_index];                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 83, 'regvd': 96, 'vulberta_cnn': -1}
1200 #if 0                                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 547, 'vulberta_cnn': -1}
1202                     printf("%d: got pts=%f %f\n", i, pkt.pts / 90000.0,                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 426, 'regvd': 271, 'vulberta_cnn': -1}
1204                            (ist->pts - ost->st->pts.val) / 90000.0);                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 334, 'regvd': 225, 'vulberta_cnn': -1}
1206 #endif                                                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 549, 'vulberta_cnn': -1}
1208                     /* set the input output pts pairs */                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 419, 'vulberta_cnn': -1}
1210                     ost->sync_ipts = (double)ist->pts * is->pts_num /                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': 333, 'regvd': 68, 'vulberta_cnn': -1}
1212                         is->pts_den;                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 292, 'vulberta_cnn': -1}
1214                     /* XXX: take into account the various fifos,                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 368, 'vulberta_cnn': -1}
1216                        in particular for audio */                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 498, 'vulberta_cnn': -1}
1218                     ost->sync_opts = ost->st->pts.val;                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 174, 'regvd': 295, 'vulberta_cnn': -1}
1220                     //printf("ipts=%lld sync_ipts=%f sync_opts=%lld pts.val=%lld pkt.pts=%lld\n", ist->pts, ost->sync_ipts, ost->sync_opts, ost->st->pts.val, pkt.pts);             {'linevul': -1, 'codebert': -1, 'devign': 161, 'regvd': 42, 'vulberta_cnn': -1}
1224                     if (ost->encoding_needed) {                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 122, 'regvd': 252, 'vulberta_cnn': -1}
1226                         switch(ost->st->codec.codec_type) {                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 96, 'regvd': 278, 'vulberta_cnn': -1}
1228                         case CODEC_TYPE_AUDIO:                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 257, 'regvd': 521, 'vulberta_cnn': -1}
1230                             do_audio_out(os, ost, ist, data_buf, data_size);                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 245, 'regvd': 84, 'vulberta_cnn': -1}
1232                             break;                                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 100, 'regvd': 532, 'vulberta_cnn': -1}
1234                         case CODEC_TYPE_VIDEO:                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 267, 'regvd': 520, 'vulberta_cnn': -1}
1236                             /* find an audio stream for synchro */                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 378, 'vulberta_cnn': -1}
1238                             {                                                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 565, 'vulberta_cnn': -1}
1240                                 int i;                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 438, 'regvd': 471, 'vulberta_cnn': -1}
1242                                 AVOutputStream *audio_sync, *ost1;                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 301, 'regvd': 88, 'vulberta_cnn': -1}
1244                                 audio_sync = NULL;                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 406, 'regvd': 301, 'vulberta_cnn': -1}
1246                                 for(i=0;i<nb_ostreams;i++) {                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 2, 'regvd': 22, 'vulberta_cnn': -1}
1248                                     ost1 = ost_table[i];                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 49, 'regvd': 165, 'vulberta_cnn': -1}
1250                                     if (ost1->file_index == ost->file_index &&                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 193, 'regvd': 208, 'vulberta_cnn': -1}
1252                                         ost1->st->codec.codec_type == CODEC_TYPE_AUDIO) {                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 95, 'regvd': 316, 'vulberta_cnn': -1}
1254                                         audio_sync = ost1;                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 297, 'regvd': 269, 'vulberta_cnn': -1}
1256                                         break;                                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 99, 'regvd': 531, 'vulberta_cnn': -1}
1258                                     }                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 599, 'vulberta_cnn': -1}
1260                                 }                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 598, 'vulberta_cnn': -1}
1264                                 do_video_out(os, ost, ist, &picture, &frame_size, audio_sync);                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 247, 'regvd': 67, 'vulberta_cnn': -1}
1266                                 if (do_vstats && frame_size)                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 391, 'regvd': 341, 'vulberta_cnn': -1}
1268                                     do_video_stats(os, ost, frame_size);                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 294, 'regvd': 185, 'vulberta_cnn': -1}
1270                             }                                                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 597, 'vulberta_cnn': -1}
1272                             break;                                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 98, 'regvd': 530, 'vulberta_cnn': -1}
1274                         default:                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 262, 'regvd': 574, 'vulberta_cnn': -1}
1276                             av_abort();                                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 250, 'regvd': 350, 'vulberta_cnn': -1}
1278                         }                                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 596, 'vulberta_cnn': -1}
1280                     } else {                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 552, 'vulberta_cnn': -1}
1282                         AVFrame avframe;                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 421, 'regvd': 479, 'vulberta_cnn': -1}
1284                                                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1}
1286                         /* no reencoding needed : output the packet directly */                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 425, 'vulberta_cnn': -1}
1288                         /* force the input stream PTS */                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 327, 'vulberta_cnn': -1}
1290                                                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1}
1292                         memset(&avframe, 0, sizeof(AVFrame));                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': 354, 'regvd': 124, 'vulberta_cnn': -1}
1294                         ost->st->codec.coded_frame= &avframe;                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': 126, 'regvd': 235, 'vulberta_cnn': -1}
1296 			avframe.key_frame = pkt.flags & PKT_FLAG_KEY;                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 403, 'regvd': 297, 'vulberta_cnn': -1}
1298                                                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1}
1300                         av_write_frame(os, ost->index, data_buf, data_size);                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 241, 'regvd': 82, 'vulberta_cnn': -1}
1302 			ost->st->codec.frame_number++;                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 132, 'regvd': 290, 'vulberta_cnn': -1}
1304 			ost->frame_number++;                                                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 199, 'regvd': 339, 'vulberta_cnn': -1}
1306                     }                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 595, 'vulberta_cnn': -1}
1308                 }                                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 594, 'vulberta_cnn': -1}
1310             }                                                                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 593, 'vulberta_cnn': -1}
1312             av_free(buffer_to_free);                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 407, 'regvd': 349, 'vulberta_cnn': -1}
1314         }                                                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 592, 'vulberta_cnn': -1}
1316     discard_packet:                                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 387, 'regvd': 412, 'vulberta_cnn': -1}
1318         av_free_packet(&pkt);                                                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': 320, 'regvd': 357, 'vulberta_cnn': -1}
1320                                                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1}
1322         /* dump report by using the output first video and audio streams */                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 361, 'vulberta_cnn': -1}
1324         print_report(output_files, ost_table, nb_ostreams, 0);                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 176, 'regvd': 9, 'vulberta_cnn': -1}
1326     }                                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 591, 'vulberta_cnn': -1}
1328     term_exit();                                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 290, 'regvd': 331, 'vulberta_cnn': -1}
1332     /* dump report by using the first video and audio streams */                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 376, 'vulberta_cnn': -1}
1334     print_report(output_files, ost_table, nb_ostreams, 1);                                                                                                                          {'linevul': -1, 'codebert': -1, 'devign': 180, 'regvd': 16, 'vulberta_cnn': -1}
1338     /* close each encoder */                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 505, 'vulberta_cnn': -1}
1340     for(i=0;i<nb_ostreams;i++) {                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 1, 'regvd': 21, 'vulberta_cnn': -1}
1342         ost = ost_table[i];                                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 55, 'regvd': 164, 'vulberta_cnn': -1}
1344         if (ost->encoding_needed) {                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 121, 'regvd': 251, 'vulberta_cnn': -1}
1346             av_freep(&ost->st->codec.stats_in);                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 190, 'regvd': 158, 'vulberta_cnn': -1}
1348             avcodec_close(&ost->st->codec);                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 237, 'regvd': 237, 'vulberta_cnn': -1}
1350         }                                                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 590, 'vulberta_cnn': -1}
1352     }                                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 589, 'vulberta_cnn': -1}
1354                                                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1}
1356     /* close each decoder */                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 512, 'vulberta_cnn': -1}
1358     for(i=0;i<nb_istreams;i++) {                                                                                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 13, 'regvd': 11, 'vulberta_cnn': -1}
1360         ist = ist_table[i];                                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 77, 'regvd': 104, 'vulberta_cnn': -1}
1362         if (ist->decoding_needed) {                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 88, 'regvd': 175, 'vulberta_cnn': -1}
1364             avcodec_close(&ist->st->codec);                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 325, 'regvd': 112, 'vulberta_cnn': -1}
1366         }                                                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 588, 'vulberta_cnn': -1}
1368     }                                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 587, 'vulberta_cnn': -1}
1370                                                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1}
1374     /* write the trailer if needed and close file */                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 418, 'vulberta_cnn': -1}
1376     for(i=0;i<nb_output_files;i++) {                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 17, 'regvd': 35, 'vulberta_cnn': -1}
1378         os = output_files[i];                                                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': 210, 'regvd': 160, 'vulberta_cnn': -1}
1380         av_write_trailer(os);                                                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': 410, 'regvd': 276, 'vulberta_cnn': -1}
1382     }                                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 586, 'vulberta_cnn': -1}
1384     /* finished ! */                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 291, 'regvd': 455, 'vulberta_cnn': -1}
1386                                                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1}
1388     ret = 0;                                                                                                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 420, 'regvd': 454, 'vulberta_cnn': -1}
1390  fail1:                                                                                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 165, 'regvd': 562, 'vulberta_cnn': -1}
1392     av_free(file_table);                                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 411, 'regvd': 217, 'vulberta_cnn': -1}
1396     if (ist_table) {                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 362, 'regvd': 183, 'vulberta_cnn': -1}
1398         for(i=0;i<nb_istreams;i++) {                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 12, 'regvd': 10, 'vulberta_cnn': -1}
1400             ist = ist_table[i];                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 76, 'regvd': 103, 'vulberta_cnn': -1}
1402             av_free(ist);                                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 413, 'regvd': 186, 'vulberta_cnn': -1}
1404         }                                                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 585, 'vulberta_cnn': -1}
1406         av_free(ist_table);                                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 255, 'regvd': 115, 'vulberta_cnn': -1}
1408     }                                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 584, 'vulberta_cnn': -1}
1410     if (ost_table) {                                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 246, 'regvd': 254, 'vulberta_cnn': -1}
1412         for(i=0;i<nb_ostreams;i++) {                                                                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 0, 'regvd': 20, 'vulberta_cnn': -1}
1414             ost = ost_table[i];                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 54, 'regvd': 163, 'vulberta_cnn': -1}
1416             if (ost) {                                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 332, 'regvd': 416, 'vulberta_cnn': -1}
1418                 if (ost->logfile) {                                                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 215, 'regvd': 372, 'vulberta_cnn': -1}
1420                     fclose(ost->logfile);                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': 135, 'regvd': 326, 'vulberta_cnn': -1}
1422                     ost->logfile = NULL;                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 97, 'regvd': 325, 'vulberta_cnn': -1}
1424                 }                                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 583, 'vulberta_cnn': -1}
1426                 fifo_free(&ost->fifo); /* works even if fifo is not                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 284, 'regvd': 73, 'vulberta_cnn': -1}
1428                                           initialized but set to zero */                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 447, 'vulberta_cnn': -1}
1430                 av_free(ost->pict_tmp.data[0]);                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 186, 'regvd': 122, 'vulberta_cnn': -1}
1432                 if (ost->video_resample)                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 209, 'regvd': 319, 'vulberta_cnn': -1}
1434                     img_resample_close(ost->img_resample_ctx);                                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 236, 'regvd': 245, 'vulberta_cnn': -1}
1436                 if (ost->audio_resample)                                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 196, 'regvd': 318, 'vulberta_cnn': -1}
1438                     audio_resample_close(ost->resample);                                                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 152, 'regvd': 244, 'vulberta_cnn': -1}
1440                 av_free(ost);                                                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': 287, 'regvd': 300, 'vulberta_cnn': -1}
1442             }                                                                                                                                                                       {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 582, 'vulberta_cnn': -1}
1444         }                                                                                                                                                                           {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 581, 'vulberta_cnn': -1}
1446         av_free(ost_table);                                                                                                                                                         {'linevul': -1, 'codebert': -1, 'devign': 182, 'regvd': 231, 'vulberta_cnn': -1}
1448     }                                                                                                                                                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 580, 'vulberta_cnn': -1}
1450     return ret;                                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 392, 'regvd': 517, 'vulberta_cnn': -1}
1452  fail:                                                                                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': 277, 'regvd': 561, 'vulberta_cnn': -1}
1454     ret = -ENOMEM;                                                                                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': 347, 'regvd': 495, 'vulberta_cnn': -1}
1456     goto fail1;                                                                                                                                                                     {'linevul': -1, 'codebert': -1, 'devign': 164, 'regvd': 483, 'vulberta_cnn': -1}
1458 }                                                                                                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 579, 'vulberta_cnn': -1}
-----------------------
Highlighted lines: 
12     int ret, i, j, k, n, nb_istreams = 0, nb_ostreams = 0;
30     file_table= (AVInputFile*) av_mallocz(nb_input_files * sizeof(AVInputFile));
58     ist_table = av_mallocz(nb_istreams * sizeof(AVInputStream *));
--------------------------------------------------------------------------------------------------------------
Example ids:  13740 project:  FFmpeg commit id:  8d0a2180582005e91d9f14ae3dd219a882277c23 Number of lines:  89 tground truth:  1
Original lines: 
Predicted Correctly by :  ['linevul', 'codebert', 'devign', 'vulberta_cnn', 'vulberta_mlp']
0 int ff_jni_exception_get_summary(JNIEnv *env, jthrowable exception, char **error, void *log_ctx)                    {'linevul': 1, 'codebert': 0, 'devign': 10, 'vulberta_cnn': 88, 'vulberta_mlp': 1}
2 {                                                                                                                   {'linevul': 28, 'codebert': 13, 'devign': -1, 'vulberta_cnn': 52, 'vulberta_mlp': 88}
4     int ret = 0;                                                                                                    {'linevul': 24, 'codebert': 17, 'devign': 61, 'vulberta_cnn': 13, 'vulberta_mlp': 87}
8     AVBPrint bp;                                                                                                    {'linevul': 22, 'codebert': 3, 'devign': 62, 'vulberta_cnn': 83, 'vulberta_mlp': 86}
12     char *name = NULL;                                                                                             {'linevul': 23, 'codebert': 21, 'devign': 54, 'vulberta_cnn': 24, 'vulberta_mlp': 85}
14     char *message = NULL;                                                                                          {'linevul': 21, 'codebert': 18, 'devign': 51, 'vulberta_cnn': 41, 'vulberta_mlp': 84}
18     jclass class_class = NULL;                                                                                     {'linevul': 18, 'codebert': 22, 'devign': 43, 'vulberta_cnn': 70, 'vulberta_mlp': 83}
20     jmethodID get_name_id = NULL;                                                                                  {'linevul': 15, 'codebert': 9, 'devign': 58, 'vulberta_cnn': 2, 'vulberta_mlp': 26}
24     jclass exception_class = NULL;                                                                                 {'linevul': 17, 'codebert': 15, 'devign': 44, 'vulberta_cnn': 27, 'vulberta_mlp': 24}
26     jmethodID get_message_id = NULL;                                                                               {'linevul': 16, 'codebert': 10, 'devign': 57, 'vulberta_cnn': 11, 'vulberta_mlp': 27}
30     jstring string;                                                                                                {'linevul': 25, 'codebert': 19, 'devign': 17, 'vulberta_cnn': 39, 'vulberta_mlp': 82}
34     av_bprint_init(&bp, 0, AV_BPRINT_SIZE_AUTOMATIC);                                                              {'linevul': 4, 'codebert': 1, 'devign': 63, 'vulberta_cnn': 86, 'vulberta_mlp': 44}
38     exception_class = (*env)->GetObjectClass(env, exception);                                                      {'linevul': 6, 'codebert': 8, 'devign': 41, 'vulberta_cnn': 22, 'vulberta_mlp': 81}
40     if ((*env)->ExceptionCheck(env)) {                                                                             {'linevul': 14, 'codebert': 12, 'devign': 5, 'vulberta_cnn': 82, 'vulberta_mlp': 15}
42         (*env)->ExceptionClear(env);                                                                               {'linevul': 11, 'codebert': 6, 'devign': 31, 'vulberta_cnn': 36, 'vulberta_mlp': 33}
44         av_log(log_ctx, AV_LOG_ERROR, "Could not find Throwable class\n");                                         {'linevul': 3, 'codebert': 14, 'devign': -1, 'vulberta_cnn': 42, 'vulberta_mlp': 43}
46         ret = AVERROR_EXTERNAL;                                                                                    {'linevul': 8, 'codebert': 20, 'devign': 23, 'vulberta_cnn': 30, 'vulberta_mlp': 7}
48         goto done;                                                                                                 {'linevul': 20, 'codebert': 7, 'devign': 40, 'vulberta_cnn': 7, 'vulberta_mlp': 6}
50     }                                                                                                              {'linevul': 27, 'codebert': 2, 'devign': -1, 'vulberta_cnn': 37, 'vulberta_mlp': 0}
54     class_class = (*env)->GetObjectClass(env, exception_class);                                                    {'linevul': 5, 'codebert': 4, 'devign': 16, 'vulberta_cnn': 35, 'vulberta_mlp': 14}
56     if ((*env)->ExceptionCheck(env)) {                                                                             {'linevul': 13, 'codebert': 11, 'devign': 4, 'vulberta_cnn': 33, 'vulberta_mlp': 18}
58         (*env)->ExceptionClear(env);                                                                               {'linevul': 10, 'codebert': 5, 'devign': 30, 'vulberta_cnn': 84, 'vulberta_mlp': 80}
60         av_log(log_ctx, AV_LOG_ERROR, "Could not find Throwable class's class\n");                                 {'linevul': 2, 'codebert': 16, 'devign': -1, 'vulberta_cnn': 79, 'vulberta_mlp': 8}
62         ret = AVERROR_EXTERNAL;                                                                                    {'linevul': 7, 'codebert': -1, 'devign': 22, 'vulberta_cnn': 25, 'vulberta_mlp': 10}
64         goto done;                                                                                                 {'linevul': 19, 'codebert': -1, 'devign': 39, 'vulberta_cnn': 69, 'vulberta_mlp': 13}
66     }                                                                                                              {'linevul': 26, 'codebert': -1, 'devign': -1, 'vulberta_cnn': 78, 'vulberta_mlp': 79}
70     get_name_id = (*env)->GetMethodID(env, class_class, "getName", "()Ljava/lang/String;");                        {'linevul': 0, 'codebert': -1, 'devign': 56, 'vulberta_cnn': 4, 'vulberta_mlp': 2}
72     if ((*env)->ExceptionCheck(env)) {                                                                             {'linevul': 12, 'codebert': -1, 'devign': 3, 'vulberta_cnn': 28, 'vulberta_mlp': 3}
74         (*env)->ExceptionClear(env);                                                                               {'linevul': 9, 'codebert': -1, 'devign': 29, 'vulberta_cnn': 29, 'vulberta_mlp': 78}
76         av_log(log_ctx, AV_LOG_ERROR, "Could not find method Class.getName()\n");                                  {'linevul': -1, 'codebert': -1, 'devign': -1, 'vulberta_cnn': 19, 'vulberta_mlp': 21}
78         ret = AVERROR_EXTERNAL;                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 21, 'vulberta_cnn': 44, 'vulberta_mlp': 77}
80         goto done;                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 38, 'vulberta_cnn': 77, 'vulberta_mlp': 76}
82     }                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': -1, 'vulberta_cnn': 59, 'vulberta_mlp': 75}
86     string = (*env)->CallObjectMethod(env, exception_class, get_name_id);                                          {'linevul': -1, 'codebert': -1, 'devign': 9, 'vulberta_cnn': 75, 'vulberta_mlp': 29}
88     if ((*env)->ExceptionCheck(env)) {                                                                             {'linevul': -1, 'codebert': -1, 'devign': 2, 'vulberta_cnn': 80, 'vulberta_mlp': 38}
90         (*env)->ExceptionClear(env);                                                                               {'linevul': -1, 'codebert': -1, 'devign': 28, 'vulberta_cnn': 20, 'vulberta_mlp': 32}
92         av_log(log_ctx, AV_LOG_ERROR, "Class.getName() threw an exception\n");                                     {'linevul': -1, 'codebert': -1, 'devign': -1, 'vulberta_cnn': 3, 'vulberta_mlp': 19}
94         ret = AVERROR_EXTERNAL;                                                                                    {'linevul': -1, 'codebert': -1, 'devign': 20, 'vulberta_cnn': 31, 'vulberta_mlp': 74}
96         goto done;                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 37, 'vulberta_cnn': 49, 'vulberta_mlp': 73}
98     }                                                                                                              {'linevul': -1, 'codebert': -1, 'devign': -1, 'vulberta_cnn': 71, 'vulberta_mlp': 72}
102     if (string) {                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 34, 'vulberta_cnn': 67, 'vulberta_mlp': 71}
104         name = ff_jni_jstring_to_utf_chars(env, string, log_ctx);                                                 {'linevul': -1, 'codebert': -1, 'devign': 12, 'vulberta_cnn': 15, 'vulberta_mlp': 42}
106         (*env)->DeleteLocalRef(env, string);                                                                      {'linevul': -1, 'codebert': -1, 'devign': 8, 'vulberta_cnn': 17, 'vulberta_mlp': 17}
108         string = NULL;                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 14, 'vulberta_cnn': 46, 'vulberta_mlp': 70}
110     }                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': -1, 'vulberta_cnn': 65, 'vulberta_mlp': 69}
114     get_message_id = (*env)->GetMethodID(env, exception_class, "getMessage", "()Ljava/lang/String;");             {'linevul': -1, 'codebert': -1, 'devign': 53, 'vulberta_cnn': 64, 'vulberta_mlp': 5}
116     if ((*env)->ExceptionCheck(env)) {                                                                            {'linevul': -1, 'codebert': -1, 'devign': 1, 'vulberta_cnn': 23, 'vulberta_mlp': 23}
118         (*env)->ExceptionClear(env);                                                                              {'linevul': -1, 'codebert': -1, 'devign': 27, 'vulberta_cnn': 68, 'vulberta_mlp': 31}
120         av_log(log_ctx, AV_LOG_ERROR, "Could not find method java/lang/Throwable.getMessage()\n");                {'linevul': -1, 'codebert': -1, 'devign': -1, 'vulberta_cnn': 51, 'vulberta_mlp': 45}
122         ret = AVERROR_EXTERNAL;                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 19, 'vulberta_cnn': 74, 'vulberta_mlp': 68}
124         goto done;                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 36, 'vulberta_cnn': 72, 'vulberta_mlp': 12}
126     }                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': -1, 'vulberta_cnn': 60, 'vulberta_mlp': 4}
130     string = (*env)->CallObjectMethod(env, exception, get_message_id);                                            {'linevul': -1, 'codebert': -1, 'devign': 15, 'vulberta_cnn': 61, 'vulberta_mlp': 28}
132     if ((*env)->ExceptionCheck(env)) {                                                                            {'linevul': -1, 'codebert': -1, 'devign': 0, 'vulberta_cnn': 55, 'vulberta_mlp': 67}
134         (*env)->ExceptionClear(env);                                                                              {'linevul': -1, 'codebert': -1, 'devign': 26, 'vulberta_cnn': 57, 'vulberta_mlp': 30}
136         av_log(log_ctx, AV_LOG_ERROR, "Throwable.getMessage() threw an exception\n");                             {'linevul': -1, 'codebert': -1, 'devign': -1, 'vulberta_cnn': 85, 'vulberta_mlp': 20}
138         ret = AVERROR_EXTERNAL;                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 18, 'vulberta_cnn': 56, 'vulberta_mlp': 66}
140         goto done;                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 35, 'vulberta_cnn': 16, 'vulberta_mlp': 11}
142     }                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': -1, 'vulberta_cnn': 53, 'vulberta_mlp': 65}
146     if (string) {                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 33, 'vulberta_cnn': 63, 'vulberta_mlp': 64}
148         message = ff_jni_jstring_to_utf_chars(env, string, log_ctx);                                              {'linevul': -1, 'codebert': -1, 'devign': 11, 'vulberta_cnn': 0, 'vulberta_mlp': 41}
150         (*env)->DeleteLocalRef(env, string);                                                                      {'linevul': -1, 'codebert': -1, 'devign': 7, 'vulberta_cnn': 10, 'vulberta_mlp': 37}
152         string = NULL;                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 13, 'vulberta_cnn': 40, 'vulberta_mlp': 16}
154     }                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': -1, 'vulberta_cnn': 21, 'vulberta_mlp': 63}
158     if (name && message) {                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 48, 'vulberta_cnn': 76, 'vulberta_mlp': 62}
160         av_bprintf(&bp, "%s: %s", name, message);                                                                 {'linevul': -1, 'codebert': -1, 'devign': 47, 'vulberta_cnn': 81, 'vulberta_mlp': 61}
162     } else if (name && !message) {                                                                                {'linevul': -1, 'codebert': -1, 'devign': 25, 'vulberta_cnn': 66, 'vulberta_mlp': 60}
164         av_bprintf(&bp, "%s occurred", name);                                                                     {'linevul': -1, 'codebert': -1, 'devign': -1, 'vulberta_cnn': 26, 'vulberta_mlp': 59}
166     } else if (!name && message) {                                                                                {'linevul': -1, 'codebert': -1, 'devign': 24, 'vulberta_cnn': 43, 'vulberta_mlp': 58}
168         av_bprintf(&bp, "Exception: %s", message);                                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'vulberta_cnn': 62, 'vulberta_mlp': 40}
170     } else {                                                                                                      {'linevul': -1, 'codebert': -1, 'devign': -1, 'vulberta_cnn': 48, 'vulberta_mlp': 57}
172         av_log(log_ctx, AV_LOG_WARNING, "Could not retreive exception name and message\n");                       {'linevul': -1, 'codebert': -1, 'devign': -1, 'vulberta_cnn': 87, 'vulberta_mlp': 22}
174         av_bprintf(&bp, "Exception occurred");                                                                    {'linevul': -1, 'codebert': -1, 'devign': -1, 'vulberta_cnn': 5, 'vulberta_mlp': 36}
176     }                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': -1, 'vulberta_cnn': 58, 'vulberta_mlp': 56}
180     ret = av_bprint_finalize(&bp, error);                                                                         {'linevul': -1, 'codebert': -1, 'devign': 49, 'vulberta_cnn': 34, 'vulberta_mlp': 34}
182 done:                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 42, 'vulberta_cnn': 54, 'vulberta_mlp': 55}
186     av_free(name);                                                                                                {'linevul': -1, 'codebert': -1, 'devign': 60, 'vulberta_cnn': 14, 'vulberta_mlp': 54}
188     av_free(message);                                                                                             {'linevul': -1, 'codebert': -1, 'devign': 59, 'vulberta_cnn': 12, 'vulberta_mlp': 53}
192     if (class_class) {                                                                                            {'linevul': -1, 'codebert': -1, 'devign': 55, 'vulberta_cnn': 47, 'vulberta_mlp': 9}
194         (*env)->DeleteLocalRef(env, class_class);                                                                 {'linevul': -1, 'codebert': -1, 'devign': 46, 'vulberta_cnn': 9, 'vulberta_mlp': 25}
196     }                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': -1, 'vulberta_cnn': 45, 'vulberta_mlp': 52}
200     if (exception_class) {                                                                                        {'linevul': -1, 'codebert': -1, 'devign': 52, 'vulberta_cnn': 8, 'vulberta_mlp': 51}
202         (*env)->DeleteLocalRef(env, exception_class);                                                             {'linevul': -1, 'codebert': -1, 'devign': 45, 'vulberta_cnn': 1, 'vulberta_mlp': 39}
204     }                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': -1, 'vulberta_cnn': 73, 'vulberta_mlp': 50}
208     if (string) {                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': 32, 'vulberta_cnn': 6, 'vulberta_mlp': 49}
210         (*env)->DeleteLocalRef(env, string);                                                                      {'linevul': -1, 'codebert': -1, 'devign': 6, 'vulberta_cnn': 18, 'vulberta_mlp': 35}
212     }                                                                                                             {'linevul': -1, 'codebert': -1, 'devign': -1, 'vulberta_cnn': 32, 'vulberta_mlp': 48}
216     return ret;                                                                                                   {'linevul': -1, 'codebert': -1, 'devign': 50, 'vulberta_cnn': 38, 'vulberta_mlp': 47}
218 }                                                                                                                 {'linevul': -1, 'codebert': -1, 'devign': -1, 'vulberta_cnn': 50, 'vulberta_mlp': 46}
-----------------------
Highlighted lines: 
0 int ff_jni_exception_get_summary(JNIEnv *env, jthrowable exception, char **error, void *log_ctx)
48         goto done;
70     get_name_id = (*env)->GetMethodID(env, class_class, "getName", "()Ljava/lang/String;");
--------------------------------------------------------------------------------------------------------------
Example ids:  14300 project:  qemu commit id:  f80ac75d0e6e6e7481d61cdb86e5a741a442f100 Number of lines:  158 tground truth:  1
Original lines: 
Predicted Correctly by :  ['codebert', 'PLBART', 'devign', 'regvd', 'vulberta_cnn', 'vulberta_mlp']
0 static int rebuild_refcount_structure(BlockDriverState *bs,                                    {'codebert': 5, 'PLBART': 2, 'devign': 41, 'regvd': 35, 'vulberta_cnn': 56, 'vulberta_mlp': 10}
2                                       BdrvCheckResult *res,                                    {'codebert': 4, 'PLBART': 8, 'devign': 57, 'regvd': 111, 'vulberta_cnn': 13, 'vulberta_mlp': 38}
4                                       void **refcount_table,                                   {'codebert': 0, 'PLBART': 9, 'devign': 55, 'regvd': 90, 'vulberta_cnn': 68, 'vulberta_mlp': 8}
6                                       int64_t *nb_clusters)                                    {'codebert': 6, 'PLBART': 6, 'devign': 49, 'regvd': 93, 'vulberta_cnn': 48, 'vulberta_mlp': 115}
8 {                                                                                              {'codebert': 12, 'PLBART': 11, 'devign': -1, 'regvd': 137, 'vulberta_cnn': 69, 'vulberta_mlp': 114}
10     BDRVQcow2State *s = bs->opaque;                                                           {'codebert': 2, 'PLBART': 1, 'devign': 30, 'regvd': 102, 'vulberta_cnn': 115, 'vulberta_mlp': 113}
12     int64_t first_free_cluster = 0, reftable_offset = -1, cluster = 0;                        {'codebert': 11, 'PLBART': 0, 'devign': 27, 'regvd': 3, 'vulberta_cnn': 110, 'vulberta_mlp': 56}
14     int64_t refblock_offset, refblock_start, refblock_index;                                  {'codebert': 17, 'PLBART': 4, 'devign': 78, 'regvd': 46, 'vulberta_cnn': 2, 'vulberta_mlp': 112}
16     uint32_t reftable_size = 0;                                                               {'codebert': 14, 'PLBART': 5, 'devign': 39, 'regvd': 58, 'vulberta_cnn': 94, 'vulberta_mlp': 35}
18     uint64_t *on_disk_reftable = NULL;                                                        {'codebert': 10, 'PLBART': 3, 'devign': 45, 'regvd': 45, 'vulberta_cnn': 1, 'vulberta_mlp': 9}
20     void *on_disk_refblock;                                                                   {'codebert': 8, 'PLBART': 7, 'devign': 77, 'regvd': 87, 'vulberta_cnn': 12, 'vulberta_mlp': 111}
22     int ret = 0;                                                                              {'codebert': 9, 'PLBART': 10, 'devign': 76, 'regvd': 118, 'vulberta_cnn': 4, 'vulberta_mlp': 110}
24     struct {                                                                                  {'codebert': 13, 'PLBART': -1, 'devign': -1, 'regvd': 125, 'vulberta_cnn': 79, 'vulberta_mlp': 109}
26         uint64_t reftable_offset;                                                             {'codebert': 15, 'PLBART': -1, 'devign': -1, 'regvd': 79, 'vulberta_cnn': 80, 'vulberta_mlp': 108}
28         uint32_t reftable_clusters;                                                           {'codebert': 16, 'PLBART': -1, 'devign': -1, 'regvd': 33, 'vulberta_cnn': 18, 'vulberta_mlp': 107}
30     } QEMU_PACKED reftable_offset_and_clusters;                                               {'codebert': 3, 'PLBART': -1, 'devign': 74, 'regvd': 18, 'vulberta_cnn': 15, 'vulberta_mlp': 106}
34     qcow2_cache_empty(bs, s->refcount_block_cache);                                           {'codebert': 1, 'PLBART': -1, 'devign': 67, 'regvd': 15, 'vulberta_cnn': 101, 'vulberta_mlp': 30}
38 write_refblocks:                                                                              {'codebert': 7, 'PLBART': -1, 'devign': 61, 'regvd': 103, 'vulberta_cnn': 51, 'vulberta_mlp': 105}
40     for (; cluster < *nb_clusters; cluster++) {                                               {'codebert': -1, 'PLBART': -1, 'devign': 25, 'regvd': 57, 'vulberta_cnn': 99, 'vulberta_mlp': 14}
42         if (!s->get_refcount(*refcount_table, cluster)) {                                     {'codebert': -1, 'PLBART': -1, 'devign': 33, 'regvd': 7, 'vulberta_cnn': 43, 'vulberta_mlp': 17}
44             continue;                                                                         {'codebert': -1, 'PLBART': -1, 'devign': 81, 'regvd': 126, 'vulberta_cnn': 30, 'vulberta_mlp': 104}
46         }                                                                                     {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 157, 'vulberta_cnn': 19, 'vulberta_mlp': 103}
50         refblock_index = cluster >> s->refcount_block_bits;                                   {'codebert': -1, 'PLBART': -1, 'devign': 47, 'regvd': 19, 'vulberta_cnn': 9, 'vulberta_mlp': 0}
52         refblock_start = refblock_index << s->refcount_block_bits;                            {'codebert': -1, 'PLBART': -1, 'devign': 53, 'regvd': 44, 'vulberta_cnn': 52, 'vulberta_mlp': 50}
56         /* Don't allocate a cluster in a refblock already written to disk */                  {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 78, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
58         if (first_free_cluster < refblock_start) {                                            {'codebert': -1, 'PLBART': -1, 'devign': 48, 'regvd': 22, 'vulberta_cnn': 108, 'vulberta_mlp': 45}
60             first_free_cluster = refblock_start;                                              {'codebert': -1, 'PLBART': -1, 'devign': 72, 'regvd': 48, 'vulberta_cnn': 93, 'vulberta_mlp': 102}
62         }                                                                                     {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 156, 'vulberta_cnn': 31, 'vulberta_mlp': 101}
64         refblock_offset = alloc_clusters_imrt(bs, 1, refcount_table,                          {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 2, 'vulberta_cnn': 83, 'vulberta_mlp': 54}
66                                               nb_clusters, &first_free_cluster);              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 63, 'vulberta_cnn': 91, 'vulberta_mlp': 26}
68         if (refblock_offset < 0) {                                                            {'codebert': -1, 'PLBART': -1, 'devign': 38, 'regvd': 72, 'vulberta_cnn': 6, 'vulberta_mlp': 25}
70             fprintf(stderr, "ERROR allocating refblock: %s\n",                                {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 82, 'vulberta_cnn': 0, 'vulberta_mlp': 7}
72                     strerror(-refblock_offset));                                              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 59, 'vulberta_cnn': 109, 'vulberta_mlp': 44}
74             res->check_errors++;                                                              {'codebert': -1, 'PLBART': -1, 'devign': 24, 'regvd': 110, 'vulberta_cnn': 47, 'vulberta_mlp': 100}
76             ret = refblock_offset;                                                            {'codebert': -1, 'PLBART': -1, 'devign': 66, 'regvd': 89, 'vulberta_cnn': 17, 'vulberta_mlp': 99}
78             goto fail;                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 19, 'regvd': 135, 'vulberta_cnn': 10, 'vulberta_mlp': 13}
80         }                                                                                     {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 155, 'vulberta_cnn': 32, 'vulberta_mlp': 98}
84         if (reftable_size <= refblock_index) {                                                {'codebert': -1, 'PLBART': -1, 'devign': 20, 'regvd': 27, 'vulberta_cnn': 5, 'vulberta_mlp': 29}
86             uint32_t old_reftable_size = reftable_size;                                       {'codebert': -1, 'PLBART': -1, 'devign': 69, 'regvd': 70, 'vulberta_cnn': 53, 'vulberta_mlp': 20}
88             uint64_t *new_on_disk_reftable;                                                   {'codebert': -1, 'PLBART': -1, 'devign': 79, 'regvd': 61, 'vulberta_cnn': 67, 'vulberta_mlp': 41}
92             reftable_size = ROUND_UP((refblock_index + 1) * sizeof(uint64_t),                 {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 8, 'vulberta_cnn': 16, 'vulberta_mlp': 16}
94                                      s->cluster_size) / sizeof(uint64_t);                     {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 75, 'vulberta_cnn': 22, 'vulberta_mlp': 21}
96             new_on_disk_reftable = g_try_realloc(on_disk_reftable,                            {'codebert': -1, 'PLBART': -1, 'devign': 44, 'regvd': 62, 'vulberta_cnn': 70, 'vulberta_mlp': 39}
98                                                  reftable_size *                              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 98, 'vulberta_cnn': 35, 'vulberta_mlp': 24}
100                                                  sizeof(uint64_t));                          {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 101, 'vulberta_cnn': 45, 'vulberta_mlp': 23}
102             if (!new_on_disk_reftable) {                                                     {'codebert': -1, 'PLBART': -1, 'devign': 32, 'regvd': 76, 'vulberta_cnn': 77, 'vulberta_mlp': 97}
104                 res->check_errors++;                                                         {'codebert': -1, 'PLBART': -1, 'devign': 23, 'regvd': 109, 'vulberta_cnn': 100, 'vulberta_mlp': 96}
106                 ret = -ENOMEM;                                                               {'codebert': -1, 'PLBART': -1, 'devign': 75, 'regvd': 121, 'vulberta_cnn': 39, 'vulberta_mlp': 95}
108                 goto fail;                                                                   {'codebert': -1, 'PLBART': -1, 'devign': 18, 'regvd': 134, 'vulberta_cnn': 95, 'vulberta_mlp': 94}
110             }                                                                                {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 154, 'vulberta_cnn': 61, 'vulberta_mlp': 93}
112             on_disk_reftable = new_on_disk_reftable;                                         {'codebert': -1, 'PLBART': -1, 'devign': 43, 'regvd': 84, 'vulberta_cnn': 21, 'vulberta_mlp': 92}
116             memset(on_disk_reftable + old_reftable_size, 0,                                  {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 73, 'vulberta_cnn': 8, 'vulberta_mlp': 49}
118                    (reftable_size - old_reftable_size) * sizeof(uint64_t));                  {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 31, 'vulberta_cnn': 88, 'vulberta_mlp': 6}
122             /* The offset we have for the reftable is now no longer valid;                   {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 94, 'vulberta_cnn': 86, 'vulberta_mlp': 91}
124              * this will leak that range, but we can easily fix that by running              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 119, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
126              * a leak-fixing check after this rebuild operation */                           {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 112, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
128             reftable_offset = -1;                                                            {'codebert': -1, 'PLBART': -1, 'devign': 52, 'regvd': 83, 'vulberta_cnn': 42, 'vulberta_mlp': 34}
130         }                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 153, 'vulberta_cnn': 63, 'vulberta_mlp': 5}
132         on_disk_reftable[refblock_index] = refblock_offset;                                  {'codebert': -1, 'PLBART': -1, 'devign': 50, 'regvd': 51, 'vulberta_cnn': 87, 'vulberta_mlp': 37}
136         /* If this is apparently the last refblock (for now), try to squeeze the             {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 88, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
138          * reftable in */                                                                    {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 106, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
140         if (refblock_index == (*nb_clusters - 1) >> s->refcount_block_bits &&                {'codebert': -1, 'PLBART': -1, 'devign': 46, 'regvd': 4, 'vulberta_cnn': 7, 'vulberta_mlp': 57}
142             reftable_offset < 0)                                                             {'codebert': -1, 'PLBART': -1, 'devign': 10, 'regvd': 92, 'vulberta_cnn': 90, 'vulberta_mlp': 90}
144         {                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 136, 'vulberta_cnn': 58, 'vulberta_mlp': 4}
146             uint64_t reftable_clusters = size_to_clusters(s, reftable_size *                 {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 5, 'vulberta_cnn': 66, 'vulberta_mlp': 1}
148                                                           sizeof(uint64_t));                 {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 100, 'vulberta_cnn': 54, 'vulberta_mlp': 89}
150             reftable_offset = alloc_clusters_imrt(bs, reftable_clusters,                     {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 11, 'vulberta_cnn': 64, 'vulberta_mlp': 53}
152                                                   refcount_table, nb_clusters,               {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 54, 'vulberta_cnn': 102, 'vulberta_mlp': 19}
154                                                   &first_free_cluster);                      {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 96, 'vulberta_cnn': 92, 'vulberta_mlp': 33}
156             if (reftable_offset < 0) {                                                       {'codebert': -1, 'PLBART': -1, 'devign': 9, 'regvd': 68, 'vulberta_cnn': 24, 'vulberta_mlp': 43}
158                 fprintf(stderr, "ERROR allocating reftable: %s\n",                           {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 81, 'vulberta_cnn': 106, 'vulberta_mlp': 48}
160                         strerror(-reftable_offset));                                         {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 56, 'vulberta_cnn': 73, 'vulberta_mlp': 88}
162                 res->check_errors++;                                                         {'codebert': -1, 'PLBART': -1, 'devign': 22, 'regvd': 108, 'vulberta_cnn': 46, 'vulberta_mlp': 87}
164                 ret = reftable_offset;                                                       {'codebert': -1, 'PLBART': -1, 'devign': 37, 'regvd': 86, 'vulberta_cnn': 97, 'vulberta_mlp': 86}
166                 goto fail;                                                                   {'codebert': -1, 'PLBART': -1, 'devign': 17, 'regvd': 133, 'vulberta_cnn': 71, 'vulberta_mlp': 22}
168             }                                                                                {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 152, 'vulberta_cnn': 78, 'vulberta_mlp': 85}
170         }                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 151, 'vulberta_cnn': 57, 'vulberta_mlp': 84}
174         ret = qcow2_pre_write_overlap_check(bs, 0, refblock_offset,                          {'codebert': -1, 'PLBART': -1, 'devign': 65, 'regvd': 39, 'vulberta_cnn': 36, 'vulberta_mlp': 55}
176                                             s->cluster_size);                                {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 99, 'vulberta_cnn': 3, 'vulberta_mlp': 32}
178         if (ret < 0) {                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 4, 'regvd': 117, 'vulberta_cnn': 55, 'vulberta_mlp': 36}
180             fprintf(stderr, "ERROR writing refblock: %s\n", strerror(-ret));                 {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 41, 'vulberta_cnn': 76, 'vulberta_mlp': 83}
182             goto fail;                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 16, 'regvd': 132, 'vulberta_cnn': 34, 'vulberta_mlp': 82}
184         }                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 150, 'vulberta_cnn': 44, 'vulberta_mlp': 81}
188         /* The size of *refcount_table is always cluster-aligned, therefore the              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 50, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
190          * write operation will not overflow */                                              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 123, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
192         on_disk_refblock = (void *)((char *) *refcount_table +                               {'codebert': -1, 'PLBART': -1, 'devign': 54, 'regvd': 43, 'vulberta_cnn': 89, 'vulberta_mlp': 12}
194                                     refblock_index * s->cluster_size);                       {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 24, 'vulberta_cnn': 59, 'vulberta_mlp': 80}
198         ret = bdrv_write(bs->file, refblock_offset / BDRV_SECTOR_SIZE,                       {'codebert': -1, 'PLBART': -1, 'devign': 64, 'regvd': 32, 'vulberta_cnn': 62, 'vulberta_mlp': 79}
200                          on_disk_refblock, s->cluster_sectors);                              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 16, 'vulberta_cnn': 26, 'vulberta_mlp': 78}
202         if (ret < 0) {                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 3, 'regvd': 116, 'vulberta_cnn': 104, 'vulberta_mlp': 77}
204             fprintf(stderr, "ERROR writing refblock: %s\n", strerror(-ret));                 {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 40, 'vulberta_cnn': 114, 'vulberta_mlp': 76}
206             goto fail;                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 15, 'regvd': 131, 'vulberta_cnn': 11, 'vulberta_mlp': 75}
208         }                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 149, 'vulberta_cnn': 37, 'vulberta_mlp': 74}
212         /* Go to the end of this refblock */                                                 {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 105, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
214         cluster = refblock_start + s->refcount_block_size - 1;                               {'codebert': -1, 'PLBART': -1, 'devign': 68, 'regvd': 17, 'vulberta_cnn': 75, 'vulberta_mlp': 11}
216     }                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 148, 'vulberta_cnn': 50, 'vulberta_mlp': 73}
220     if (reftable_offset < 0) {                                                               {'codebert': -1, 'PLBART': -1, 'devign': 8, 'regvd': 67, 'vulberta_cnn': 38, 'vulberta_mlp': 72}
222         uint64_t post_refblock_start, reftable_clusters;                                     {'codebert': -1, 'PLBART': -1, 'devign': 80, 'regvd': 6, 'vulberta_cnn': 49, 'vulberta_mlp': 71}
226         post_refblock_start = ROUND_UP(*nb_clusters, s->refcount_block_size);                {'codebert': -1, 'PLBART': -1, 'devign': 58, 'regvd': 0, 'vulberta_cnn': 72, 'vulberta_mlp': 27}
228         reftable_clusters = size_to_clusters(s,                                              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 23, 'vulberta_cnn': 81, 'vulberta_mlp': 70}
230                                              reftable_size * sizeof(uint64_t));              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 38, 'vulberta_cnn': 85, 'vulberta_mlp': 3}
232         /* Not pretty but simple */                                                          {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 120, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
234         if (first_free_cluster < post_refblock_start) {                                      {'codebert': -1, 'PLBART': -1, 'devign': 29, 'regvd': 21, 'vulberta_cnn': 25, 'vulberta_mlp': 47}
236             first_free_cluster = post_refblock_start;                                        {'codebert': -1, 'PLBART': -1, 'devign': 42, 'regvd': 47, 'vulberta_cnn': 40, 'vulberta_mlp': 42}
238         }                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 147, 'vulberta_cnn': 28, 'vulberta_mlp': 69}
240         reftable_offset = alloc_clusters_imrt(bs, reftable_clusters,                         {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 10, 'vulberta_cnn': 112, 'vulberta_mlp': 52}
242                                               refcount_table, nb_clusters,                   {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 53, 'vulberta_cnn': 27, 'vulberta_mlp': 2}
244                                               &first_free_cluster);                          {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 95, 'vulberta_cnn': 41, 'vulberta_mlp': 31}
246         if (reftable_offset < 0) {                                                           {'codebert': -1, 'PLBART': -1, 'devign': 7, 'regvd': 66, 'vulberta_cnn': 105, 'vulberta_mlp': 68}
248             fprintf(stderr, "ERROR allocating reftable: %s\n",                               {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 80, 'vulberta_cnn': 113, 'vulberta_mlp': 46}
250                     strerror(-reftable_offset));                                             {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 55, 'vulberta_cnn': 96, 'vulberta_mlp': 67}
252             res->check_errors++;                                                             {'codebert': -1, 'PLBART': -1, 'devign': 21, 'regvd': 107, 'vulberta_cnn': 84, 'vulberta_mlp': 66}
254             ret = reftable_offset;                                                           {'codebert': -1, 'PLBART': -1, 'devign': 36, 'regvd': 85, 'vulberta_cnn': 65, 'vulberta_mlp': 65}
256             goto fail;                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 14, 'regvd': 130, 'vulberta_cnn': 103, 'vulberta_mlp': 64}
258         }                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 146, 'vulberta_cnn': 33, 'vulberta_mlp': 63}
262         goto write_refblocks;                                                                {'codebert': -1, 'PLBART': -1, 'devign': 82, 'regvd': 97, 'vulberta_cnn': 29, 'vulberta_mlp': 62}
264     }                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 145, 'vulberta_cnn': 82, 'vulberta_mlp': 61}
268     assert(on_disk_reftable);                                                                {'codebert': -1, 'PLBART': -1, 'devign': 73, 'regvd': 71, 'vulberta_cnn': 23, 'vulberta_mlp': 40}
272     for (refblock_index = 0; refblock_index < reftable_size; refblock_index++) {             {'codebert': -1, 'PLBART': -1, 'devign': 6, 'regvd': 13, 'vulberta_cnn': 74, 'vulberta_mlp': 18}
274         cpu_to_be64s(&on_disk_reftable[refblock_index]);                                     {'codebert': -1, 'PLBART': -1, 'devign': 63, 'regvd': 26, 'vulberta_cnn': 107, 'vulberta_mlp': 28}
276     }                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 144, 'vulberta_cnn': 60, 'vulberta_mlp': 60}
280     ret = qcow2_pre_write_overlap_check(bs, 0, reftable_offset,                              {'codebert': -1, 'PLBART': -1, 'devign': 35, 'regvd': 34, 'vulberta_cnn': 20, 'vulberta_mlp': 59}
282                                         reftable_size * sizeof(uint64_t));                   {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 37, 'vulberta_cnn': 98, 'vulberta_mlp': 15}
284     if (ret < 0) {                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 2, 'regvd': 115, 'vulberta_cnn': 14, 'vulberta_mlp': 58}
286         fprintf(stderr, "ERROR writing reftable: %s\n", strerror(-ret));                     {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 30, 'vulberta_cnn': 111, 'vulberta_mlp': 51}
288         goto fail;                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 13, 'regvd': 129, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
290     }                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 143, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
294     assert(reftable_size < INT_MAX / sizeof(uint64_t));                                      {'codebert': -1, 'PLBART': -1, 'devign': 70, 'regvd': 42, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
296     ret = bdrv_pwrite(bs->file, reftable_offset, on_disk_reftable,                           {'codebert': -1, 'PLBART': -1, 'devign': 34, 'regvd': 20, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
298                       reftable_size * sizeof(uint64_t));                                     {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 36, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
300     if (ret < 0) {                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 1, 'regvd': 114, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
302         fprintf(stderr, "ERROR writing reftable: %s\n", strerror(-ret));                     {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 29, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
304         goto fail;                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 12, 'regvd': 128, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
306     }                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 142, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
310     /* Enter new reftable into the image header */                                           {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 104, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
312     reftable_offset_and_clusters.reftable_offset = cpu_to_be64(reftable_offset);             {'codebert': -1, 'PLBART': -1, 'devign': 56, 'regvd': 9, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
314     reftable_offset_and_clusters.reftable_clusters =                                         {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 52, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
316         cpu_to_be32(size_to_clusters(s, reftable_size * sizeof(uint64_t)));                  {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
318     ret = bdrv_pwrite_sync(bs->file,                                                         {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 91, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
320                            offsetof(QCowHeader, refcount_table_offset),                      {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 60, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
322                            &reftable_offset_and_clusters,                                    {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 49, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
324                            sizeof(reftable_offset_and_clusters));                            {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 14, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
326     if (ret < 0) {                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 0, 'regvd': 113, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
328         fprintf(stderr, "ERROR setting reftable: %s\n", strerror(-ret));                     {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 28, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
330         goto fail;                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 11, 'regvd': 127, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
332     }                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 141, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
336     for (refblock_index = 0; refblock_index < reftable_size; refblock_index++) {             {'codebert': -1, 'PLBART': -1, 'devign': 5, 'regvd': 12, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
338         be64_to_cpus(&on_disk_reftable[refblock_index]);                                     {'codebert': -1, 'PLBART': -1, 'devign': 62, 'regvd': 25, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
340     }                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 140, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
342     s->refcount_table = on_disk_reftable;                                                    {'codebert': -1, 'PLBART': -1, 'devign': 59, 'regvd': 65, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
344     s->refcount_table_offset = reftable_offset;                                              {'codebert': -1, 'PLBART': -1, 'devign': 51, 'regvd': 64, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
346     s->refcount_table_size = reftable_size;                                                  {'codebert': -1, 'PLBART': -1, 'devign': 60, 'regvd': 74, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
348     update_max_refcount_table_index(s);                                                      {'codebert': -1, 'PLBART': -1, 'devign': 71, 'regvd': 77, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
352     return 0;                                                                                {'codebert': -1, 'PLBART': -1, 'devign': 28, 'regvd': 122, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
356 fail:                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 26, 'regvd': 138, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
358     g_free(on_disk_reftable);                                                                {'codebert': -1, 'PLBART': -1, 'devign': 40, 'regvd': 69, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
360     return ret;                                                                              {'codebert': -1, 'PLBART': -1, 'devign': 31, 'regvd': 124, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
362 }                                                                                            {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 139, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
-----------------------
Highlighted lines: 
4                                       void **refcount_table,
18     uint64_t *on_disk_reftable = NULL;
--------------------------------------------------------------------------------------------------------------
Example ids:  14612 project:  FFmpeg commit id:  c58d45e00489e07fd4606b64ad4095660494185b Number of lines:  127 tground truth:  1
Original lines: 
Predicted Correctly by :  ['linevul', 'codebert', 'devign', 'regvd', 'vulberta_cnn', 'vulberta_mlp']
0 static int film_read_header(AVFormatContext *s,                                                {'linevul': 16, 'codebert': 0, 'devign': 63, 'regvd': 47, 'vulberta_cnn': 95, 'vulberta_mlp': 28}
2                             AVFormatParameters *ap)                                            {'linevul': 0, 'codebert': 2, 'devign': 90, 'regvd': 105, 'vulberta_cnn': 54, 'vulberta_mlp': 98}
4 {                                                                                              {'linevul': 30, 'codebert': 4, 'devign': -1, 'regvd': 118, 'vulberta_cnn': 65, 'vulberta_mlp': 97}
6     FilmDemuxContext *film = s->priv_data;                                                     {'linevul': 11, 'codebert': 3, 'devign': 4, 'regvd': 36, 'vulberta_cnn': 23, 'vulberta_mlp': 96}
8     AVIOContext *pb = s->pb;                                                                   {'linevul': 18, 'codebert': 17, 'devign': 65, 'regvd': 77, 'vulberta_cnn': 40, 'vulberta_mlp': 47}
10     AVStream *st;                                                                             {'linevul': 27, 'codebert': 23, 'devign': 91, 'regvd': 101, 'vulberta_cnn': 79, 'vulberta_mlp': 95}
12     unsigned char scratch[256];                                                               {'linevul': 26, 'codebert': 22, 'devign': 29, 'regvd': 95, 'vulberta_cnn': 75, 'vulberta_mlp': 30}
14     int i;                                                                                    {'linevul': 28, 'codebert': 24, 'devign': 89, 'regvd': 111, 'vulberta_cnn': 56, 'vulberta_mlp': 94}
16     unsigned int data_offset;                                                                 {'linevul': 25, 'codebert': 20, 'devign': 58, 'regvd': 99, 'vulberta_cnn': 42, 'vulberta_mlp': 93}
18     unsigned int audio_frame_counter;                                                         {'linevul': 21, 'codebert': 12, 'devign': 57, 'regvd': 86, 'vulberta_cnn': 6, 'vulberta_mlp': 92}
22     film->sample_table = NULL;                                                                {'linevul': 22, 'codebert': 13, 'devign': 84, 'regvd': 64, 'vulberta_cnn': 68, 'vulberta_mlp': 36}
24     film->stereo_buffer = NULL;                                                               {'linevul': 20, 'codebert': 16, 'devign': 88, 'regvd': 59, 'vulberta_cnn': 64, 'vulberta_mlp': 18}
26     film->stereo_buffer_size = 0;                                                             {'linevul': 17, 'codebert': 14, 'devign': 18, 'regvd': 56, 'vulberta_cnn': 15, 'vulberta_mlp': 91}
30     /* load the main FILM header */                                                           {'linevul': 24, 'codebert': 19, 'devign': -1, 'regvd': 102, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
32     if (avio_read(pb, scratch, 16) != 16)                                                     {'linevul': 6, 'codebert': 8, 'devign': 7, 'regvd': 55, 'vulberta_cnn': 63, 'vulberta_mlp': 1}
34         return AVERROR(EIO);                                                                  {'linevul': 15, 'codebert': 15, 'devign': 36, 'regvd': 91, 'vulberta_cnn': 80, 'vulberta_mlp': 2}
36     data_offset = AV_RB32(&scratch[4]);                                                       {'linevul': 9, 'codebert': 5, 'devign': 83, 'regvd': 12, 'vulberta_cnn': 50, 'vulberta_mlp': 15}
38     film->version = AV_RB32(&scratch[8]);                                                     {'linevul': 10, 'codebert': 6, 'devign': 72, 'regvd': 3, 'vulberta_cnn': 98, 'vulberta_mlp': 9}
42     /* load the FDSC chunk */                                                                 {'linevul': 23, 'codebert': 9, 'devign': -1, 'regvd': 103, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
44     if (film->version == 0) {                                                                 {'linevul': 19, 'codebert': 10, 'devign': 56, 'regvd': 60, 'vulberta_cnn': 41, 'vulberta_mlp': 21}
46         /* special case for Lemmings .film files; 20-byte header */                           {'linevul': 2, 'codebert': 7, 'devign': -1, 'regvd': 62, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
48         if (avio_read(pb, scratch, 20) != 20)                                                 {'linevul': 4, 'codebert': 21, 'devign': 48, 'regvd': 49, 'vulberta_cnn': 16, 'vulberta_mlp': 7}
50             return AVERROR(EIO);                                                              {'linevul': 7, 'codebert': 18, 'devign': 35, 'regvd': 90, 'vulberta_cnn': 20, 'vulberta_mlp': 6}
52         /* make some assumptions about the audio parameters */                                {'linevul': 13, 'codebert': 11, 'devign': -1, 'regvd': 96, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
54         film->audio_type = CODEC_ID_PCM_S8;                                                   {'linevul': 1, 'codebert': 1, 'devign': 11, 'regvd': 25, 'vulberta_cnn': 43, 'vulberta_mlp': 12}
56         film->audio_samplerate = 22050;                                                       {'linevul': 8, 'codebert': -1, 'devign': 12, 'regvd': 26, 'vulberta_cnn': 9, 'vulberta_mlp': 90}
58         film->audio_channels = 1;                                                             {'linevul': 12, 'codebert': -1, 'devign': 70, 'regvd': 45, 'vulberta_cnn': 13, 'vulberta_mlp': 89}
60         film->audio_bits = 8;                                                                 {'linevul': 14, 'codebert': -1, 'devign': 80, 'regvd': 40, 'vulberta_cnn': 53, 'vulberta_mlp': 35}
62     } else {                                                                                  {'linevul': 29, 'codebert': -1, 'devign': -1, 'regvd': 114, 'vulberta_cnn': 49, 'vulberta_mlp': 88}
64         /* normal Saturn .cpk files; 32-byte header */                                        {'linevul': 5, 'codebert': -1, 'devign': -1, 'regvd': 79, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
66         if (avio_read(pb, scratch, 32) != 32)                                                 {'linevul': 3, 'codebert': -1, 'devign': 47, 'regvd': 52, 'vulberta_cnn': 81, 'vulberta_mlp': 32}
68             return AVERROR(EIO);                                                              {'linevul': -1, 'codebert': -1, 'devign': 34, 'regvd': 89, 'vulberta_cnn': 25, 'vulberta_mlp': 87}
70         film->audio_samplerate = AV_RB16(&scratch[24]);                                       {'linevul': -1, 'codebert': -1, 'devign': 73, 'regvd': 0, 'vulberta_cnn': 18, 'vulberta_mlp': 13}
72         film->audio_channels = scratch[21];                                                   {'linevul': -1, 'codebert': -1, 'devign': 40, 'regvd': 10, 'vulberta_cnn': 87, 'vulberta_mlp': 24}
74         film->audio_bits = scratch[22];                                                       {'linevul': -1, 'codebert': -1, 'devign': 54, 'regvd': 11, 'vulberta_cnn': 73, 'vulberta_mlp': 52}
76         if (scratch[23] == 2)                                                                 {'linevul': -1, 'codebert': -1, 'devign': 66, 'regvd': 78, 'vulberta_cnn': 17, 'vulberta_mlp': 42}
78             film->audio_type = CODEC_ID_ADPCM_ADX;                                            {'linevul': -1, 'codebert': -1, 'devign': 20, 'regvd': 31, 'vulberta_cnn': 93, 'vulberta_mlp': 86}
80         else if (film->audio_bits == 8)                                                       {'linevul': -1, 'codebert': -1, 'devign': 41, 'regvd': 19, 'vulberta_cnn': 8, 'vulberta_mlp': 23}
82             film->audio_type = CODEC_ID_PCM_S8;                                               {'linevul': -1, 'codebert': -1, 'devign': 10, 'regvd': 24, 'vulberta_cnn': 86, 'vulberta_mlp': 85}
84         else if (film->audio_bits == 16)                                                      {'linevul': -1, 'codebert': -1, 'devign': 62, 'regvd': 21, 'vulberta_cnn': 51, 'vulberta_mlp': 51}
86             film->audio_type = CODEC_ID_PCM_S16BE;                                            {'linevul': -1, 'codebert': -1, 'devign': 21, 'regvd': 28, 'vulberta_cnn': 58, 'vulberta_mlp': 84}
88         else                                                                                  {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 117, 'vulberta_cnn': 34, 'vulberta_mlp': 0}
90             film->audio_type = CODEC_ID_NONE;                                                 {'linevul': -1, 'codebert': -1, 'devign': 22, 'regvd': 42, 'vulberta_cnn': 33, 'vulberta_mlp': 10}
92     }                                                                                         {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 126, 'vulberta_cnn': 38, 'vulberta_mlp': 83}
96     if (AV_RB32(&scratch[0]) != FDSC_TAG)                                                     {'linevul': -1, 'codebert': -1, 'devign': 37, 'regvd': 20, 'vulberta_cnn': 35, 'vulberta_mlp': 17}
98         return AVERROR_INVALIDDATA;                                                           {'linevul': -1, 'codebert': -1, 'devign': 75, 'regvd': 98, 'vulberta_cnn': 59, 'vulberta_mlp': 4}
102     if (AV_RB32(&scratch[8]) == CVID_TAG) {                                                  {'linevul': -1, 'codebert': -1, 'devign': 69, 'regvd': 15, 'vulberta_cnn': 32, 'vulberta_mlp': 27}
104         film->video_type = CODEC_ID_CINEPAK;                                                 {'linevul': -1, 'codebert': -1, 'devign': 27, 'regvd': 58, 'vulberta_cnn': 11, 'vulberta_mlp': 57}
106     } else                                                                                   {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 115, 'vulberta_cnn': 57, 'vulberta_mlp': 82}
108         film->video_type = CODEC_ID_NONE;                                                    {'linevul': -1, 'codebert': -1, 'devign': 28, 'regvd': 61, 'vulberta_cnn': 4, 'vulberta_mlp': 46}
112     /* initialize the decoder streams */                                                     {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 106, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
114     if (film->video_type) {                                                                  {'linevul': -1, 'codebert': -1, 'devign': 44, 'regvd': 76, 'vulberta_cnn': 71, 'vulberta_mlp': 41}
116         st = av_new_stream(s, 0);                                                            {'linevul': -1, 'codebert': -1, 'devign': 24, 'regvd': 75, 'vulberta_cnn': 89, 'vulberta_mlp': 50}
118         if (!st)                                                                             {'linevul': -1, 'codebert': -1, 'devign': 16, 'regvd': 108, 'vulberta_cnn': 61, 'vulberta_mlp': 3}
120             return AVERROR(ENOMEM);                                                          {'linevul': -1, 'codebert': -1, 'devign': 51, 'regvd': 94, 'vulberta_cnn': 14, 'vulberta_mlp': 26}
122         film->video_stream_index = st->index;                                                {'linevul': -1, 'codebert': -1, 'devign': 71, 'regvd': 71, 'vulberta_cnn': 28, 'vulberta_mlp': 81}
124         st->codec->codec_type = AVMEDIA_TYPE_VIDEO;                                          {'linevul': -1, 'codebert': -1, 'devign': 81, 'regvd': 72, 'vulberta_cnn': 47, 'vulberta_mlp': 49}
126         st->codec->codec_id = film->video_type;                                              {'linevul': -1, 'codebert': -1, 'devign': 25, 'regvd': 68, 'vulberta_cnn': 3, 'vulberta_mlp': 80}
128         st->codec->codec_tag = 0;  /* no fourcc */                                           {'linevul': -1, 'codebert': -1, 'devign': 87, 'regvd': 69, 'vulberta_cnn': 88, 'vulberta_mlp': 40}
130         st->codec->width = AV_RB32(&scratch[16]);                                            {'linevul': -1, 'codebert': -1, 'devign': 78, 'regvd': 7, 'vulberta_cnn': 1, 'vulberta_mlp': 5}
132         st->codec->height = AV_RB32(&scratch[12]);                                           {'linevul': -1, 'codebert': -1, 'devign': 82, 'regvd': 8, 'vulberta_cnn': 84, 'vulberta_mlp': 38}
134     }                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 125, 'vulberta_cnn': 62, 'vulberta_mlp': 79}
138     if (film->audio_type) {                                                                  {'linevul': -1, 'codebert': -1, 'devign': 38, 'regvd': 57, 'vulberta_cnn': 76, 'vulberta_mlp': 78}
140         st = av_new_stream(s, 0);                                                            {'linevul': -1, 'codebert': -1, 'devign': 23, 'regvd': 74, 'vulberta_cnn': 83, 'vulberta_mlp': 48}
142         if (!st)                                                                             {'linevul': -1, 'codebert': -1, 'devign': 15, 'regvd': 107, 'vulberta_cnn': 91, 'vulberta_mlp': 77}
144             return AVERROR(ENOMEM);                                                          {'linevul': -1, 'codebert': -1, 'devign': 50, 'regvd': 93, 'vulberta_cnn': 82, 'vulberta_mlp': 76}
146         film->audio_stream_index = st->index;                                                {'linevul': -1, 'codebert': -1, 'devign': 60, 'regvd': 51, 'vulberta_cnn': 22, 'vulberta_mlp': 22}
148         st->codec->codec_type = AVMEDIA_TYPE_AUDIO;                                          {'linevul': -1, 'codebert': -1, 'devign': 86, 'regvd': 66, 'vulberta_cnn': 21, 'vulberta_mlp': 56}
150         st->codec->codec_id = film->audio_type;                                              {'linevul': -1, 'codebert': -1, 'devign': 14, 'regvd': 48, 'vulberta_cnn': 24, 'vulberta_mlp': 14}
152         st->codec->codec_tag = 1;                                                            {'linevul': -1, 'codebert': -1, 'devign': 85, 'regvd': 82, 'vulberta_cnn': 12, 'vulberta_mlp': 16}
154         st->codec->channels = film->audio_channels;                                          {'linevul': -1, 'codebert': -1, 'devign': 52, 'regvd': 44, 'vulberta_cnn': 44, 'vulberta_mlp': 25}
156         st->codec->sample_rate = film->audio_samplerate;                                     {'linevul': -1, 'codebert': -1, 'devign': 64, 'regvd': 38, 'vulberta_cnn': 0, 'vulberta_mlp': 55}
160         if (film->audio_type == CODEC_ID_ADPCM_ADX) {                                        {'linevul': -1, 'codebert': -1, 'devign': 3, 'regvd': 9, 'vulberta_cnn': 29, 'vulberta_mlp': 34}
162             st->codec->bits_per_coded_sample = 18 * 8 / 32;                                  {'linevul': -1, 'codebert': -1, 'devign': 76, 'regvd': 53, 'vulberta_cnn': 19, 'vulberta_mlp': 59}
164             st->codec->block_align = st->codec->channels * 18;                               {'linevul': -1, 'codebert': -1, 'devign': 67, 'regvd': 70, 'vulberta_cnn': 90, 'vulberta_mlp': 31}
166         } else {                                                                             {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 113, 'vulberta_cnn': 48, 'vulberta_mlp': 75}
168             st->codec->bits_per_coded_sample = film->audio_bits;                             {'linevul': -1, 'codebert': -1, 'devign': 55, 'regvd': 39, 'vulberta_cnn': 94, 'vulberta_mlp': 58}
170             st->codec->block_align = st->codec->channels *                                   {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 84, 'vulberta_cnn': 96, 'vulberta_mlp': 29}
172                 st->codec->bits_per_coded_sample / 8;                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 80, 'vulberta_cnn': 37, 'vulberta_mlp': 45}
174         }                                                                                    {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 124, 'vulberta_cnn': 45, 'vulberta_mlp': 74}
178         st->codec->bit_rate = st->codec->channels * st->codec->sample_rate *                 {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 81, 'vulberta_cnn': 2, 'vulberta_mlp': 44}
180             st->codec->bits_per_coded_sample;                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 85, 'vulberta_cnn': 70, 'vulberta_mlp': 33}
182     }                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 123, 'vulberta_cnn': 55, 'vulberta_mlp': 73}
186     /* load the sample table */                                                              {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 104, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
188     if (avio_read(pb, scratch, 16) != 16)                                                    {'linevul': -1, 'codebert': -1, 'devign': 6, 'regvd': 54, 'vulberta_cnn': 85, 'vulberta_mlp': 20}
190         return AVERROR(EIO);                                                                 {'linevul': -1, 'codebert': -1, 'devign': 33, 'regvd': 88, 'vulberta_cnn': 39, 'vulberta_mlp': 72}
192     if (AV_RB32(&scratch[0]) != STAB_TAG)                                                    {'linevul': -1, 'codebert': -1, 'devign': 61, 'regvd': 34, 'vulberta_cnn': 5, 'vulberta_mlp': 60}
194         return AVERROR_INVALIDDATA;                                                          {'linevul': -1, 'codebert': -1, 'devign': 74, 'regvd': 97, 'vulberta_cnn': 60, 'vulberta_mlp': 71}
196     film->base_clock = AV_RB32(&scratch[8]);                                                 {'linevul': -1, 'codebert': -1, 'devign': 77, 'regvd': 4, 'vulberta_cnn': 72, 'vulberta_mlp': 70}
198     film->sample_count = AV_RB32(&scratch[12]);                                              {'linevul': -1, 'codebert': -1, 'devign': 59, 'regvd': 5, 'vulberta_cnn': 7, 'vulberta_mlp': 37}
200     if(film->sample_count >= UINT_MAX / sizeof(film_sample))                                 {'linevul': -1, 'codebert': -1, 'devign': 53, 'regvd': 41, 'vulberta_cnn': 74, 'vulberta_mlp': 62}
202         return -1;                                                                           {'linevul': -1, 'codebert': -1, 'devign': 93, 'regvd': 109, 'vulberta_cnn': 77, 'vulberta_mlp': 11}
204     film->sample_table = av_malloc(film->sample_count * sizeof(film_sample));                {'linevul': -1, 'codebert': -1, 'devign': 17, 'regvd': 23, 'vulberta_cnn': 69, 'vulberta_mlp': 54}
206     if (!film->sample_table)                                                                 {'linevul': -1, 'codebert': -1, 'devign': 46, 'regvd': 73, 'vulberta_cnn': 67, 'vulberta_mlp': 39}
208         return AVERROR(ENOMEM);                                                              {'linevul': -1, 'codebert': -1, 'devign': 49, 'regvd': 92, 'vulberta_cnn': 26, 'vulberta_mlp': 69}
212     for(i=0; i<s->nb_streams; i++)                                                           {'linevul': -1, 'codebert': -1, 'devign': 1, 'regvd': 63, 'vulberta_cnn': 66, 'vulberta_mlp': 68}
214         av_set_pts_info(s->streams[i], 33, 1, film->base_clock);                             {'linevul': -1, 'codebert': -1, 'devign': 68, 'regvd': 33, 'vulberta_cnn': 46, 'vulberta_mlp': 53}
218     audio_frame_counter = 0;                                                                 {'linevul': -1, 'codebert': -1, 'devign': 13, 'regvd': 83, 'vulberta_cnn': 27, 'vulberta_mlp': 67}
220     for (i = 0; i < film->sample_count; i++) {                                               {'linevul': -1, 'codebert': -1, 'devign': 0, 'regvd': 32, 'vulberta_cnn': 78, 'vulberta_mlp': 61}
222         /* load the next sample record and transfer it to an internal struct */              {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 100, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
224         if (avio_read(pb, scratch, 16) != 16) {                                              {'linevul': -1, 'codebert': -1, 'devign': 5, 'regvd': 46, 'vulberta_cnn': 10, 'vulberta_mlp': 8}
226             av_free(film->sample_table);                                                     {'linevul': -1, 'codebert': -1, 'devign': 79, 'regvd': 50, 'vulberta_cnn': 52, 'vulberta_mlp': 19}
228             return AVERROR(EIO);                                                             {'linevul': -1, 'codebert': -1, 'devign': 32, 'regvd': 87, 'vulberta_cnn': 30, 'vulberta_mlp': 66}
230         }                                                                                    {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 122, 'vulberta_cnn': 31, 'vulberta_mlp': 65}
232         film->sample_table[i].sample_offset =                                                {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 67, 'vulberta_cnn': 36, 'vulberta_mlp': 64}
234             data_offset + AV_RB32(&scratch[0]);                                              {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 22, 'vulberta_cnn': 97, 'vulberta_mlp': 63}
236         film->sample_table[i].sample_size = AV_RB32(&scratch[4]);                            {'linevul': -1, 'codebert': -1, 'devign': 39, 'regvd': 2, 'vulberta_cnn': 92, 'vulberta_mlp': 43}
238         if (AV_RB32(&scratch[8]) == 0xFFFFFFFF) {                                            {'linevul': -1, 'codebert': -1, 'devign': 45, 'regvd': 14, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
240             film->sample_table[i].stream = film->audio_stream_index;                         {'linevul': -1, 'codebert': -1, 'devign': 26, 'regvd': 30, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
242             film->sample_table[i].pts = audio_frame_counter;                                 {'linevul': -1, 'codebert': -1, 'devign': 43, 'regvd': 29, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
244             film->sample_table[i].pts *= film->base_clock;                                   {'linevul': -1, 'codebert': -1, 'devign': 42, 'regvd': 37, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
246             film->sample_table[i].pts /= film->audio_samplerate;                             {'linevul': -1, 'codebert': -1, 'devign': 31, 'regvd': 27, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
250             if (film->audio_type == CODEC_ID_ADPCM_ADX)                                      {'linevul': -1, 'codebert': -1, 'devign': 2, 'regvd': 13, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
252                 audio_frame_counter += (film->sample_table[i].sample_size * 32 /             {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 16, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
254                     (18 * film->audio_channels));                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 18, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
256             else                                                                             {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 116, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
258                 audio_frame_counter += (film->sample_table[i].sample_size /                  {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 35, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
260                     (film->audio_channels * film->audio_bits / 8));                          {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 17, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
262         } else {                                                                             {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 112, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
264             film->sample_table[i].stream = film->video_stream_index;                         {'linevul': -1, 'codebert': -1, 'devign': 30, 'regvd': 43, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
266             film->sample_table[i].pts = AV_RB32(&scratch[8]) & 0x7FFFFFFF;                   {'linevul': -1, 'codebert': -1, 'devign': 8, 'regvd': 1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
268             film->sample_table[i].keyframe = (scratch[8] & 0x80) ? 0 : 1;                    {'linevul': -1, 'codebert': -1, 'devign': 9, 'regvd': 6, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
270         }                                                                                    {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 121, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
272     }                                                                                        {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 120, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
276     film->current_sample = 0;                                                                {'linevul': -1, 'codebert': -1, 'devign': 19, 'regvd': 65, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
280     return 0;                                                                                {'linevul': -1, 'codebert': -1, 'devign': 92, 'regvd': 110, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
282 }                                                                                            {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 119, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
-----------------------
Highlighted lines: 
32     if (avio_read(pb, scratch, 16) != 16)
38     film->version = AV_RB32(&scratch[8]);
130         st->codec->width = AV_RB32(&scratch[16]);
--------------------------------------------------------------------------------------------------------------
Example ids:  14745 project:  FFmpeg commit id:  0ebb523f072322972ea446616676fff32e9603c6 Number of lines:  46 tground truth:  1
Original lines: 
Predicted Correctly by :  ['codebert', 'devign', 'regvd', 'vulberta_cnn', 'vulberta_mlp']
0 static void asf_build_simple_index(AVFormatContext *s, int stream_index)                                {'codebert': 2, 'devign': 2, 'regvd': 15, 'vulberta_cnn': 34, 'vulberta_mlp': 36}
2 {                                                                                                       {'codebert': 18, 'devign': 100, 'regvd': 39, 'vulberta_cnn': 18, 'vulberta_mlp': 17}
4     ff_asf_guid g;                                                                                      {'codebert': 6, 'devign': 34, 'regvd': 30, 'vulberta_cnn': 16, 'vulberta_mlp': 30}
6     ASFContext *asf     = s->priv_data;                                                                 {'codebert': 9, 'devign': 32, 'regvd': 22, 'vulberta_cnn': 5, 'vulberta_mlp': 39}
8     int64_t current_pos = avio_tell(s->pb);                                                             {'codebert': 5, 'devign': 26, 'regvd': 7, 'vulberta_cnn': 23, 'vulberta_mlp': 38}
10     int i;                                                                                             {'codebert': 19, 'devign': 36, 'regvd': 36, 'vulberta_cnn': 22, 'vulberta_mlp': 43}
14     avio_seek(s->pb, asf->data_object_offset + asf->data_object_size, SEEK_SET);                       {'codebert': 8, 'devign': 10, 'regvd': 0, 'vulberta_cnn': 11, 'vulberta_mlp': 27}
16     ff_get_guid(s->pb, &g);                                                                            {'codebert': 1, 'devign': 6, 'regvd': 6, 'vulberta_cnn': 8, 'vulberta_mlp': 21}
20     /* the data object can be followed by other top-level objects,                                     {'codebert': 15, 'devign': 18, 'regvd': 29, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
22      * skip them until the simple index object is reached */                                           {'codebert': 3, 'devign': 35, 'regvd': 32, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
24     while (ff_guidcmp(&g, &index_guid)) {                                                              {'codebert': 4, 'devign': 3, 'regvd': 21, 'vulberta_cnn': 24, 'vulberta_mlp': 37}
26         int64_t gsize = avio_rl64(s->pb);                                                              {'codebert': 10, 'devign': 28, 'regvd': 3, 'vulberta_cnn': 31, 'vulberta_mlp': 34}
28         if (gsize < 24 || s->pb->eof_reached) {                                                        {'codebert': 0, 'devign': 27, 'regvd': 18, 'vulberta_cnn': 29, 'vulberta_mlp': 19}
30             avio_seek(s->pb, current_pos, SEEK_SET);                                                   {'codebert': 11, 'devign': 8, 'regvd': 11, 'vulberta_cnn': 38, 'vulberta_mlp': 9}
32             return;                                                                                    {'codebert': 20, 'devign': 37, 'regvd': 37, 'vulberta_cnn': 25, 'vulberta_mlp': 42}
34         }                                                                                              {'codebert': 16, 'devign': 81, 'regvd': 45, 'vulberta_cnn': 14, 'vulberta_mlp': 16}
36         avio_skip(s->pb, gsize - 24);                                                                  {'codebert': 12, 'devign': 11, 'regvd': 9, 'vulberta_cnn': 36, 'vulberta_mlp': 24}
38         ff_get_guid(s->pb, &g);                                                                        {'codebert': 7, 'devign': 5, 'regvd': 5, 'vulberta_cnn': 21, 'vulberta_mlp': 20}
40     }                                                                                                  {'codebert': 17, 'devign': 77, 'regvd': 44, 'vulberta_cnn': 30, 'vulberta_mlp': 7}
44     {                                                                                                  {'codebert': 21, 'devign': 73, 'regvd': 38, 'vulberta_cnn': 17, 'vulberta_mlp': 6}
46         int64_t itime, last_pos = -1;                                                                  {'codebert': 13, 'devign': 13, 'regvd': 20, 'vulberta_cnn': 19, 'vulberta_mlp': 29}
48         int pct, ict;                                                                                  {'codebert': 14, 'devign': 16, 'regvd': 35, 'vulberta_cnn': 39, 'vulberta_mlp': 13}
50         int64_t av_unused gsize = avio_rl64(s->pb);                                                    {'codebert': -1, 'devign': 22, 'regvd': 2, 'vulberta_cnn': 1, 'vulberta_mlp': 15}
52         ff_get_guid(s->pb, &g);                                                                        {'codebert': -1, 'devign': 4, 'regvd': 4, 'vulberta_cnn': 33, 'vulberta_mlp': 32}
54         itime = avio_rl64(s->pb);                                                                      {'codebert': -1, 'devign': 29, 'regvd': 12, 'vulberta_cnn': 28, 'vulberta_mlp': 33}
56         pct   = avio_rl32(s->pb);                                                                      {'codebert': -1, 'devign': 30, 'regvd': 17, 'vulberta_cnn': 4, 'vulberta_mlp': 35}
58         ict   = avio_rl32(s->pb);                                                                      {'codebert': -1, 'devign': 25, 'regvd': 16, 'vulberta_cnn': 32, 'vulberta_mlp': 26}
60         av_log(s, AV_LOG_DEBUG,                                                                        {'codebert': -1, 'devign': 9, 'regvd': 31, 'vulberta_cnn': 12, 'vulberta_mlp': 40}
62                "itime:0x%"PRIx64", pct:%d, ict:%d\n", itime, pct, ict);                                {'codebert': -1, 'devign': 14, 'regvd': 26, 'vulberta_cnn': 26, 'vulberta_mlp': 11}
66         for (i = 0; i < ict; i++) {                                                                    {'codebert': -1, 'devign': 20, 'regvd': 33, 'vulberta_cnn': 3, 'vulberta_mlp': 41}
68             int pktnum        = avio_rl32(s->pb);                                                      {'codebert': -1, 'devign': 24, 'regvd': 14, 'vulberta_cnn': 41, 'vulberta_mlp': 31}
70             int pktct         = avio_rl16(s->pb);                                                      {'codebert': -1, 'devign': 23, 'regvd': 13, 'vulberta_cnn': 37, 'vulberta_mlp': 23}
72             int64_t pos       = s->data_offset + s->packet_size * (int64_t)pktnum;                     {'codebert': -1, 'devign': 21, 'regvd': 8, 'vulberta_cnn': 2, 'vulberta_mlp': 18}
74             int64_t index_pts = FFMAX(av_rescale(itime, i, 10000) - asf->hdr.preroll, 0);              {'codebert': -1, 'devign': 0, 'regvd': 1, 'vulberta_cnn': 42, 'vulberta_mlp': 10}
78             if (pos != last_pos) {                                                                     {'codebert': -1, 'devign': 19, 'regvd': 28, 'vulberta_cnn': 7, 'vulberta_mlp': 22}
80                 av_log(s, AV_LOG_DEBUG, "pktnum:%d, pktct:%d  pts: %"PRId64"\n",                       {'codebert': -1, 'devign': 1, 'regvd': 19, 'vulberta_cnn': 40, 'vulberta_mlp': 8}
82                        pktnum, pktct, index_pts);                                                      {'codebert': -1, 'devign': 12, 'regvd': 27, 'vulberta_cnn': 6, 'vulberta_mlp': 12}
84                 av_add_index_entry(s->streams[stream_index], pos, index_pts,                           {'codebert': -1, 'devign': 15, 'regvd': 23, 'vulberta_cnn': 27, 'vulberta_mlp': 14}
86                                    s->packet_size, 0, AVINDEX_KEYFRAME);                               {'codebert': -1, 'devign': 17, 'regvd': 24, 'vulberta_cnn': 10, 'vulberta_mlp': 25}
88                 last_pos = pos;                                                                        {'codebert': -1, 'devign': 33, 'regvd': 34, 'vulberta_cnn': 13, 'vulberta_mlp': 28}
90             }                                                                                          {'codebert': -1, 'devign': 47, 'regvd': 43, 'vulberta_cnn': 15, 'vulberta_mlp': 5}
92         }                                                                                              {'codebert': -1, 'devign': 45, 'regvd': 42, 'vulberta_cnn': 9, 'vulberta_mlp': 4}
94         asf->index_read = ict > 0;                                                                     {'codebert': -1, 'devign': 31, 'regvd': 25, 'vulberta_cnn': 35, 'vulberta_mlp': 3}
96     }                                                                                                  {'codebert': -1, 'devign': 42, 'regvd': 41, 'vulberta_cnn': 20, 'vulberta_mlp': 2}
98     avio_seek(s->pb, current_pos, SEEK_SET);                                                           {'codebert': -1, 'devign': 7, 'regvd': 10, 'vulberta_cnn': 0, 'vulberta_mlp': 1}
100 }                                                                                                     {'codebert': -1, 'devign': 39, 'regvd': 40, 'vulberta_cnn': 43, 'vulberta_mlp': 0}
-----------------------
Highlighted lines: 
16     ff_get_guid(s->pb, &g);
38         ff_get_guid(s->pb, &g);
98     avio_seek(s->pb, current_pos, SEEK_SET);
--------------------------------------------------------------------------------------------------------------
Example ids:  16197 project:  FFmpeg commit id:  80b1e1c03d26ade05b0f53d0731aa7398d4ef6f9 Number of lines:  42 tground truth:  1
Original lines: 
Predicted Correctly by :  ['codebert', 'PLBART', 'devign', 'vulberta_cnn', 'vulberta_mlp']
0 static int huf_uncompress(GetByteContext *gb,                                 {'codebert': 0, 'PLBART': 7, 'devign': 7, 'vulberta_cnn': 3, 'vulberta_mlp': 31}
2                           uint16_t *dst, int dst_size)                        {'codebert': 3, 'PLBART': 6, 'devign': 8, 'vulberta_cnn': 12, 'vulberta_mlp': 8}
4 {                                                                             {'codebert': 23, 'PLBART': 14, 'devign': -1, 'vulberta_cnn': 18, 'vulberta_mlp': 35}
6     int32_t src_size, im, iM;                                                 {'codebert': 16, 'PLBART': 4, 'devign': 33, 'vulberta_cnn': 38, 'vulberta_mlp': 40}
8     uint32_t nBits;                                                           {'codebert': 21, 'PLBART': 8, 'devign': 29, 'vulberta_cnn': 20, 'vulberta_mlp': 39}
10     uint64_t *freq;                                                          {'codebert': 17, 'PLBART': 11, 'devign': 25, 'vulberta_cnn': 21, 'vulberta_mlp': 36}
12     HufDec *hdec;                                                            {'codebert': 4, 'PLBART': 10, 'devign': 26, 'vulberta_cnn': 6, 'vulberta_mlp': 25}
14     int ret, i;                                                              {'codebert': 20, 'PLBART': 9, 'devign': 32, 'vulberta_cnn': 32, 'vulberta_mlp': 41}
18     src_size = bytestream2_get_le32(gb);                                     {'codebert': 10, 'PLBART': 3, 'devign': 24, 'vulberta_cnn': 2, 'vulberta_mlp': 27}
20     im = bytestream2_get_le32(gb);                                           {'codebert': 8, 'PLBART': 1, 'devign': 20, 'vulberta_cnn': 28, 'vulberta_mlp': 38}
22     iM = bytestream2_get_le32(gb);                                           {'codebert': 11, 'PLBART': 2, 'devign': 21, 'vulberta_cnn': 4, 'vulberta_mlp': 30}
24     bytestream2_skip(gb, 4);                                                 {'codebert': 18, 'PLBART': 13, 'devign': 11, 'vulberta_cnn': 30, 'vulberta_mlp': 20}
26     nBits = bytestream2_get_le32(gb);                                        {'codebert': 13, 'PLBART': 5, 'devign': 22, 'vulberta_cnn': 36, 'vulberta_mlp': 24}
28     if (im < 0 || im >= HUF_ENCSIZE ||                                       {'codebert': 5, 'PLBART': 0, 'devign': -1, 'vulberta_cnn': 13, 'vulberta_mlp': 14}
30         iM < 0 || iM >= HUF_ENCSIZE ||                                       {'codebert': 6, 'PLBART': 12, 'devign': -1, 'vulberta_cnn': 19, 'vulberta_mlp': 0}
32         src_size < 0)                                                        {'codebert': 22, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 5, 'vulberta_mlp': 33}
34         return AVERROR_INVALIDDATA;                                          {'codebert': 14, 'PLBART': -1, 'devign': 9, 'vulberta_cnn': 17, 'vulberta_mlp': 32}
38     bytestream2_skip(gb, 4);                                                 {'codebert': 9, 'PLBART': -1, 'devign': 10, 'vulberta_cnn': 41, 'vulberta_mlp': 22}
42     freq = av_calloc(HUF_ENCSIZE, sizeof(*freq));                            {'codebert': 2, 'PLBART': -1, 'devign': 16, 'vulberta_cnn': 31, 'vulberta_mlp': 3}
44     hdec = av_calloc(HUF_DECSIZE, sizeof(*hdec));                            {'codebert': 1, 'PLBART': -1, 'devign': 15, 'vulberta_cnn': 39, 'vulberta_mlp': 9}
46     if (!freq || !hdec) {                                                    {'codebert': 15, 'PLBART': -1, 'devign': 12, 'vulberta_cnn': 34, 'vulberta_mlp': 21}
48         ret = AVERROR(ENOMEM);                                               {'codebert': 7, 'PLBART': -1, 'devign': 30, 'vulberta_cnn': 37, 'vulberta_mlp': 29}
50         goto fail;                                                           {'codebert': 12, 'PLBART': -1, 'devign': 5, 'vulberta_cnn': 15, 'vulberta_mlp': 13}
52     }                                                                        {'codebert': 19, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 23, 'vulberta_mlp': 12}
56     if ((ret = huf_unpack_enc_table(gb, im, iM, freq)) < 0)                  {'codebert': -1, 'PLBART': -1, 'devign': 14, 'vulberta_cnn': 1, 'vulberta_mlp': 26}
58         goto fail;                                                           {'codebert': -1, 'PLBART': -1, 'devign': 4, 'vulberta_cnn': 7, 'vulberta_mlp': 17}
62     if (nBits > 8 * bytestream2_get_bytes_left(gb)) {                        {'codebert': -1, 'PLBART': -1, 'devign': 19, 'vulberta_cnn': 16, 'vulberta_mlp': 19}
64         ret = AVERROR_INVALIDDATA;                                           {'codebert': -1, 'PLBART': -1, 'devign': 31, 'vulberta_cnn': 29, 'vulberta_mlp': 34}
66         goto fail;                                                           {'codebert': -1, 'PLBART': -1, 'devign': 3, 'vulberta_cnn': 8, 'vulberta_mlp': 18}
68     }                                                                        {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 22, 'vulberta_mlp': 11}
72     if ((ret = huf_build_dec_table(freq, im, iM, hdec)) < 0)                 {'codebert': -1, 'PLBART': -1, 'devign': 13, 'vulberta_cnn': 0, 'vulberta_mlp': 15}
74         goto fail;                                                           {'codebert': -1, 'PLBART': -1, 'devign': 2, 'vulberta_cnn': 25, 'vulberta_mlp': 4}
76     ret = huf_decode(freq, hdec, gb, nBits, iM, dst_size, dst);              {'codebert': -1, 'PLBART': -1, 'devign': 17, 'vulberta_cnn': 33, 'vulberta_mlp': 16}
80 fail:                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 6, 'vulberta_cnn': 27, 'vulberta_mlp': 10}
82     for (i = 0; i < HUF_DECSIZE; i++) {                                      {'codebert': -1, 'PLBART': -1, 'devign': 0, 'vulberta_cnn': 35, 'vulberta_mlp': 5}
84         if (hdec[i].p)                                                       {'codebert': -1, 'PLBART': -1, 'devign': 18, 'vulberta_cnn': 11, 'vulberta_mlp': 37}
86             av_freep(&hdec[i].p);                                            {'codebert': -1, 'PLBART': -1, 'devign': 1, 'vulberta_cnn': 26, 'vulberta_mlp': 28}
88     }                                                                        {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 14, 'vulberta_mlp': 7}
92     av_free(freq);                                                           {'codebert': -1, 'PLBART': -1, 'devign': 27, 'vulberta_cnn': 24, 'vulberta_mlp': 6}
94     av_free(hdec);                                                           {'codebert': -1, 'PLBART': -1, 'devign': 28, 'vulberta_cnn': 10, 'vulberta_mlp': 2}
98     return ret;                                                              {'codebert': -1, 'PLBART': -1, 'devign': 23, 'vulberta_cnn': 9, 'vulberta_mlp': 23}
100 }                                                                           {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 40, 'vulberta_mlp': 1}
-----------------------
Highlighted lines: 
0 static int huf_uncompress(GetByteContext *gb,
2                           uint16_t *dst, int dst_size)
--------------------------------------------------------------------------------------------------------------
Example ids:  17752 project:  FFmpeg commit id:  bf87908cd8da31e8f8fe75c06577170928ea70a8 Number of lines:  175 tground truth:  1
Original lines: 
Predicted Correctly by :  ['linevul', 'PLBART', 'devign', 'regvd', 'vulberta_cnn']
0 static int rm_read_audio_stream_info(AVFormatContext *s, AVIOContext *pb,                                            {'linevul': 5, 'PLBART': 0, 'devign': 43, 'regvd': 27, 'vulberta_cnn': 49}
2                                      AVStream *st, RMStream *ast, int read_all)                                      {'linevul': 0, 'PLBART': 4, 'devign': 19, 'regvd': 82, 'vulberta_cnn': 2}
4 {                                                                                                                    {'linevul': 25, 'PLBART': 13, 'devign': -1, 'regvd': 157, 'vulberta_cnn': 66}
6     char buf[256];                                                                                                   {'linevul': 23, 'PLBART': 9, 'devign': 118, 'regvd': 135, 'vulberta_cnn': 43}
8     uint32_t version;                                                                                                {'linevul': 20, 'PLBART': 8, 'devign': 136, 'regvd': 98, 'vulberta_cnn': 54}
10     int ret;                                                                                                        {'linevul': 24, 'PLBART': 12, 'devign': 137, 'regvd': 136, 'vulberta_cnn': 24}
14     /* ra type header */                                                                                            {'linevul': 22, 'PLBART': 11, 'devign': -1, 'regvd': 133, 'vulberta_cnn': -1}
16     version = avio_rb16(pb); /* version */                                                                          {'linevul': 14, 'PLBART': 3, 'devign': 38, 'regvd': 20, 'vulberta_cnn': 44}
18     if (version == 3) {                                                                                             {'linevul': 19, 'PLBART': 10, 'devign': 45, 'regvd': 100, 'vulberta_cnn': 85}
20         unsigned bytes_per_minute;                                                                                  {'linevul': 18, 'PLBART': 6, 'devign': 96, 'regvd': 112, 'vulberta_cnn': 93}
22         int header_size = avio_rb16(pb);                                                                            {'linevul': 10, 'PLBART': 2, 'devign': 44, 'regvd': 15, 'vulberta_cnn': 26}
24         int64_t startpos = avio_tell(pb);                                                                           {'linevul': 8, 'PLBART': 1, 'devign': 97, 'regvd': 11, 'vulberta_cnn': 70}
26         avio_skip(pb, 8);                                                                                           {'linevul': 15, 'PLBART': 7, 'devign': 135, 'regvd': 44, 'vulberta_cnn': 81}
28         bytes_per_minute = avio_rb16(pb);                                                                           {'linevul': 9, 'PLBART': 5, 'devign': 28, 'regvd': 26, 'vulberta_cnn': 40}
30         avio_skip(pb, 4);                                                                                           {'linevul': 16, 'PLBART': -1, 'devign': 134, 'regvd': 46, 'vulberta_cnn': 72}
32         rm_read_metadata(s, 0);                                                                                     {'linevul': 13, 'PLBART': -1, 'devign': 117, 'regvd': 60, 'vulberta_cnn': 10}
34         if ((startpos + header_size) >= avio_tell(pb) + 2) {                                                        {'linevul': 3, 'PLBART': -1, 'devign': 70, 'regvd': 5, 'vulberta_cnn': 65}
36             // fourcc (should always be "lpcJ")                                                                     {'linevul': 7, 'PLBART': -1, 'devign': -1, 'regvd': 113, 'vulberta_cnn': -1}
38             avio_r8(pb);                                                                                            {'linevul': 11, 'PLBART': -1, 'devign': 61, 'regvd': 74, 'vulberta_cnn': 15}
40             get_str8(pb, buf, sizeof(buf));                                                                         {'linevul': 6, 'PLBART': -1, 'devign': 101, 'regvd': 30, 'vulberta_cnn': 107}
42         }                                                                                                           {'linevul': 21, 'PLBART': -1, 'devign': -1, 'regvd': 174, 'vulberta_cnn': 60}
44         // Skip extra header crap (this should never happen)                                                        {'linevul': 12, 'PLBART': -1, 'devign': -1, 'regvd': 103, 'vulberta_cnn': -1}
46         if ((startpos + header_size) > avio_tell(pb))                                                               {'linevul': 4, 'PLBART': -1, 'devign': 109, 'regvd': 19, 'vulberta_cnn': 18}
48             avio_skip(pb, header_size + startpos - avio_tell(pb));                                                  {'linevul': 1, 'PLBART': -1, 'devign': 114, 'regvd': 2, 'vulberta_cnn': 75}
50         if (bytes_per_minute)                                                                                       {'linevul': 17, 'PLBART': -1, 'devign': 111, 'regvd': 94, 'vulberta_cnn': 68}
52             st->codec->bit_rate = 8LL * bytes_per_minute / 60;                                                      {'linevul': 2, 'PLBART': -1, 'devign': 6, 'regvd': 37, 'vulberta_cnn': 97}
54         st->codec->sample_rate = 8000;                                                                              {'linevul': -1, 'PLBART': -1, 'devign': 42, 'regvd': 64, 'vulberta_cnn': 90}
56         st->codec->channels = 1;                                                                                    {'linevul': -1, 'PLBART': -1, 'devign': 41, 'regvd': 105, 'vulberta_cnn': 51}
58         st->codec->channel_layout = AV_CH_LAYOUT_MONO;                                                              {'linevul': -1, 'PLBART': -1, 'devign': 40, 'regvd': 51, 'vulberta_cnn': 7}
60         st->codec->codec_type = AVMEDIA_TYPE_AUDIO;                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 33, 'regvd': 58, 'vulberta_cnn': 46}
62         st->codec->codec_id = AV_CODEC_ID_RA_144;                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 8, 'regvd': 50, 'vulberta_cnn': 1}
64         ast->deint_id = DEINT_ID_INT0;                                                                              {'linevul': -1, 'PLBART': -1, 'devign': 14, 'regvd': 81, 'vulberta_cnn': 103}
66     } else {                                                                                                        {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 147, 'vulberta_cnn': 92}
68         int flavor, sub_packet_h, coded_framesize, sub_packet_size;                                                 {'linevul': -1, 'PLBART': -1, 'devign': 142, 'regvd': 84, 'vulberta_cnn': 0}
70         int codecdata_length;                                                                                       {'linevul': -1, 'PLBART': -1, 'devign': 112, 'regvd': 108, 'vulberta_cnn': 73}
72         unsigned bytes_per_minute;                                                                                  {'linevul': -1, 'PLBART': -1, 'devign': 95, 'regvd': 111, 'vulberta_cnn': 82}
74         /* old version (4) */                                                                                       {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 109, 'vulberta_cnn': -1}
76         avio_skip(pb, 2); /* unused */                                                                              {'linevul': -1, 'PLBART': -1, 'devign': 131, 'regvd': 35, 'vulberta_cnn': 79}
78         avio_rb32(pb); /* .ra4 */                                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 76, 'regvd': 40, 'vulberta_cnn': 14}
80         avio_rb32(pb); /* data size */                                                                              {'linevul': -1, 'PLBART': -1, 'devign': 75, 'regvd': 31, 'vulberta_cnn': 34}
82         avio_rb16(pb); /* version2 */                                                                               {'linevul': -1, 'PLBART': -1, 'devign': 69, 'regvd': 32, 'vulberta_cnn': 77}
84         avio_rb32(pb); /* header size */                                                                            {'linevul': -1, 'PLBART': -1, 'devign': 74, 'regvd': 22, 'vulberta_cnn': 9}
86         flavor= avio_rb16(pb); /* add codec info / flavor */                                                        {'linevul': -1, 'PLBART': -1, 'devign': 31, 'regvd': 18, 'vulberta_cnn': 101}
88         ast->coded_framesize = coded_framesize = avio_rb32(pb); /* coded frame size */                              {'linevul': -1, 'PLBART': -1, 'devign': 16, 'regvd': 0, 'vulberta_cnn': 35}
90         avio_rb32(pb); /* ??? */                                                                                    {'linevul': -1, 'PLBART': -1, 'devign': 73, 'regvd': 43, 'vulberta_cnn': 50}
92         bytes_per_minute = avio_rb32(pb);                                                                           {'linevul': -1, 'PLBART': -1, 'devign': 30, 'regvd': 23, 'vulberta_cnn': 32}
94         if (version == 4) {                                                                                         {'linevul': -1, 'PLBART': -1, 'devign': 106, 'regvd': 99, 'vulberta_cnn': 96}
96             if (bytes_per_minute)                                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 110, 'regvd': 93, 'vulberta_cnn': 69}
98                 st->codec->bit_rate = 8LL * bytes_per_minute / 60;                                                  {'linevul': -1, 'PLBART': -1, 'devign': 5, 'regvd': 36, 'vulberta_cnn': 11}
100         }                                                                                                          {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 173, 'vulberta_cnn': 57}
102         avio_rb32(pb); /* ??? */                                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 72, 'regvd': 42, 'vulberta_cnn': 89}
104         ast->sub_packet_h = sub_packet_h = avio_rb16(pb); /* 1 */                                                  {'linevul': -1, 'PLBART': -1, 'devign': 15, 'regvd': 4, 'vulberta_cnn': 42}
106         st->codec->block_align= avio_rb16(pb); /* frame size */                                                    {'linevul': -1, 'PLBART': -1, 'devign': 2, 'regvd': 1, 'vulberta_cnn': 30}
108         ast->sub_packet_size = sub_packet_size = avio_rb16(pb); /* sub packet size */                              {'linevul': -1, 'PLBART': -1, 'devign': 11, 'regvd': 3, 'vulberta_cnn': 37}
110         avio_rb16(pb); /* ??? */                                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 68, 'regvd': 45, 'vulberta_cnn': 91}
112         if (version == 5) {                                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 54, 'regvd': 102, 'vulberta_cnn': 22}
114             avio_rb16(pb); avio_rb16(pb); avio_rb16(pb);                                                           {'linevul': -1, 'PLBART': -1, 'devign': 67, 'regvd': 65, 'vulberta_cnn': 23}
116         }                                                                                                          {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 172, 'vulberta_cnn': 62}
118         st->codec->sample_rate = avio_rb16(pb);                                                                    {'linevul': -1, 'PLBART': -1, 'devign': 3, 'regvd': 8, 'vulberta_cnn': 28}
120         avio_rb32(pb);                                                                                             {'linevul': -1, 'PLBART': -1, 'devign': 71, 'regvd': 62, 'vulberta_cnn': 80}
122         st->codec->channels = avio_rb16(pb);                                                                       {'linevul': -1, 'PLBART': -1, 'devign': 1, 'regvd': 7, 'vulberta_cnn': 45}
124         if (version == 5) {                                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 53, 'regvd': 101, 'vulberta_cnn': 100}
126             ast->deint_id = avio_rl32(pb);                                                                         {'linevul': -1, 'PLBART': -1, 'devign': 7, 'regvd': 6, 'vulberta_cnn': 87}
128             avio_read(pb, buf, 4);                                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 130, 'regvd': 41, 'vulberta_cnn': 12}
130             buf[4] = 0;                                                                                            {'linevul': -1, 'PLBART': -1, 'devign': 113, 'regvd': 134, 'vulberta_cnn': 99}
132         } else {                                                                                                   {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 146, 'vulberta_cnn': 52}
134             get_str8(pb, buf, sizeof(buf)); /* desc */                                                             {'linevul': -1, 'PLBART': -1, 'devign': 100, 'regvd': 14, 'vulberta_cnn': 21}
136             ast->deint_id = AV_RL32(buf);                                                                          {'linevul': -1, 'PLBART': -1, 'devign': 4, 'regvd': 17, 'vulberta_cnn': 94}
138             get_str8(pb, buf, sizeof(buf)); /* desc */                                                             {'linevul': -1, 'PLBART': -1, 'devign': 99, 'regvd': 13, 'vulberta_cnn': 105}
140         }                                                                                                          {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 171, 'vulberta_cnn': 88}
142         st->codec->codec_type = AVMEDIA_TYPE_AUDIO;                                                                {'linevul': -1, 'PLBART': -1, 'devign': 32, 'regvd': 57, 'vulberta_cnn': 16}
144         st->codec->codec_tag  = AV_RL32(buf);                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 36, 'regvd': 21, 'vulberta_cnn': 59}
146         st->codec->codec_id   = ff_codec_get_id(ff_rm_codec_tags,                                                  {'linevul': -1, 'PLBART': -1, 'devign': 10, 'regvd': 49, 'vulberta_cnn': 53}
148                                                 st->codec->codec_tag);                                             {'linevul': -1, 'PLBART': -1, 'devign': 64, 'regvd': 88, 'vulberta_cnn': 27}
152         switch (st->codec->codec_id) {                                                                             {'linevul': -1, 'PLBART': -1, 'devign': 23, 'regvd': 78, 'vulberta_cnn': 64}
154         case AV_CODEC_ID_AC3:                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 143, 'regvd': 122, 'vulberta_cnn': 58}
156             st->need_parsing = AVSTREAM_PARSE_FULL;                                                                {'linevul': -1, 'PLBART': -1, 'devign': 50, 'regvd': 91, 'vulberta_cnn': 78}
158             break;                                                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 89, 'regvd': 154, 'vulberta_cnn': 61}
160         case AV_CODEC_ID_RA_288:                                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 144, 'regvd': 119, 'vulberta_cnn': 31}
162             st->codec->extradata_size= 0;                                                                          {'linevul': -1, 'PLBART': -1, 'devign': 39, 'regvd': 86, 'vulberta_cnn': 56}
164             ast->audio_framesize = st->codec->block_align;                                                         {'linevul': -1, 'PLBART': -1, 'devign': 13, 'regvd': 67, 'vulberta_cnn': 4}
166             st->codec->block_align = coded_framesize;                                                              {'linevul': -1, 'PLBART': -1, 'devign': 35, 'regvd': 87, 'vulberta_cnn': 36}
168             break;                                                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 88, 'regvd': 153, 'vulberta_cnn': 33}
170         case AV_CODEC_ID_COOK:                                                                                     {'linevul': -1, 'PLBART': -1, 'devign': 140, 'regvd': 125, 'vulberta_cnn': 17}
172             st->need_parsing = AVSTREAM_PARSE_HEADERS;                                                             {'linevul': -1, 'PLBART': -1, 'devign': 47, 'regvd': 95, 'vulberta_cnn': 55}
174         case AV_CODEC_ID_ATRAC3:                                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 132, 'regvd': 121, 'vulberta_cnn': 84}
176         case AV_CODEC_ID_SIPR:                                                                                     {'linevul': -1, 'PLBART': -1, 'devign': 128, 'regvd': 124, 'vulberta_cnn': 104}
178             if (read_all) {                                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 78, 'regvd': 97, 'vulberta_cnn': 67}
180                 codecdata_length = 0;                                                                              {'linevul': -1, 'PLBART': -1, 'devign': 98, 'regvd': 104, 'vulberta_cnn': 29}
182             } else {                                                                                               {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 145, 'vulberta_cnn': 71}
184                 avio_rb16(pb); avio_r8(pb);                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 18, 'regvd': 53, 'vulberta_cnn': 102}
186                 if (version == 5)                                                                                  {'linevul': -1, 'PLBART': -1, 'devign': 52, 'regvd': 107, 'vulberta_cnn': 48}
188                     avio_r8(pb);                                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 60, 'regvd': 73, 'vulberta_cnn': 83}
190                 codecdata_length = avio_rb32(pb);                                                                  {'linevul': -1, 'PLBART': -1, 'devign': 25, 'regvd': 29, 'vulberta_cnn': 86}
192                 if(codecdata_length + FF_INPUT_BUFFER_PADDING_SIZE <= (unsigned)codecdata_length){                 {'linevul': -1, 'PLBART': -1, 'devign': 66, 'regvd': 56, 'vulberta_cnn': 98}
194                     av_log(s, AV_LOG_ERROR, "codecdata_length too large\n");                                       {'linevul': -1, 'PLBART': -1, 'devign': 120, 'regvd': 34, 'vulberta_cnn': 19}
196                     return -1;                                                                                     {'linevul': -1, 'PLBART': -1, 'devign': 94, 'regvd': 140, 'vulberta_cnn': 74}
198                 }                                                                                                  {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 170, 'vulberta_cnn': 47}
200             }                                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 169, 'vulberta_cnn': 38}
204             ast->audio_framesize = st->codec->block_align;                                                         {'linevul': -1, 'PLBART': -1, 'devign': 12, 'regvd': 66, 'vulberta_cnn': 76}
206             if (st->codec->codec_id == AV_CODEC_ID_SIPR) {                                                         {'linevul': -1, 'PLBART': -1, 'devign': 0, 'regvd': 24, 'vulberta_cnn': 106}
208                 if (flavor > 3) {                                                                                  {'linevul': -1, 'PLBART': -1, 'devign': 122, 'regvd': 118, 'vulberta_cnn': 3}
210                     av_log(s, AV_LOG_ERROR, "bad SIPR file flavor %d\n",                                           {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 90, 'vulberta_cnn': 5}
212                            flavor);                                                                                {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 126, 'vulberta_cnn': 13}
214                     return -1;                                                                                     {'linevul': -1, 'PLBART': -1, 'devign': 93, 'regvd': 139, 'vulberta_cnn': 25}
216                 }                                                                                                  {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 168, 'vulberta_cnn': 8}
218                 st->codec->block_align = ff_sipr_subpk_size[flavor];                                               {'linevul': -1, 'PLBART': -1, 'devign': 37, 'regvd': 61, 'vulberta_cnn': 108}
220             } else {                                                                                               {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 144, 'vulberta_cnn': 95}
222                 if(sub_packet_size <= 0){                                                                          {'linevul': -1, 'PLBART': -1, 'devign': 108, 'regvd': 83, 'vulberta_cnn': 6}
224                     av_log(s, AV_LOG_ERROR, "sub_packet_size is invalid\n");                                       {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 39, 'vulberta_cnn': 41}
226                     return -1;                                                                                     {'linevul': -1, 'PLBART': -1, 'devign': 92, 'regvd': 138, 'vulberta_cnn': 39}
228                 }                                                                                                  {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 167, 'vulberta_cnn': 63}
230                 st->codec->block_align = ast->sub_packet_size;                                                     {'linevul': -1, 'PLBART': -1, 'devign': 34, 'regvd': 85, 'vulberta_cnn': 20}
232             }                                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 166, 'vulberta_cnn': -1}
234             if ((ret = rm_read_extradata(pb, st->codec, codecdata_length)) < 0)                                    {'linevul': -1, 'PLBART': -1, 'devign': 29, 'regvd': 10, 'vulberta_cnn': -1}
236                 return ret;                                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 126, 'regvd': 143, 'vulberta_cnn': -1}
240             break;                                                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 87, 'regvd': 152, 'vulberta_cnn': -1}
242         case AV_CODEC_ID_AAC:                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 141, 'regvd': 123, 'vulberta_cnn': -1}
244             avio_rb16(pb); avio_r8(pb);                                                                            {'linevul': -1, 'PLBART': -1, 'devign': 17, 'regvd': 52, 'vulberta_cnn': -1}
246             if (version == 5)                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 51, 'regvd': 106, 'vulberta_cnn': -1}
248                 avio_r8(pb);                                                                                       {'linevul': -1, 'PLBART': -1, 'devign': 59, 'regvd': 72, 'vulberta_cnn': -1}
250             codecdata_length = avio_rb32(pb);                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 24, 'regvd': 28, 'vulberta_cnn': -1}
252             if(codecdata_length + FF_INPUT_BUFFER_PADDING_SIZE <= (unsigned)codecdata_length){                     {'linevul': -1, 'PLBART': -1, 'devign': 65, 'regvd': 55, 'vulberta_cnn': -1}
254                 av_log(s, AV_LOG_ERROR, "codecdata_length too large\n");                                           {'linevul': -1, 'PLBART': -1, 'devign': 119, 'regvd': 33, 'vulberta_cnn': -1}
256                 return -1;                                                                                         {'linevul': -1, 'PLBART': -1, 'devign': 91, 'regvd': 137, 'vulberta_cnn': -1}
258             }                                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 165, 'vulberta_cnn': -1}
260             if (codecdata_length >= 1) {                                                                           {'linevul': -1, 'PLBART': -1, 'devign': 90, 'regvd': 77, 'vulberta_cnn': -1}
262                 avio_r8(pb);                                                                                       {'linevul': -1, 'PLBART': -1, 'devign': 58, 'regvd': 71, 'vulberta_cnn': -1}
264                 if ((ret = rm_read_extradata(pb, st->codec, codecdata_length - 1)) < 0)                            {'linevul': -1, 'PLBART': -1, 'devign': 9, 'regvd': 9, 'vulberta_cnn': -1}
266                     return ret;                                                                                    {'linevul': -1, 'PLBART': -1, 'devign': 125, 'regvd': 142, 'vulberta_cnn': -1}
268             }                                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 164, 'vulberta_cnn': -1}
270             break;                                                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 86, 'regvd': 151, 'vulberta_cnn': -1}
272         default:                                                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 124, 'regvd': 156, 'vulberta_cnn': -1}
274             av_strlcpy(st->codec->codec_name, buf, sizeof(st->codec->codec_name));                                 {'linevul': -1, 'PLBART': -1, 'devign': 49, 'regvd': 16, 'vulberta_cnn': -1}
276         }                                                                                                          {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 163, 'vulberta_cnn': -1}
278         if (ast->deint_id == DEINT_ID_INT4 ||                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 22, 'regvd': 47, 'vulberta_cnn': -1}
280             ast->deint_id == DEINT_ID_GENR ||                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 21, 'regvd': 89, 'vulberta_cnn': -1}
282             ast->deint_id == DEINT_ID_SIPR) {                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 20, 'regvd': 63, 'vulberta_cnn': -1}
284             if (st->codec->block_align <= 0 ||                                                                     {'linevul': -1, 'PLBART': -1, 'devign': 46, 'regvd': 76, 'vulberta_cnn': -1}
286                 ast->audio_framesize * sub_packet_h > (unsigned)INT_MAX ||                                         {'linevul': -1, 'PLBART': -1, 'devign': 82, 'regvd': 48, 'vulberta_cnn': -1}
288                 ast->audio_framesize * sub_packet_h < st->codec->block_align)                                      {'linevul': -1, 'PLBART': -1, 'devign': 63, 'regvd': 75, 'vulberta_cnn': -1}
290                 return AVERROR_INVALIDDATA;                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 105, 'regvd': 117, 'vulberta_cnn': -1}
292             if (av_new_packet(&ast->pkt, ast->audio_framesize * sub_packet_h) < 0)                                 {'linevul': -1, 'PLBART': -1, 'devign': 62, 'regvd': 25, 'vulberta_cnn': -1}
294                 return AVERROR(ENOMEM);                                                                            {'linevul': -1, 'PLBART': -1, 'devign': 115, 'regvd': 110, 'vulberta_cnn': -1}
296         }                                                                                                          {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 162, 'vulberta_cnn': -1}
298         switch (ast->deint_id) {                                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 27, 'regvd': 54, 'vulberta_cnn': -1}
300         case DEINT_ID_INT4:                                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 138, 'regvd': 128, 'vulberta_cnn': -1}
302             if (ast->coded_framesize > ast->audio_framesize ||                                                     {'linevul': -1, 'PLBART': -1, 'devign': 81, 'regvd': 80, 'vulberta_cnn': -1}
304                 sub_packet_h <= 1 ||                                                                               {'linevul': -1, 'PLBART': -1, 'devign': 121, 'regvd': 120, 'vulberta_cnn': -1}
306                 ast->coded_framesize * sub_packet_h > (2 + (sub_packet_h & 1)) * ast->audio_framesize)             {'linevul': -1, 'PLBART': -1, 'devign': 80, 'regvd': 38, 'vulberta_cnn': -1}
308                 return AVERROR_INVALIDDATA;                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 104, 'regvd': 116, 'vulberta_cnn': -1}
310             break;                                                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 85, 'regvd': 150, 'vulberta_cnn': -1}
312         case DEINT_ID_GENR:                                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 139, 'regvd': 132, 'vulberta_cnn': -1}
314             if (ast->sub_packet_size <= 0 ||                                                                       {'linevul': -1, 'PLBART': -1, 'devign': 48, 'regvd': 79, 'vulberta_cnn': -1}
316                 ast->sub_packet_size > ast->audio_framesize)                                                       {'linevul': -1, 'PLBART': -1, 'devign': 79, 'regvd': 92, 'vulberta_cnn': -1}
318                 return AVERROR_INVALIDDATA;                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 103, 'regvd': 115, 'vulberta_cnn': -1}
320             break;                                                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 84, 'regvd': 149, 'vulberta_cnn': -1}
322         case DEINT_ID_SIPR:                                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 145, 'regvd': 131, 'vulberta_cnn': -1}
324         case DEINT_ID_INT0:                                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 133, 'regvd': 127, 'vulberta_cnn': -1}
326         case DEINT_ID_VBRS:                                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 129, 'regvd': 130, 'vulberta_cnn': -1}
328         case DEINT_ID_VBRF:                                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 127, 'regvd': 129, 'vulberta_cnn': -1}
330             break;                                                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 83, 'regvd': 148, 'vulberta_cnn': -1}
332         default:                                                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 123, 'regvd': 155, 'vulberta_cnn': -1}
334             av_log(s, AV_LOG_ERROR, "Unknown interleaver %X\n", ast->deint_id);                                    {'linevul': -1, 'PLBART': -1, 'devign': 26, 'regvd': 12, 'vulberta_cnn': -1}
336             return AVERROR_INVALIDDATA;                                                                            {'linevul': -1, 'PLBART': -1, 'devign': 102, 'regvd': 114, 'vulberta_cnn': -1}
338         }                                                                                                          {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 161, 'vulberta_cnn': -1}
342         if (read_all) {                                                                                            {'linevul': -1, 'PLBART': -1, 'devign': 77, 'regvd': 96, 'vulberta_cnn': -1}
344             avio_r8(pb);                                                                                           {'linevul': -1, 'PLBART': -1, 'devign': 57, 'regvd': 70, 'vulberta_cnn': -1}
346             avio_r8(pb);                                                                                           {'linevul': -1, 'PLBART': -1, 'devign': 56, 'regvd': 69, 'vulberta_cnn': -1}
348             avio_r8(pb);                                                                                           {'linevul': -1, 'PLBART': -1, 'devign': 55, 'regvd': 68, 'vulberta_cnn': -1}
350             rm_read_metadata(s, 0);                                                                                {'linevul': -1, 'PLBART': -1, 'devign': 116, 'regvd': 59, 'vulberta_cnn': -1}
352         }                                                                                                          {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 160, 'vulberta_cnn': -1}
354     }                                                                                                              {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 159, 'vulberta_cnn': -1}
356     return 0;                                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 107, 'regvd': 141, 'vulberta_cnn': -1}
358 }                                                                                                                  {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 158, 'vulberta_cnn': -1}
-----------------------
Highlighted lines: 
2                                      AVStream *st, RMStream *ast, int read_all)
--------------------------------------------------------------------------------------------------------------
Example ids:  18696 project:  qemu commit id:  f85da3081d001909929a19e530e69cea0487f00e Number of lines:  74 tground truth:  1
Original lines: 
Predicted Correctly by :  ['codebert', 'devign', 'regvd', 'vulberta_cnn', 'vulberta_mlp']
0 void sh4_translate_init(void)                                                                {'codebert': 2, 'devign': 155, 'regvd': 28, 'vulberta_cnn': 29, 'vulberta_mlp': 38}
2 {                                                                                            {'codebert': 12, 'devign': 153, 'regvd': 69, 'vulberta_cnn': 38, 'vulberta_mlp': 3}
4     int i;                                                                                   {'codebert': 11, 'devign': 65, 'regvd': 67, 'vulberta_cnn': 20, 'vulberta_mlp': 0}
6     static const char * const gregnames[24] = {                                              {'codebert': 1, 'devign': 59, 'regvd': 14, 'vulberta_cnn': 49, 'vulberta_mlp': 40}
8         "R0_BANK0", "R1_BANK0", "R2_BANK0", "R3_BANK0",                                      {'codebert': 5, 'devign': 58, 'regvd': 12, 'vulberta_cnn': 1, 'vulberta_mlp': 24}
10         "R4_BANK0", "R5_BANK0", "R6_BANK0", "R7_BANK0",                                     {'codebert': 6, 'devign': 57, 'regvd': 9, 'vulberta_cnn': 67, 'vulberta_mlp': 14}
12         "R8", "R9", "R10", "R11", "R12", "R13", "R14", "R15",                               {'codebert': 4, 'devign': 56, 'regvd': 8, 'vulberta_cnn': 7, 'vulberta_mlp': 19}
14         "R0_BANK1", "R1_BANK1", "R2_BANK1", "R3_BANK1",                                     {'codebert': 9, 'devign': 55, 'regvd': 11, 'vulberta_cnn': 50, 'vulberta_mlp': 21}
16         "R4_BANK1", "R5_BANK1", "R6_BANK1", "R7_BANK1"                                      {'codebert': 8, 'devign': 54, 'regvd': 10, 'vulberta_cnn': 8, 'vulberta_mlp': 29}
18     };                                                                                      {'codebert': 10, 'devign': 144, 'regvd': 71, 'vulberta_cnn': 61, 'vulberta_mlp': 18}
20     static const char * const fregnames[32] = {                                             {'codebert': 0, 'devign': 60, 'regvd': 13, 'vulberta_cnn': 46, 'vulberta_mlp': 30}
22          "FPR0_BANK0",  "FPR1_BANK0",  "FPR2_BANK0",  "FPR3_BANK0",                         {'codebert': 3, 'devign': 53, 'regvd': 7, 'vulberta_cnn': 71, 'vulberta_mlp': 45}
24          "FPR4_BANK0",  "FPR5_BANK0",  "FPR6_BANK0",  "FPR7_BANK0",                         {'codebert': 7, 'devign': 52, 'regvd': 4, 'vulberta_cnn': 66, 'vulberta_mlp': 48}
26          "FPR8_BANK0",  "FPR9_BANK0", "FPR10_BANK0", "FPR11_BANK0",                         {'codebert': -1, 'devign': 51, 'regvd': 3, 'vulberta_cnn': 41, 'vulberta_mlp': 72}
28         "FPR12_BANK0", "FPR13_BANK0", "FPR14_BANK0", "FPR15_BANK0",                         {'codebert': -1, 'devign': 50, 'regvd': 0, 'vulberta_cnn': 13, 'vulberta_mlp': 71}
30          "FPR0_BANK1",  "FPR1_BANK1",  "FPR2_BANK1",  "FPR3_BANK1",                         {'codebert': -1, 'devign': 49, 'regvd': 6, 'vulberta_cnn': 65, 'vulberta_mlp': 61}
32          "FPR4_BANK1",  "FPR5_BANK1",  "FPR6_BANK1",  "FPR7_BANK1",                         {'codebert': -1, 'devign': 48, 'regvd': 5, 'vulberta_cnn': 9, 'vulberta_mlp': 53}
34          "FPR8_BANK1",  "FPR9_BANK1", "FPR10_BANK1", "FPR11_BANK1",                         {'codebert': -1, 'devign': 47, 'regvd': 2, 'vulberta_cnn': 4, 'vulberta_mlp': 52}
36         "FPR12_BANK1", "FPR13_BANK1", "FPR14_BANK1", "FPR15_BANK1",                         {'codebert': -1, 'devign': 46, 'regvd': 1, 'vulberta_cnn': 23, 'vulberta_mlp': 70}
38     };                                                                                      {'codebert': -1, 'devign': 133, 'regvd': 70, 'vulberta_cnn': 22, 'vulberta_mlp': 17}
42     for (i = 0; i < 24; i++) {                                                              {'codebert': -1, 'devign': 61, 'regvd': 26, 'vulberta_cnn': 51, 'vulberta_mlp': 25}
44         cpu_gregs[i] = tcg_global_mem_new_i32(cpu_env,                                      {'codebert': -1, 'devign': 1, 'regvd': 21, 'vulberta_cnn': 56, 'vulberta_mlp': 8}
46                                               offsetof(CPUSH4State, gregs[i]),              {'codebert': -1, 'devign': 3, 'regvd': 60, 'vulberta_cnn': 40, 'vulberta_mlp': 56}
48                                               gregnames[i]);                                {'codebert': -1, 'devign': 63, 'regvd': 56, 'vulberta_cnn': 12, 'vulberta_mlp': 37}
50     }                                                                                       {'codebert': -1, 'devign': 125, 'regvd': -1, 'vulberta_cnn': 25, 'vulberta_mlp': 9}
52     memcpy(cpu_gregs + 24, cpu_gregs + 8, 8 * sizeof(TCGv));                                {'codebert': -1, 'devign': 4, 'regvd': 16, 'vulberta_cnn': 52, 'vulberta_mlp': 51}
56     cpu_pc = tcg_global_mem_new_i32(cpu_env,                                                {'codebert': -1, 'devign': 24, 'regvd': 54, 'vulberta_cnn': 59, 'vulberta_mlp': 1}
58                                     offsetof(CPUSH4State, pc), "PC");                       {'codebert': -1, 'devign': 45, 'regvd': 64, 'vulberta_cnn': 60, 'vulberta_mlp': 6}
60     cpu_sr = tcg_global_mem_new_i32(cpu_env,                                                {'codebert': -1, 'devign': 23, 'regvd': 53, 'vulberta_cnn': 54, 'vulberta_mlp': 2}
62                                     offsetof(CPUSH4State, sr), "SR");                       {'codebert': -1, 'devign': 44, 'regvd': 33, 'vulberta_cnn': 44, 'vulberta_mlp': 12}
64     cpu_sr_m = tcg_global_mem_new_i32(cpu_env,                                              {'codebert': -1, 'devign': 22, 'regvd': 52, 'vulberta_cnn': 69, 'vulberta_mlp': 5}
66                                       offsetof(CPUSH4State, sr_m), "SR_M");                 {'codebert': -1, 'devign': 43, 'regvd': 19, 'vulberta_cnn': 37, 'vulberta_mlp': 15}
68     cpu_sr_q = tcg_global_mem_new_i32(cpu_env,                                              {'codebert': -1, 'devign': 21, 'regvd': 51, 'vulberta_cnn': 48, 'vulberta_mlp': 10}
70                                       offsetof(CPUSH4State, sr_q), "SR_Q");                 {'codebert': -1, 'devign': 42, 'regvd': 18, 'vulberta_cnn': 35, 'vulberta_mlp': 69}
72     cpu_sr_t = tcg_global_mem_new_i32(cpu_env,                                              {'codebert': -1, 'devign': 20, 'regvd': 50, 'vulberta_cnn': 11, 'vulberta_mlp': 20}
74                                       offsetof(CPUSH4State, sr_t), "SR_T");                 {'codebert': -1, 'devign': 41, 'regvd': 17, 'vulberta_cnn': 2, 'vulberta_mlp': 36}
76     cpu_ssr = tcg_global_mem_new_i32(cpu_env,                                               {'codebert': -1, 'devign': 19, 'regvd': 49, 'vulberta_cnn': 10, 'vulberta_mlp': 28}
78                                      offsetof(CPUSH4State, ssr), "SSR");                    {'codebert': -1, 'devign': 40, 'regvd': 32, 'vulberta_cnn': 27, 'vulberta_mlp': 47}
80     cpu_spc = tcg_global_mem_new_i32(cpu_env,                                               {'codebert': -1, 'devign': 18, 'regvd': 48, 'vulberta_cnn': 0, 'vulberta_mlp': 50}
82                                      offsetof(CPUSH4State, spc), "SPC");                    {'codebert': -1, 'devign': 39, 'regvd': 63, 'vulberta_cnn': 42, 'vulberta_mlp': 68}
84     cpu_gbr = tcg_global_mem_new_i32(cpu_env,                                               {'codebert': -1, 'devign': 17, 'regvd': 47, 'vulberta_cnn': 21, 'vulberta_mlp': 27}
86                                      offsetof(CPUSH4State, gbr), "GBR");                    {'codebert': -1, 'devign': 38, 'regvd': 20, 'vulberta_cnn': 16, 'vulberta_mlp': 42}
88     cpu_vbr = tcg_global_mem_new_i32(cpu_env,                                               {'codebert': -1, 'devign': 16, 'regvd': 46, 'vulberta_cnn': 64, 'vulberta_mlp': 11}
90                                      offsetof(CPUSH4State, vbr), "VBR");                    {'codebert': -1, 'devign': 37, 'regvd': 23, 'vulberta_cnn': 5, 'vulberta_mlp': 59}
92     cpu_sgr = tcg_global_mem_new_i32(cpu_env,                                               {'codebert': -1, 'devign': 15, 'regvd': 45, 'vulberta_cnn': 19, 'vulberta_mlp': 44}
94                                      offsetof(CPUSH4State, sgr), "SGR");                    {'codebert': -1, 'devign': 36, 'regvd': 30, 'vulberta_cnn': 72, 'vulberta_mlp': 58}
96     cpu_dbr = tcg_global_mem_new_i32(cpu_env,                                               {'codebert': -1, 'devign': 14, 'regvd': 44, 'vulberta_cnn': 62, 'vulberta_mlp': 4}
98                                      offsetof(CPUSH4State, dbr), "DBR");                    {'codebert': -1, 'devign': 35, 'regvd': 22, 'vulberta_cnn': 55, 'vulberta_mlp': 26}
100     cpu_mach = tcg_global_mem_new_i32(cpu_env,                                             {'codebert': -1, 'devign': 13, 'regvd': 43, 'vulberta_cnn': 36, 'vulberta_mlp': 31}
102                                       offsetof(CPUSH4State, mach), "MACH");                {'codebert': -1, 'devign': 34, 'regvd': 62, 'vulberta_cnn': 26, 'vulberta_mlp': 57}
104     cpu_macl = tcg_global_mem_new_i32(cpu_env,                                             {'codebert': -1, 'devign': 12, 'regvd': 42, 'vulberta_cnn': 68, 'vulberta_mlp': 35}
106                                       offsetof(CPUSH4State, macl), "MACL");                {'codebert': -1, 'devign': 33, 'regvd': 61, 'vulberta_cnn': 70, 'vulberta_mlp': 60}
108     cpu_pr = tcg_global_mem_new_i32(cpu_env,                                               {'codebert': -1, 'devign': 11, 'regvd': 41, 'vulberta_cnn': 28, 'vulberta_mlp': 7}
110                                     offsetof(CPUSH4State, pr), "PR");                      {'codebert': -1, 'devign': 32, 'regvd': 25, 'vulberta_cnn': 58, 'vulberta_mlp': 32}
112     cpu_fpscr = tcg_global_mem_new_i32(cpu_env,                                            {'codebert': -1, 'devign': 10, 'regvd': 40, 'vulberta_cnn': 3, 'vulberta_mlp': 23}
114                                        offsetof(CPUSH4State, fpscr), "FPSCR");             {'codebert': -1, 'devign': 31, 'regvd': 24, 'vulberta_cnn': 32, 'vulberta_mlp': 67}
116     cpu_fpul = tcg_global_mem_new_i32(cpu_env,                                             {'codebert': -1, 'devign': 9, 'regvd': 39, 'vulberta_cnn': 17, 'vulberta_mlp': 34}
118                                       offsetof(CPUSH4State, fpul), "FPUL");                {'codebert': -1, 'devign': 30, 'regvd': 31, 'vulberta_cnn': 39, 'vulberta_mlp': 66}
122     cpu_flags = tcg_global_mem_new_i32(cpu_env,                                            {'codebert': -1, 'devign': 8, 'regvd': 38, 'vulberta_cnn': 18, 'vulberta_mlp': 49}
124 				       offsetof(CPUSH4State, flags), "_flags_");                                       {'codebert': -1, 'devign': 29, 'regvd': 27, 'vulberta_cnn': 47, 'vulberta_mlp': 65}
126     cpu_delayed_pc = tcg_global_mem_new_i32(cpu_env,                                       {'codebert': -1, 'devign': 7, 'regvd': 37, 'vulberta_cnn': 53, 'vulberta_mlp': 39}
128 					    offsetof(CPUSH4State, delayed_pc),                                                {'codebert': -1, 'devign': 28, 'regvd': 65, 'vulberta_cnn': 14, 'vulberta_mlp': 13}
130 					    "_delayed_pc_");                                                                  {'codebert': -1, 'devign': 82, 'regvd': 58, 'vulberta_cnn': 45, 'vulberta_mlp': 64}
132     cpu_delayed_cond = tcg_global_mem_new_i32(cpu_env,                                     {'codebert': -1, 'devign': 6, 'regvd': 36, 'vulberta_cnn': 43, 'vulberta_mlp': 33}
134                                               offsetof(CPUSH4State,                        {'codebert': -1, 'devign': 27, 'regvd': 68, 'vulberta_cnn': 24, 'vulberta_mlp': 46}
136                                                        delayed_cond),                      {'codebert': -1, 'devign': 26, 'regvd': 66, 'vulberta_cnn': 33, 'vulberta_mlp': 63}
138                                               "_delayed_cond_");                           {'codebert': -1, 'devign': 77, 'regvd': 57, 'vulberta_cnn': 57, 'vulberta_mlp': 16}
140     cpu_ldst = tcg_global_mem_new_i32(cpu_env,                                             {'codebert': -1, 'devign': 5, 'regvd': 35, 'vulberta_cnn': 31, 'vulberta_mlp': 22}
142 				      offsetof(CPUSH4State, ldst), "_ldst_");                                          {'codebert': -1, 'devign': 25, 'regvd': 29, 'vulberta_cnn': 30, 'vulberta_mlp': 43}
146     for (i = 0; i < 32; i++)                                                               {'codebert': -1, 'devign': 62, 'regvd': 34, 'vulberta_cnn': 6, 'vulberta_mlp': 54}
148         cpu_fregs[i] = tcg_global_mem_new_i32(cpu_env,                                     {'codebert': -1, 'devign': 0, 'regvd': 15, 'vulberta_cnn': 63, 'vulberta_mlp': 41}
150                                               offsetof(CPUSH4State, fregs[i]),             {'codebert': -1, 'devign': 2, 'regvd': 59, 'vulberta_cnn': 15, 'vulberta_mlp': 55}
152                                               fregnames[i]);                               {'codebert': -1, 'devign': 64, 'regvd': 55, 'vulberta_cnn': 34, 'vulberta_mlp': 62}
154 }                                                                                          {'codebert': -1, 'devign': 67, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
-----------------------
Highlighted lines: 
12         "R8", "R9", "R10", "R11", "R12", "R13", "R14", "R15",
--------------------------------------------------------------------------------------------------------------
Example ids:  18942 project:  qemu commit id:  7e5f90fa3ff32ea31548666d57a78005555ecf34 Number of lines:  73 tground truth:  1
Original lines: 
Predicted Correctly by :  ['linevul', 'PLBART', 'devign', 'regvd', 'vulberta_mlp']
0 int load_uimage(const char *filename, target_ulong *ep, target_ulong *loadaddr,               {'linevul': 2, 'PLBART': 0, 'devign': 10, 'regvd': 9, 'vulberta_mlp': 51}
2                 int *is_linux)                                                                {'linevul': 7, 'PLBART': 9, 'devign': 20, 'regvd': 34, 'vulberta_mlp': 38}
4 {                                                                                             {'linevul': 33, 'PLBART': 16, 'devign': -1, 'regvd': 64, 'vulberta_mlp': 22}
6     int fd;                                                                                   {'linevul': 28, 'PLBART': 10, 'devign': 53, 'regvd': 51, 'vulberta_mlp': 70}
8     int size;                                                                                 {'linevul': 29, 'PLBART': 15, 'devign': 48, 'regvd': 59, 'vulberta_mlp': 47}
10     uboot_image_header_t h;                                                                  {'linevul': 14, 'PLBART': 3, 'devign': 51, 'regvd': 27, 'vulberta_mlp': 37}
12     uboot_image_header_t *hdr = &h;                                                          {'linevul': 8, 'PLBART': 6, 'devign': 11, 'regvd': 13, 'vulberta_mlp': 36}
14     uint8_t *data = NULL;                                                                    {'linevul': 18, 'PLBART': 4, 'devign': 22, 'regvd': 26, 'vulberta_mlp': 35}
16     int ret = -1;                                                                            {'linevul': 24, 'PLBART': 11, 'devign': 46, 'regvd': 47, 'vulberta_mlp': 60}
20     fd = open(filename, O_RDONLY | O_BINARY);                                                {'linevul': 4, 'PLBART': 2, 'devign': 36, 'regvd': 11, 'vulberta_mlp': 24}
22     if (fd < 0)                                                                              {'linevul': 25, 'PLBART': 8, 'devign': 28, 'regvd': 44, 'vulberta_mlp': 12}
24         return -1;                                                                           {'linevul': 19, 'PLBART': 14, 'devign': 33, 'regvd': 50, 'vulberta_mlp': 8}
28     size = read(fd, hdr, sizeof(uboot_image_header_t));                                      {'linevul': 3, 'PLBART': 1, 'devign': 29, 'regvd': 0, 'vulberta_mlp': 23}
30     if (size < 0)                                                                            {'linevul': 26, 'PLBART': 7, 'devign': 32, 'regvd': 46, 'vulberta_mlp': 59}
32         goto out;                                                                            {'linevul': 21, 'PLBART': 12, 'devign': 9, 'regvd': 58, 'vulberta_mlp': 46}
36     bswap_uboot_header(hdr);                                                                 {'linevul': 10, 'PLBART': 5, 'devign': 54, 'regvd': 12, 'vulberta_mlp': 27}
40     if (hdr->ih_magic != IH_MAGIC)                                                           {'linevul': 9, 'PLBART': 13, 'devign': 42, 'regvd': 10, 'vulberta_mlp': 58}
42         goto out;                                                                            {'linevul': 20, 'PLBART': -1, 'devign': 8, 'regvd': 57, 'vulberta_mlp': 69}
46     /* TODO: Implement Multi-File images.  */                                                {'linevul': 11, 'PLBART': -1, 'devign': -1, 'regvd': 30, 'vulberta_mlp': -1}
48     if (hdr->ih_type == IH_TYPE_MULTI) {                                                     {'linevul': 5, 'PLBART': -1, 'devign': 38, 'regvd': 7, 'vulberta_mlp': 62}
50         fprintf(stderr, "Unable to load multi-file u-boot images\n");                        {'linevul': 1, 'PLBART': -1, 'devign': -1, 'regvd': 8, 'vulberta_mlp': 26}
52         goto out;                                                                            {'linevul': 23, 'PLBART': -1, 'devign': 7, 'regvd': 56, 'vulberta_mlp': 7}
54     }                                                                                        {'linevul': 32, 'PLBART': -1, 'devign': -1, 'regvd': 71, 'vulberta_mlp': 21}
58     switch (hdr->ih_comp) {                                                                  {'linevul': 16, 'PLBART': -1, 'devign': 16, 'regvd': 14, 'vulberta_mlp': 45}
60     case IH_COMP_NONE:                                                                       {'linevul': 17, 'PLBART': -1, 'devign': 56, 'regvd': 39, 'vulberta_mlp': 20}
62     case IH_COMP_GZIP:                                                                       {'linevul': 12, 'PLBART': -1, 'devign': 45, 'regvd': 38, 'vulberta_mlp': 9}
64         break;                                                                               {'linevul': 27, 'PLBART': -1, 'devign': 47, 'regvd': 63, 'vulberta_mlp': 68}
66     default:                                                                                 {'linevul': 30, 'PLBART': -1, 'devign': 55, 'regvd': 61, 'vulberta_mlp': 67}
68         fprintf(stderr,                                                                      {'linevul': 13, 'PLBART': -1, 'devign': -1, 'regvd': 42, 'vulberta_mlp': 54}
70                 "Unable to load u-boot images with compression type %d\n",                   {'linevul': 0, 'PLBART': -1, 'devign': -1, 'regvd': 24, 'vulberta_mlp': 30}
72                 hdr->ih_comp);                                                               {'linevul': 6, 'PLBART': -1, 'devign': 15, 'regvd': 23, 'vulberta_mlp': 50}
74         goto out;                                                                            {'linevul': 22, 'PLBART': -1, 'devign': 6, 'regvd': 55, 'vulberta_mlp': 19}
76     }                                                                                        {'linevul': 31, 'PLBART': -1, 'devign': -1, 'regvd': 70, 'vulberta_mlp': 18}
80     /* TODO: Check CPU type.  */                                                             {'linevul': 15, 'PLBART': -1, 'devign': -1, 'regvd': 40, 'vulberta_mlp': -1}
82     if (is_linux) {                                                                          {'linevul': -1, 'PLBART': -1, 'devign': 37, 'regvd': 29, 'vulberta_mlp': 5}
84         if (hdr->ih_type == IH_TYPE_KERNEL && hdr->ih_os == IH_OS_LINUX)                     {'linevul': -1, 'PLBART': -1, 'devign': 41, 'regvd': 1, 'vulberta_mlp': 25}
86             *is_linux = 1;                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 26, 'regvd': 32, 'vulberta_mlp': 34}
88         else                                                                                 {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 72, 'vulberta_mlp': 66}
90             *is_linux = 0;                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 25, 'regvd': 33, 'vulberta_mlp': 17}
92     }                                                                                        {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 69, 'vulberta_mlp': 3}
96     *ep = hdr->ih_ep;                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 30, 'regvd': 21, 'vulberta_mlp': 29}
98     data = qemu_malloc(hdr->ih_size);                                                        {'linevul': -1, 'PLBART': -1, 'devign': 14, 'regvd': 6, 'vulberta_mlp': 44}
100     if (!data)                                                                              {'linevul': -1, 'PLBART': -1, 'devign': 18, 'regvd': 43, 'vulberta_mlp': 65}
102         goto out;                                                                           {'linevul': -1, 'PLBART': -1, 'devign': 5, 'regvd': 54, 'vulberta_mlp': 43}
106     if (read(fd, data, hdr->ih_size) != hdr->ih_size) {                                     {'linevul': -1, 'PLBART': -1, 'devign': 2, 'regvd': 5, 'vulberta_mlp': 57}
108         fprintf(stderr, "Error reading file\n");                                            {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 25, 'vulberta_mlp': 32}
110         goto out;                                                                           {'linevul': -1, 'PLBART': -1, 'devign': 4, 'regvd': 53, 'vulberta_mlp': 42}
112     }                                                                                       {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 68, 'vulberta_mlp': 16}
116     if (hdr->ih_comp == IH_COMP_GZIP) {                                                     {'linevul': -1, 'PLBART': -1, 'devign': 0, 'regvd': 3, 'vulberta_mlp': 33}
118         uint8_t *compressed_data;                                                           {'linevul': -1, 'PLBART': -1, 'devign': 27, 'regvd': 28, 'vulberta_mlp': 10}
120         size_t max_bytes;                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 50, 'regvd': 48, 'vulberta_mlp': 53}
122         ssize_t bytes;                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 52, 'regvd': 49, 'vulberta_mlp': 64}
126         compressed_data = data;                                                             {'linevul': -1, 'PLBART': -1, 'devign': 21, 'regvd': 35, 'vulberta_mlp': 56}
128         max_bytes = UBOOT_MAX_GUNZIP_BYTES;                                                 {'linevul': -1, 'PLBART': -1, 'devign': 44, 'regvd': 31, 'vulberta_mlp': 28}
130         data = qemu_malloc(max_bytes);                                                      {'linevul': -1, 'PLBART': -1, 'devign': 19, 'regvd': 16, 'vulberta_mlp': 6}
134         bytes = gunzip(data, max_bytes, compressed_data, hdr->ih_size);                     {'linevul': -1, 'PLBART': -1, 'devign': 1, 'regvd': 2, 'vulberta_mlp': 52}
136         qemu_free(compressed_data);                                                         {'linevul': -1, 'PLBART': -1, 'devign': 12, 'regvd': 18, 'vulberta_mlp': 11}
138         if (bytes < 0) {                                                                    {'linevul': -1, 'PLBART': -1, 'devign': 31, 'regvd': 41, 'vulberta_mlp': 31}
140             fprintf(stderr, "Unable to decompress gzipped image!\n");                       {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 15, 'vulberta_mlp': 0}
142             goto out;                                                                       {'linevul': -1, 'PLBART': -1, 'devign': 3, 'regvd': 52, 'vulberta_mlp': 41}
144         }                                                                                   {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 67, 'vulberta_mlp': 15}
146         hdr->ih_size = bytes;                                                               {'linevul': -1, 'PLBART': -1, 'devign': 40, 'regvd': 19, 'vulberta_mlp': 49}
148     }                                                                                       {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 66, 'vulberta_mlp': 14}
152     cpu_physical_memory_write_rom(hdr->ih_load, data, hdr->ih_size);                        {'linevul': -1, 'PLBART': -1, 'devign': 17, 'regvd': 4, 'vulberta_mlp': 40}
156     if (loadaddr)                                                                           {'linevul': -1, 'PLBART': -1, 'devign': 39, 'regvd': 37, 'vulberta_mlp': 55}
158         *loadaddr = hdr->ih_load;                                                           {'linevul': -1, 'PLBART': -1, 'devign': 23, 'regvd': 17, 'vulberta_mlp': 48}
162     ret = hdr->ih_size;                                                                     {'linevul': -1, 'PLBART': -1, 'devign': 34, 'regvd': 20, 'vulberta_mlp': 61}
166 out:                                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 13, 'regvd': 62, 'vulberta_mlp': 13}
168     if (data)                                                                               {'linevul': -1, 'PLBART': -1, 'devign': 35, 'regvd': 45, 'vulberta_mlp': 63}
170         qemu_free(data);                                                                    {'linevul': -1, 'PLBART': -1, 'devign': 24, 'regvd': 22, 'vulberta_mlp': 1}
172     close(fd);                                                                              {'linevul': -1, 'PLBART': -1, 'devign': 43, 'regvd': 36, 'vulberta_mlp': 4}
174     return ret;                                                                             {'linevul': -1, 'PLBART': -1, 'devign': 49, 'regvd': 60, 'vulberta_mlp': 39}
176 }                                                                                           {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 65, 'vulberta_mlp': 2}
-----------------------
Highlighted lines: 
0 int load_uimage(const char *filename, target_ulong *ep, target_ulong *loadaddr,
28     size = read(fd, hdr, sizeof(uboot_image_header_t));
--------------------------------------------------------------------------------------------------------------
Example ids:  20345 project:  qemu commit id:  4e47e39ab0ded72c0af174131ecf49d588d66c12 Number of lines:  83 tground truth:  1
Original lines: 
Predicted Correctly by :  ['codebert', 'PLBART', 'devign', 'regvd', 'vulberta_mlp']
0 int x86_cpu_gdb_write_register(CPUState *cs, uint8_t *mem_buf, int n)                  {'codebert': 0, 'PLBART': 0, 'devign': 29, 'regvd': 8, 'vulberta_mlp': 48}
2 {                                                                                      {'codebert': 15, 'PLBART': 11, 'devign': -1, 'regvd': 76, 'vulberta_mlp': 14}
4     X86CPU *cpu = X86_CPU(cs);                                                         {'codebert': 3, 'PLBART': 5, 'devign': 71, 'regvd': 23, 'vulberta_mlp': 35}
6     CPUX86State *env = &cpu->env;                                                      {'codebert': 6, 'PLBART': 6, 'devign': 39, 'regvd': 24, 'vulberta_mlp': 49}
8     uint32_t tmp;                                                                      {'codebert': 8, 'PLBART': 9, 'devign': 38, 'regvd': 43, 'vulberta_mlp': 45}
12     if (n < CPU_NB_REGS) {                                                            {'codebert': 12, 'PLBART': 4, 'devign': 42, 'regvd': 26, 'vulberta_mlp': 21}
14         if (TARGET_LONG_BITS == 64 && env->hflags & HF_CS64_MASK) {                   {'codebert': 1, 'PLBART': 2, 'devign': 33, 'regvd': 6, 'vulberta_mlp': 47}
16             env->regs[gpr_map[n]] = ldtul_p(mem_buf);                                 {'codebert': 2, 'PLBART': 1, 'devign': 55, 'regvd': 4, 'vulberta_mlp': 29}
18             return sizeof(target_ulong);                                              {'codebert': 7, 'PLBART': 7, 'devign': 63, 'regvd': 25, 'vulberta_mlp': 36}
20         } else if (n < CPU_NB_REGS32) {                                               {'codebert': 13, 'PLBART': 3, 'devign': 35, 'regvd': 22, 'vulberta_mlp': 16}
22             n = gpr_map32[n];                                                         {'codebert': 14, 'PLBART': 8, 'devign': 53, 'regvd': 35, 'vulberta_mlp': 54}
24             env->regs[n] &= ~0xffffffffUL;                                            {'codebert': 11, 'PLBART': 10, 'devign': 43, 'regvd': 29, 'vulberta_mlp': 61}
26             env->regs[n] |= (uint32_t)ldl_p(mem_buf);                                 {'codebert': 5, 'PLBART': -1, 'devign': 30, 'regvd': 3, 'vulberta_mlp': 51}
28             return 4;                                                                 {'codebert': 16, 'PLBART': -1, 'devign': 27, 'regvd': 71, 'vulberta_mlp': 13}
30         }                                                                             {'codebert': 17, 'PLBART': -1, 'devign': -1, 'regvd': 82, 'vulberta_mlp': 12}
32     } else if (n >= IDX_FP_REGS && n < IDX_FP_REGS + 8) {                             {'codebert': 9, 'PLBART': -1, 'devign': 4, 'regvd': 10, 'vulberta_mlp': 10}
34 #ifdef USE_X86LDOUBLE                                                                 {'codebert': 4, 'PLBART': -1, 'devign': -1, 'regvd': 44, 'vulberta_mlp': 22}
36         /* FIXME: byteswap float values - after fixing fpregs layout. */              {'codebert': 10, 'PLBART': -1, 'devign': 70, 'regvd': 30, 'vulberta_mlp': -1}
38         memcpy(&env->fpregs[n - IDX_FP_REGS], mem_buf, 10);                           {'codebert': -1, 'PLBART': -1, 'devign': 28, 'regvd': 0, 'vulberta_mlp': 33}
40 #endif                                                                                {'codebert': -1, 'PLBART': -1, 'devign': 69, 'regvd': 73, 'vulberta_mlp': 27}
42         return 10;                                                                    {'codebert': -1, 'PLBART': -1, 'devign': 40, 'regvd': 57, 'vulberta_mlp': 44}
44     } else if (n >= IDX_XMM_REGS && n < IDX_XMM_REGS + CPU_NB_REGS) {                 {'codebert': -1, 'PLBART': -1, 'devign': 14, 'regvd': 7, 'vulberta_mlp': 31}
46         n -= IDX_XMM_REGS;                                                            {'codebert': -1, 'PLBART': -1, 'devign': 47, 'regvd': 34, 'vulberta_mlp': 20}
48         if (n < CPU_NB_REGS32 ||                                                      {'codebert': -1, 'PLBART': -1, 'devign': 34, 'regvd': 31, 'vulberta_mlp': 6}
50             (TARGET_LONG_BITS == 64 && env->hflags & HF_CS64_MASK)) {                 {'codebert': -1, 'PLBART': -1, 'devign': 32, 'regvd': 9, 'vulberta_mlp': 50}
52             env->xmm_regs[n].XMM_Q(0) = ldq_p(mem_buf);                               {'codebert': -1, 'PLBART': -1, 'devign': 44, 'regvd': 2, 'vulberta_mlp': 64}
54             env->xmm_regs[n].XMM_Q(1) = ldq_p(mem_buf + 8);                           {'codebert': -1, 'PLBART': -1, 'devign': 15, 'regvd': 1, 'vulberta_mlp': 63}
56             return 16;                                                                {'codebert': -1, 'PLBART': -1, 'devign': 62, 'regvd': 72, 'vulberta_mlp': 80}
58         }                                                                             {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 81, 'vulberta_mlp': 79}
60     } else {                                                                          {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 75, 'vulberta_mlp': 43}
62         switch (n) {                                                                  {'codebert': -1, 'PLBART': -1, 'devign': 68, 'regvd': 53, 'vulberta_mlp': 78}
64         case IDX_IP_REG:                                                              {'codebert': -1, 'PLBART': -1, 'devign': 60, 'regvd': 55, 'vulberta_mlp': 30}
66             if (TARGET_LONG_BITS == 64 && env->hflags & HF_CS64_MASK) {               {'codebert': -1, 'PLBART': -1, 'devign': 31, 'regvd': 5, 'vulberta_mlp': 59}
68                 env->eip = ldq_p(mem_buf);                                            {'codebert': -1, 'PLBART': -1, 'devign': 57, 'regvd': 21, 'vulberta_mlp': 77}
70                 return 8;                                                             {'codebert': -1, 'PLBART': -1, 'devign': 61, 'regvd': 59, 'vulberta_mlp': 76}
72             } else {                                                                  {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 74, 'vulberta_mlp': 1}
74                 env->eip &= ~0xffffffffUL;                                            {'codebert': -1, 'PLBART': -1, 'devign': 56, 'regvd': 41, 'vulberta_mlp': 17}
76                 env->eip |= (uint32_t)ldl_p(mem_buf);                                 {'codebert': -1, 'PLBART': -1, 'devign': 36, 'regvd': 11, 'vulberta_mlp': 58}
78                 return 4;                                                             {'codebert': -1, 'PLBART': -1, 'devign': 26, 'regvd': 70, 'vulberta_mlp': 18}
80             }                                                                         {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 80, 'vulberta_mlp': 11}
82         case IDX_FLAGS_REG:                                                           {'codebert': -1, 'PLBART': -1, 'devign': 59, 'regvd': 51, 'vulberta_mlp': 53}
84             env->eflags = ldl_p(mem_buf);                                             {'codebert': -1, 'PLBART': -1, 'devign': 52, 'regvd': 15, 'vulberta_mlp': 57}
86             return 4;                                                                 {'codebert': -1, 'PLBART': -1, 'devign': 25, 'regvd': 69, 'vulberta_mlp': 75}
90         case IDX_SEG_REGS:                                                            {'codebert': -1, 'PLBART': -1, 'devign': 37, 'regvd': 52, 'vulberta_mlp': 7}
92             return x86_cpu_gdb_load_seg(cpu, R_CS, mem_buf);                          {'codebert': -1, 'PLBART': -1, 'devign': 41, 'regvd': 14, 'vulberta_mlp': 38}
94         case IDX_SEG_REGS + 1:                                                        {'codebert': -1, 'PLBART': -1, 'devign': 13, 'regvd': 50, 'vulberta_mlp': 26}
96             return x86_cpu_gdb_load_seg(cpu, R_SS, mem_buf);                          {'codebert': -1, 'PLBART': -1, 'devign': 45, 'regvd': 19, 'vulberta_mlp': 60}
98         case IDX_SEG_REGS + 2:                                                        {'codebert': -1, 'PLBART': -1, 'devign': 11, 'regvd': 49, 'vulberta_mlp': 28}
100             return x86_cpu_gdb_load_seg(cpu, R_DS, mem_buf);                         {'codebert': -1, 'PLBART': -1, 'devign': 49, 'regvd': 18, 'vulberta_mlp': 55}
102         case IDX_SEG_REGS + 3:                                                       {'codebert': -1, 'PLBART': -1, 'devign': 9, 'regvd': 48, 'vulberta_mlp': 15}
104             return x86_cpu_gdb_load_seg(cpu, R_ES, mem_buf);                         {'codebert': -1, 'PLBART': -1, 'devign': 46, 'regvd': 17, 'vulberta_mlp': 52}
106         case IDX_SEG_REGS + 4:                                                       {'codebert': -1, 'PLBART': -1, 'devign': 10, 'regvd': 46, 'vulberta_mlp': 25}
108             return x86_cpu_gdb_load_seg(cpu, R_FS, mem_buf);                         {'codebert': -1, 'PLBART': -1, 'devign': 48, 'regvd': 16, 'vulberta_mlp': 46}
110         case IDX_SEG_REGS + 5:                                                       {'codebert': -1, 'PLBART': -1, 'devign': 12, 'regvd': 47, 'vulberta_mlp': 24}
112             return x86_cpu_gdb_load_seg(cpu, R_GS, mem_buf);                         {'codebert': -1, 'PLBART': -1, 'devign': 50, 'regvd': 12, 'vulberta_mlp': 37}
116         case IDX_FP_REGS + 8:                                                        {'codebert': -1, 'PLBART': -1, 'devign': 7, 'regvd': 42, 'vulberta_mlp': 9}
118             env->fpuc = ldl_p(mem_buf);                                              {'codebert': -1, 'PLBART': -1, 'devign': 66, 'regvd': 20, 'vulberta_mlp': 0}
120             return 4;                                                                {'codebert': -1, 'PLBART': -1, 'devign': 24, 'regvd': 68, 'vulberta_mlp': 74}
122         case IDX_FP_REGS + 9:                                                        {'codebert': -1, 'PLBART': -1, 'devign': 8, 'regvd': 45, 'vulberta_mlp': 4}
124             tmp = ldl_p(mem_buf);                                                    {'codebert': -1, 'PLBART': -1, 'devign': 72, 'regvd': 27, 'vulberta_mlp': 42}
126             env->fpstt = (tmp >> 11) & 7;                                            {'codebert': -1, 'PLBART': -1, 'devign': 64, 'regvd': 28, 'vulberta_mlp': 32}
128             env->fpus = tmp & ~0x3800;                                               {'codebert': -1, 'PLBART': -1, 'devign': 65, 'regvd': 33, 'vulberta_mlp': 62}
130             return 4;                                                                {'codebert': -1, 'PLBART': -1, 'devign': 23, 'regvd': 67, 'vulberta_mlp': 73}
132         case IDX_FP_REGS + 10: /* ftag */                                            {'codebert': -1, 'PLBART': -1, 'devign': 6, 'regvd': 32, 'vulberta_mlp': 8}
134             return 4;                                                                {'codebert': -1, 'PLBART': -1, 'devign': 22, 'regvd': 66, 'vulberta_mlp': 72}
136         case IDX_FP_REGS + 11: /* fiseg */                                           {'codebert': -1, 'PLBART': -1, 'devign': 5, 'regvd': 38, 'vulberta_mlp': 19}
138             return 4;                                                                {'codebert': -1, 'PLBART': -1, 'devign': 21, 'regvd': 65, 'vulberta_mlp': 41}
140         case IDX_FP_REGS + 12: /* fioff */                                           {'codebert': -1, 'PLBART': -1, 'devign': 3, 'regvd': 40, 'vulberta_mlp': 5}
142             return 4;                                                                {'codebert': -1, 'PLBART': -1, 'devign': 20, 'regvd': 64, 'vulberta_mlp': 71}
144         case IDX_FP_REGS + 13: /* foseg */                                           {'codebert': -1, 'PLBART': -1, 'devign': 0, 'regvd': 37, 'vulberta_mlp': 2}
146             return 4;                                                                {'codebert': -1, 'PLBART': -1, 'devign': 19, 'regvd': 63, 'vulberta_mlp': 70}
148         case IDX_FP_REGS + 14: /* fooff */                                           {'codebert': -1, 'PLBART': -1, 'devign': 2, 'regvd': 39, 'vulberta_mlp': 3}
150             return 4;                                                                {'codebert': -1, 'PLBART': -1, 'devign': 18, 'regvd': 62, 'vulberta_mlp': 69}
152         case IDX_FP_REGS + 15: /* fop */                                             {'codebert': -1, 'PLBART': -1, 'devign': 1, 'regvd': 36, 'vulberta_mlp': 23}
154             return 4;                                                                {'codebert': -1, 'PLBART': -1, 'devign': 17, 'regvd': 61, 'vulberta_mlp': 68}
158         case IDX_MXCSR_REG:                                                          {'codebert': -1, 'PLBART': -1, 'devign': 58, 'regvd': 54, 'vulberta_mlp': 56}
160             env->mxcsr = ldl_p(mem_buf);                                             {'codebert': -1, 'PLBART': -1, 'devign': 51, 'regvd': 13, 'vulberta_mlp': 34}
162             return 4;                                                                {'codebert': -1, 'PLBART': -1, 'devign': 16, 'regvd': 60, 'vulberta_mlp': 40}
164         }                                                                            {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 79, 'vulberta_mlp': 67}
166     }                                                                                {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 78, 'vulberta_mlp': 66}
168     /* Unrecognised register.  */                                                    {'codebert': -1, 'PLBART': -1, 'devign': 67, 'regvd': 56, 'vulberta_mlp': -1}
170     return 0;                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 54, 'regvd': 58, 'vulberta_mlp': 39}
172 }                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 77, 'vulberta_mlp': 65}
-----------------------
Highlighted lines: 
0 int x86_cpu_gdb_write_register(CPUState *cs, uint8_t *mem_buf, int n)
14         if (TARGET_LONG_BITS == 64 && env->hflags & HF_CS64_MASK) {
16             env->regs[gpr_map[n]] = ldtul_p(mem_buf);
--------------------------------------------------------------------------------------------------------------
Example ids:  20917 project:  FFmpeg commit id:  3dbc0ff9c3e6f6e0d08ea3d42cb33761bae084ba Number of lines:  251 tground truth:  1
Original lines: 
Predicted Correctly by :  ['linevul', 'codebert', 'PLBART', 'devign', 'regvd', 'vulberta_cnn', 'vulberta_mlp']
0 static int iff_read_header(AVFormatContext *s)                                                                                                  {'linevul': 12, 'codebert': 4, 'PLBART': 0, 'devign': 140, 'regvd': 86, 'vulberta_cnn': 118, 'vulberta_mlp': 54}
2 {                                                                                                                                               {'linevul': 32, 'codebert': 3, 'PLBART': 15, 'devign': -1, 'regvd': 234, 'vulberta_cnn': 94, 'vulberta_mlp': 121}
4     IffDemuxContext *iff = s->priv_data;                                                                                                        {'linevul': 6, 'codebert': 2, 'PLBART': 5, 'devign': 74, 'regvd': 85, 'vulberta_cnn': 117, 'vulberta_mlp': 53}
6     AVIOContext *pb = s->pb;                                                                                                                    {'linevul': 22, 'codebert': 16, 'PLBART': 3, 'devign': 61, 'regvd': 135, 'vulberta_cnn': 108, 'vulberta_mlp': 120}
8     AVStream *st;                                                                                                                               {'linevul': 28, 'codebert': 7, 'PLBART': 11, 'devign': 198, 'regvd': 183, 'vulberta_cnn': 97, 'vulberta_mlp': 119}
10     uint8_t *buf;                                                                                                                              {'linevul': 26, 'codebert': 9, 'PLBART': 6, 'devign': 197, 'regvd': 173, 'vulberta_cnn': 106, 'vulberta_mlp': 118}
12     uint32_t chunk_id, data_size;                                                                                                              {'linevul': 14, 'codebert': 11, 'PLBART': 1, 'devign': 23, 'regvd': 130, 'vulberta_cnn': 32, 'vulberta_mlp': 33}
14     uint32_t screenmode = 0, num, den;                                                                                                         {'linevul': 7, 'codebert': 10, 'PLBART': 7, 'devign': 184, 'regvd': 128, 'vulberta_cnn': 15, 'vulberta_mlp': 117}
16     unsigned transparency = 0;                                                                                                                 {'linevul': 29, 'codebert': 25, 'PLBART': 13, 'devign': 191, 'regvd': 185, 'vulberta_cnn': 16, 'vulberta_mlp': 116}
18     unsigned masking = 0; // no mask                                                                                                           {'linevul': 23, 'codebert': 24, 'PLBART': 9, 'devign': 192, 'regvd': 184, 'vulberta_cnn': 80, 'vulberta_mlp': 115}
20     uint8_t fmt[16];                                                                                                                           {'linevul': 25, 'codebert': 23, 'PLBART': 8, 'devign': 159, 'regvd': 153, 'vulberta_cnn': 114, 'vulberta_mlp': 10}
22     int fmt_size;                                                                                                                              {'linevul': 30, 'codebert': 22, 'PLBART': 14, 'devign': 199, 'regvd': 176, 'vulberta_cnn': 11, 'vulberta_mlp': 114}
26     st = avformat_new_stream(s, NULL);                                                                                                         {'linevul': 8, 'codebert': 12, 'PLBART': 2, 'devign': 35, 'regvd': 35, 'vulberta_cnn': 26, 'vulberta_mlp': 113}
28     if (!st)                                                                                                                                   {'linevul': 31, 'codebert': 1, 'PLBART': 12, 'devign': 114, 'regvd': 182, 'vulberta_cnn': 35, 'vulberta_mlp': 112}
30         return AVERROR(ENOMEM);                                                                                                                {'linevul': 10, 'codebert': 0, 'PLBART': 4, 'devign': 135, 'regvd': 168, 'vulberta_cnn': 14, 'vulberta_mlp': 32}
34     st->codec->channels = 1;                                                                                                                   {'linevul': 21, 'codebert': 13, 'PLBART': 10, 'devign': 107, 'regvd': 141, 'vulberta_cnn': 41, 'vulberta_mlp': 42}
36     st->codec->channel_layout = AV_CH_LAYOUT_MONO;                                                                                             {'linevul': 1, 'codebert': 19, 'PLBART': -1, 'devign': 59, 'regvd': 51, 'vulberta_cnn': 119, 'vulberta_mlp': 60}
38     avio_skip(pb, 8);                                                                                                                          {'linevul': 24, 'codebert': 20, 'PLBART': -1, 'devign': 195, 'regvd': 98, 'vulberta_cnn': 51, 'vulberta_mlp': 20}
40     // codec_tag used by ByteRun1 decoder to distinguish progressive (PBM) and interlaced (ILBM) content                                       {'linevul': 0, 'codebert': 8, 'PLBART': -1, 'devign': -1, 'regvd': 36, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
42     st->codec->codec_tag = avio_rl32(pb);                                                                                                      {'linevul': 2, 'codebert': 6, 'PLBART': -1, 'devign': 100, 'regvd': 10, 'vulberta_cnn': 17, 'vulberta_mlp': 2}
44     iff->bitmap_compression = -1;                                                                                                              {'linevul': 16, 'codebert': 17, 'PLBART': -1, 'devign': 189, 'regvd': 88, 'vulberta_cnn': 27, 'vulberta_mlp': 41}
46     iff->svx8_compression = -1;                                                                                                                {'linevul': 11, 'codebert': 18, 'PLBART': -1, 'devign': 42, 'regvd': 90, 'vulberta_cnn': 24, 'vulberta_mlp': 47}
48     iff->maud_bits = -1;                                                                                                                       {'linevul': 20, 'codebert': 15, 'PLBART': -1, 'devign': 155, 'regvd': 100, 'vulberta_cnn': 2, 'vulberta_mlp': 19}
50     iff->maud_compression = -1;                                                                                                                {'linevul': 15, 'codebert': 14, 'PLBART': -1, 'devign': 104, 'regvd': 96, 'vulberta_cnn': 10, 'vulberta_mlp': 46}
54     while(!url_feof(pb)) {                                                                                                                     {'linevul': 18, 'codebert': 5, 'PLBART': -1, 'devign': 105, 'regvd': 152, 'vulberta_cnn': 89, 'vulberta_mlp': 49}
56         uint64_t orig_pos;                                                                                                                     {'linevul': 17, 'codebert': 21, 'PLBART': -1, 'devign': 216, 'regvd': 177, 'vulberta_cnn': 23, 'vulberta_mlp': 111}
58         int res;                                                                                                                               {'linevul': 27, 'codebert': -1, 'PLBART': -1, 'devign': 201, 'regvd': 208, 'vulberta_cnn': 83, 'vulberta_mlp': 110}
60         const char *metadata_tag = NULL;                                                                                                       {'linevul': 9, 'codebert': -1, 'PLBART': -1, 'devign': 34, 'regvd': 113, 'vulberta_cnn': 33, 'vulberta_mlp': 109}
62         chunk_id = avio_rl32(pb);                                                                                                              {'linevul': 3, 'codebert': -1, 'PLBART': -1, 'devign': 22, 'regvd': 69, 'vulberta_cnn': 13, 'vulberta_mlp': 52}
64         data_size = avio_rb32(pb);                                                                                                             {'linevul': 4, 'codebert': -1, 'PLBART': -1, 'devign': 83, 'regvd': 44, 'vulberta_cnn': 72, 'vulberta_mlp': 108}
66         orig_pos = avio_tell(pb);                                                                                                              {'linevul': 5, 'codebert': -1, 'PLBART': -1, 'devign': 185, 'regvd': 70, 'vulberta_cnn': 107, 'vulberta_mlp': 107}
70         switch(chunk_id) {                                                                                                                     {'linevul': 13, 'codebert': -1, 'PLBART': -1, 'devign': 27, 'regvd': 165, 'vulberta_cnn': 84, 'vulberta_mlp': 106}
72         case ID_VHDR:                                                                                                                          {'linevul': 19, 'codebert': -1, 'PLBART': -1, 'devign': 212, 'regvd': 188, 'vulberta_cnn': 100, 'vulberta_mlp': 4}
74             st->codec->codec_type = AVMEDIA_TYPE_AUDIO;                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 30, 'regvd': 61, 'vulberta_cnn': 40, 'vulberta_mlp': 105}
78             if (data_size < 14)                                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 41, 'regvd': 133, 'vulberta_cnn': 12, 'vulberta_mlp': 9}
80                 return AVERROR_INVALIDDATA;                                                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 55, 'regvd': 164, 'vulberta_cnn': 76, 'vulberta_mlp': 104}
82             avio_skip(pb, 12);                                                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 82, 'regvd': 94, 'vulberta_cnn': 5, 'vulberta_mlp': 18}
84             st->codec->sample_rate = avio_rb16(pb);                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 95, 'regvd': 3, 'vulberta_cnn': 98, 'vulberta_mlp': 103}
86             if (data_size >= 16) {                                                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 98, 'regvd': 102, 'vulberta_cnn': 112, 'vulberta_mlp': 102}
88                 avio_skip(pb, 1);                                                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 150, 'regvd': 97, 'vulberta_cnn': 20, 'vulberta_mlp': 17}
90                 iff->svx8_compression = avio_r8(pb);                                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 38, 'regvd': 18, 'vulberta_cnn': 37, 'vulberta_mlp': 101}
92             }                                                                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': 53, 'vulberta_mlp': 100}
94             break;                                                                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 19, 'regvd': 227, 'vulberta_cnn': 96, 'vulberta_mlp': 99}
98         case ID_MHDR:                                                                                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 217, 'regvd': 192, 'vulberta_cnn': 101, 'vulberta_mlp': 26}
100             st->codec->codec_type = AVMEDIA_TYPE_AUDIO;                                                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 29, 'regvd': 60, 'vulberta_cnn': 93, 'vulberta_mlp': 57}
104             if (data_size < 32)                                                                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 123, 'regvd': 143, 'vulberta_cnn': 85, 'vulberta_mlp': 31}
106                 return AVERROR_INVALIDDATA;                                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 54, 'regvd': 163, 'vulberta_cnn': 95, 'vulberta_mlp': 25}
108             avio_skip(pb, 4);                                                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 138, 'regvd': 119, 'vulberta_cnn': 113, 'vulberta_mlp': 45}
110             iff->maud_bits = avio_rb16(pb);                                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 94, 'regvd': 12, 'vulberta_cnn': 19, 'vulberta_mlp': 61}
112             avio_skip(pb, 2);                                                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 132, 'regvd': 118, 'vulberta_cnn': 82, 'vulberta_mlp': 44}
114             num = avio_rb32(pb);                                                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 187, 'regvd': 93, 'vulberta_cnn': 111, 'vulberta_mlp': 11}
116             den = avio_rb16(pb);                                                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 182, 'regvd': 91, 'vulberta_cnn': 42, 'vulberta_mlp': 24}
118             if (!den)                                                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 121, 'regvd': 205, 'vulberta_cnn': 64, 'vulberta_mlp': 98}
120                 return AVERROR_INVALIDDATA;                                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 53, 'regvd': 162, 'vulberta_cnn': 67, 'vulberta_mlp': 97}
122             avio_skip(pb, 2);                                                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 131, 'regvd': 117, 'vulberta_cnn': 116, 'vulberta_mlp': 43}
124             st->codec->sample_rate = num / den;                                                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 141, 'regvd': 103, 'vulberta_cnn': 8, 'vulberta_mlp': 48}
126             st->codec->channels = avio_rb16(pb);                                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 43, 'regvd': 1, 'vulberta_cnn': 3, 'vulberta_mlp': 23}
128             iff->maud_compression = avio_rb16(pb);                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 69, 'regvd': 13, 'vulberta_cnn': 47, 'vulberta_mlp': 22}
130             if (st->codec->channels == 1)                                                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 78, 'regvd': 105, 'vulberta_cnn': 78, 'vulberta_mlp': 96}
132                 st->codec->channel_layout = AV_CH_LAYOUT_MONO;                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 58, 'regvd': 50, 'vulberta_cnn': 120, 'vulberta_mlp': 16}
134             else if (st->codec->channels == 2)                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 96, 'regvd': 125, 'vulberta_cnn': 48, 'vulberta_mlp': 95}
136                 st->codec->channel_layout = AV_CH_LAYOUT_STEREO;                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 72, 'regvd': 55, 'vulberta_cnn': 63, 'vulberta_mlp': 36}
138             break;                                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 18, 'regvd': 226, 'vulberta_cnn': 86, 'vulberta_mlp': 94}
142         case ID_ABIT:                                                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 220, 'regvd': 197, 'vulberta_cnn': 69, 'vulberta_mlp': 93}
144         case ID_BODY:                                                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 193, 'regvd': 201, 'vulberta_cnn': 45, 'vulberta_mlp': 92}
146         case ID_DBOD:                                                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 190, 'regvd': 200, 'vulberta_cnn': 61, 'vulberta_mlp': 91}
148         case ID_MDAT:                                                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 173, 'regvd': 196, 'vulberta_cnn': 21, 'vulberta_mlp': 90}
150             iff->body_pos = avio_tell(pb);                                                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 129, 'regvd': 24, 'vulberta_cnn': 50, 'vulberta_mlp': 30}
152             iff->body_end = iff->body_pos + data_size;                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 146, 'regvd': 104, 'vulberta_cnn': 110, 'vulberta_mlp': 29}
154             iff->body_size = data_size;                                                                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 113, 'regvd': 115, 'vulberta_cnn': 70, 'vulberta_mlp': 89}
156             break;                                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 17, 'regvd': 225, 'vulberta_cnn': 46, 'vulberta_mlp': 88}
160         case ID_CHAN:                                                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 209, 'regvd': 187, 'vulberta_cnn': 43, 'vulberta_mlp': 87}
162             if (data_size < 4)                                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 77, 'regvd': 149, 'vulberta_cnn': 71, 'vulberta_mlp': 8}
164                 return AVERROR_INVALIDDATA;                                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 52, 'regvd': 161, 'vulberta_cnn': 75, 'vulberta_mlp': 86}
166             if (avio_rb32(pb) < 6) {                                                                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 142, 'regvd': 136, 'vulberta_cnn': 49, 'vulberta_mlp': 59}
168                 st->codec->channels       = 1;                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 106, 'regvd': 140, 'vulberta_cnn': 121, 'vulberta_mlp': 40}
170                 st->codec->channel_layout = AV_CH_LAYOUT_MONO;                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 57, 'regvd': 49, 'vulberta_cnn': 1, 'vulberta_mlp': 15}
172             } else {                                                                                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 233, 'vulberta_cnn': 25, 'vulberta_mlp': 85}
174                 st->codec->channels       = 2;                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 164, 'regvd': 150, 'vulberta_cnn': 102, 'vulberta_mlp': 39}
176                 st->codec->channel_layout = AV_CH_LAYOUT_STEREO;                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 71, 'regvd': 54, 'vulberta_cnn': 22, 'vulberta_mlp': 21}
178             }                                                                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': 39, 'vulberta_mlp': 84}
180             break;                                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 16, 'regvd': 224, 'vulberta_cnn': 36, 'vulberta_mlp': 83}
184         case ID_CAMG:                                                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 202, 'regvd': 195, 'vulberta_cnn': 115, 'vulberta_mlp': 82}
186             if (data_size < 4)                                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 76, 'regvd': 148, 'vulberta_cnn': 54, 'vulberta_mlp': 81}
188                 return AVERROR_INVALIDDATA;                                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 51, 'regvd': 160, 'vulberta_cnn': 105, 'vulberta_mlp': 80}
190             screenmode                = avio_rb32(pb);                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 186, 'regvd': 84, 'vulberta_cnn': 7, 'vulberta_mlp': 14}
192             break;                                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 15, 'regvd': 223, 'vulberta_cnn': 56, 'vulberta_mlp': 79}
196         case ID_CMAP:                                                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 207, 'regvd': 190, 'vulberta_cnn': 58, 'vulberta_mlp': 78}
198             if (data_size > INT_MAX - IFF_EXTRA_VIDEO_SIZE - FF_INPUT_BUFFER_PADDING_SIZE)                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 143, 'regvd': 127, 'vulberta_cnn': 109, 'vulberta_mlp': 64}
200                 return AVERROR_INVALIDDATA;                                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 50, 'regvd': 159, 'vulberta_cnn': 55, 'vulberta_mlp': 77}
202             st->codec->extradata_size = data_size + IFF_EXTRA_VIDEO_SIZE;                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 116, 'regvd': 72, 'vulberta_cnn': 87, 'vulberta_mlp': 62}
204             st->codec->extradata      = av_malloc(data_size + IFF_EXTRA_VIDEO_SIZE + FF_INPUT_BUFFER_PADDING_SIZE);                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 62, 'regvd': 0, 'vulberta_cnn': 0, 'vulberta_mlp': 56}
206             if (!st->codec->extradata)                                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 26, 'regvd': 138, 'vulberta_cnn': 74, 'vulberta_mlp': 7}
208                 return AVERROR(ENOMEM);                                                                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 134, 'regvd': 167, 'vulberta_cnn': 88, 'vulberta_mlp': 76}
210             if (avio_read(pb, st->codec->extradata + IFF_EXTRA_VIDEO_SIZE, data_size) < 0)                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 118, 'regvd': 17, 'vulberta_cnn': 6, 'vulberta_mlp': 58}
212                 return AVERROR(EIO);                                                                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 219, 'regvd': 170, 'vulberta_cnn': 34, 'vulberta_mlp': 6}
214             break;                                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 14, 'regvd': 222, 'vulberta_cnn': 79, 'vulberta_mlp': 75}
218         case ID_BMHD:                                                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 213, 'regvd': 189, 'vulberta_cnn': 57, 'vulberta_mlp': 74}
220             st->codec->codec_type            = AVMEDIA_TYPE_VIDEO;                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 32, 'regvd': 65, 'vulberta_cnn': 91, 'vulberta_mlp': 3}
222             if (data_size <= 8)                                                                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 79, 'regvd': 121, 'vulberta_cnn': 29, 'vulberta_mlp': 28}
224                 return AVERROR_INVALIDDATA;                                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 49, 'regvd': 158, 'vulberta_cnn': 81, 'vulberta_mlp': 73}
226             st->codec->width                 = avio_rb16(pb);                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 86, 'regvd': 7, 'vulberta_cnn': 77, 'vulberta_mlp': 13}
228             st->codec->height                = avio_rb16(pb);                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 68, 'regvd': 16, 'vulberta_cnn': 4, 'vulberta_mlp': 1}
230             avio_skip(pb, 4); // x, y offset                                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 137, 'regvd': 79, 'vulberta_cnn': 18, 'vulberta_mlp': 5}
232             st->codec->bits_per_coded_sample = avio_r8(pb);                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 99, 'regvd': 8, 'vulberta_cnn': 52, 'vulberta_mlp': 38}
234             if (data_size >= 10)                                                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 176, 'regvd': 114, 'vulberta_cnn': 65, 'vulberta_mlp': 27}
236                 masking                      = avio_r8(pb);                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 200, 'regvd': 78, 'vulberta_cnn': 44, 'vulberta_mlp': 51}
238             if (data_size >= 11)                                                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 156, 'regvd': 124, 'vulberta_cnn': 68, 'vulberta_mlp': 72}
240                 iff->bitmap_compression      = avio_r8(pb);                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 119, 'regvd': 9, 'vulberta_cnn': 62, 'vulberta_mlp': 34}
242             if (data_size >= 14) {                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 147, 'regvd': 99, 'vulberta_cnn': 30, 'vulberta_mlp': 35}
244                 avio_skip(pb, 1); // padding                                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 149, 'regvd': 92, 'vulberta_cnn': 99, 'vulberta_mlp': 0}
246                 transparency                 = avio_rb16(pb);                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 194, 'regvd': 63, 'vulberta_cnn': 31, 'vulberta_mlp': 50}
248             }                                                                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': 73, 'vulberta_mlp': 71}
250             if (data_size >= 16) {                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 97, 'regvd': 101, 'vulberta_cnn': 60, 'vulberta_mlp': 12}
252                 st->sample_aspect_ratio.num  = avio_r8(pb);                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 89, 'regvd': 20, 'vulberta_cnn': 9, 'vulberta_mlp': 70}
254                 st->sample_aspect_ratio.den  = avio_r8(pb);                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 21, 'regvd': 22, 'vulberta_cnn': 104, 'vulberta_mlp': 63}
256             }                                                                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': 66, 'vulberta_mlp': 69}
258             break;                                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 13, 'regvd': 221, 'vulberta_cnn': 90, 'vulberta_mlp': 68}
262         case ID_DPEL:                                                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 206, 'regvd': 193, 'vulberta_cnn': 59, 'vulberta_mlp': 67}
264             if (data_size < 4 || (data_size & 3))                                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 44, 'regvd': 146, 'vulberta_cnn': 28, 'vulberta_mlp': 55}
266                 return AVERROR_INVALIDDATA;                                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 48, 'regvd': 157, 'vulberta_cnn': 103, 'vulberta_mlp': 66}
268             if ((fmt_size = avio_read(pb, fmt, sizeof(fmt))) < 0)                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 120, 'regvd': 59, 'vulberta_cnn': 92, 'vulberta_mlp': 37}
270                 return fmt_size;                                                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 215, 'regvd': 178, 'vulberta_cnn': 38, 'vulberta_mlp': 65}
272             if (fmt_size == sizeof(deep_rgb24) && !memcmp(fmt, deep_rgb24, sizeof(deep_rgb24)))                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 136, 'regvd': 116, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
274                 st->codec->pix_fmt = AV_PIX_FMT_RGB24;                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 110, 'regvd': 77, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
276             else if (fmt_size == sizeof(deep_rgba) && !memcmp(fmt, deep_rgba, sizeof(deep_rgba)))                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 144, 'regvd': 112, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
278                 st->codec->pix_fmt = AV_PIX_FMT_RGBA;                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 108, 'regvd': 76, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
280             else if (fmt_size == sizeof(deep_bgra) && !memcmp(fmt, deep_bgra, sizeof(deep_bgra)))                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 145, 'regvd': 111, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
282                 st->codec->pix_fmt = AV_PIX_FMT_BGRA;                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 111, 'regvd': 75, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
284             else if (fmt_size == sizeof(deep_argb) && !memcmp(fmt, deep_argb, sizeof(deep_argb)))                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 148, 'regvd': 110, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
286                 st->codec->pix_fmt = AV_PIX_FMT_ARGB;                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 112, 'regvd': 74, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
288             else if (fmt_size == sizeof(deep_abgr) && !memcmp(fmt, deep_abgr, sizeof(deep_abgr)))                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 130, 'regvd': 109, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
290                 st->codec->pix_fmt = AV_PIX_FMT_ABGR;                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 109, 'regvd': 73, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
292             else {                                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 232, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
294                 av_log_ask_for_sample(s, "unsupported color format\n");                                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 108, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
296                 return AVERROR_PATCHWELCOME;                                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 162, 'regvd': 172, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
298             }                                                                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
300             break;                                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 12, 'regvd': 220, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
304         case ID_DGBL:                                                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 205, 'regvd': 202, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
306             st->codec->codec_type            = AVMEDIA_TYPE_VIDEO;                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 31, 'regvd': 64, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
308             if (data_size < 8)                                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 117, 'regvd': 139, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
310                 return AVERROR_INVALIDDATA;                                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 47, 'regvd': 156, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
312             st->codec->width                 = avio_rb16(pb);                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 85, 'regvd': 6, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
314             st->codec->height                = avio_rb16(pb);                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 67, 'regvd': 15, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
316             iff->bitmap_compression          = avio_rb16(pb);                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 91, 'regvd': 2, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
318             st->sample_aspect_ratio.num      = avio_r8(pb);                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 88, 'regvd': 19, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
320             st->sample_aspect_ratio.den      = avio_r8(pb);                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 20, 'regvd': 21, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
322             st->codec->bits_per_coded_sample = 24;                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 81, 'regvd': 107, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
324             break;                                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 11, 'regvd': 219, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
328         case ID_DLOC:                                                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 210, 'regvd': 194, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
330             if (data_size < 4)                                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 75, 'regvd': 147, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
332                 return AVERROR_INVALIDDATA;                                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 46, 'regvd': 155, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
334             st->codec->width  = avio_rb16(pb);                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 84, 'regvd': 5, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
336             st->codec->height = avio_rb16(pb);                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 66, 'regvd': 14, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
338             break;                                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 10, 'regvd': 218, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
342         case ID_TVDC:                                                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 214, 'regvd': 198, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
344             if (data_size < sizeof(iff->tvdc))                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 115, 'regvd': 123, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
346                 return AVERROR_INVALIDDATA;                                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 45, 'regvd': 154, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
348             res = avio_read(pb, iff->tvdc, sizeof(iff->tvdc));                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 128, 'regvd': 11, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
350             if (res < 0)                                                                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 151, 'regvd': 186, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
352                 return res;                                                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 154, 'regvd': 210, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
354             break;                                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 9, 'regvd': 217, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
358         case ID_ANNO:                                                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 221, 'regvd': 191, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
360         case ID_TEXT:      metadata_tag = "comment";   break;                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 0, 'regvd': 144, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
362         case ID_AUTH:      metadata_tag = "artist";    break;                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 3, 'regvd': 126, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
364         case ID_COPYRIGHT: metadata_tag = "copyright"; break;                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 1, 'regvd': 131, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
366         case ID_NAME:      metadata_tag = "title";     break;                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 2, 'regvd': 134, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
368         }                                                                                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
372         if (metadata_tag) {                                                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 37, 'regvd': 151, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
374             if ((res = get_metadata(s, metadata_tag, data_size)) < 0) {                                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 28, 'regvd': 82, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
376                 av_log(s, AV_LOG_ERROR, "cannot allocate metadata tag %s!\n", metadata_tag);                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 36, 'regvd': 56, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
378                 return res;                                                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 153, 'regvd': 209, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
380             }                                                                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
382         }                                                                                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
384         avio_skip(pb, data_size - (avio_tell(pb) - orig_pos) + (data_size & 1));                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 102, 'regvd': 31, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
386     }                                                                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
390     avio_seek(pb, iff->body_pos, SEEK_SET);                                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 139, 'regvd': 43, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
394     switch(st->codec->codec_type) {                                                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 40, 'regvd': 120, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
396     case AVMEDIA_TYPE_AUDIO:                                                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 211, 'regvd': 180, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
398         avpriv_set_pts_info(st, 32, 1, st->codec->sample_rate);                                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 73, 'regvd': 23, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
402         if (st->codec->codec_tag == ID_16SV)                                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 56, 'regvd': 32, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
404             st->codec->codec_id = AV_CODEC_ID_PCM_S16BE_PLANAR;                                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 103, 'regvd': 40, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
406         else if (st->codec->codec_tag == ID_MAUD) {                                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 70, 'regvd': 30, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
408             if (iff->maud_bits == 8 && !iff->maud_compression) {                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 90, 'regvd': 38, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
410                 st->codec->codec_id = AV_CODEC_ID_PCM_U8;                                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 165, 'regvd': 53, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
412             } else if (iff->maud_bits == 16 && !iff->maud_compression) {                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 39, 'regvd': 34, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
414                 st->codec->codec_id = AV_CODEC_ID_PCM_S16BE;                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 166, 'regvd': 45, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
416             } else if (iff->maud_bits ==  8 && iff->maud_compression == 2) {                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 93, 'regvd': 42, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
418                 st->codec->codec_id = AV_CODEC_ID_PCM_ALAW;                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 163, 'regvd': 68, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
420             } else if (iff->maud_bits ==  8 && iff->maud_compression == 3) {                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 87, 'regvd': 41, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
422                 st->codec->codec_id = AV_CODEC_ID_PCM_MULAW;                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 167, 'regvd': 67, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
424             } else {                                                                                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 231, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
426                 av_log_ask_for_sample(s, "unsupported compression %d and bit depth %d\n", iff->maud_compression, iff->maud_bits);             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 27, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
428                 return AVERROR_PATCHWELCOME;                                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 161, 'regvd': 171, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
430             }                                                                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
434             st->codec->bits_per_coded_sample =                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 132, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
436                 av_get_bits_per_sample(st->codec->codec_id);                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 37, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
440             st->codec->block_align =                                                                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 145, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
442                 st->codec->bits_per_coded_sample * st->codec->channels / 8;                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 95, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
444         } else {                                                                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 230, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
446         switch (iff->svx8_compression) {                                                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 65, 'regvd': 89, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
448         case COMP_NONE:                                                                                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 204, 'regvd': 204, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
450             st->codec->codec_id = AV_CODEC_ID_PCM_S8_PLANAR;                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 158, 'regvd': 48, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
452             break;                                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 8, 'regvd': 216, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
454         case COMP_FIB:                                                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 208, 'regvd': 199, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
456             st->codec->codec_id = AV_CODEC_ID_8SVX_FIB;                                                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 152, 'regvd': 57, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
458             break;                                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 7, 'regvd': 215, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
460         case COMP_EXP:                                                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 203, 'regvd': 203, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
462             st->codec->codec_id = AV_CODEC_ID_8SVX_EXP;                                                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 157, 'regvd': 52, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
464             break;                                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 6, 'regvd': 214, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
466         default:                                                                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 169, 'regvd': 229, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
468             av_log(s, AV_LOG_ERROR,                                                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 169, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
470                    "Unknown SVX8 compression method '%d'\n", iff->svx8_compression);                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 64, 'regvd': 66, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
472             return -1;                                                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 171, 'regvd': 207, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
474         }                                                                                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
476         }                                                                                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
480         st->codec->bits_per_coded_sample = av_get_bits_per_sample(st->codec->codec_id);                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 33, 'regvd': 25, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
482         st->codec->bit_rate = st->codec->channels * st->codec->sample_rate * st->codec->bits_per_coded_sample;                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 92, 'regvd': 81, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
484         st->codec->block_align = st->codec->channels * st->codec->bits_per_coded_sample;                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 101, 'regvd': 83, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
486         break;                                                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 5, 'regvd': 213, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
490     case AVMEDIA_TYPE_VIDEO:                                                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 218, 'regvd': 181, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
492         iff->bpp          = st->codec->bits_per_coded_sample;                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 60, 'regvd': 80, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
494         if ((screenmode & 0x800 /* Hold And Modify */) && iff->bpp <= 8) {                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 127, 'regvd': 122, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
496             iff->ham      = iff->bpp > 6 ? 6 : 4;                                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 179, 'regvd': 179, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
498             st->codec->bits_per_coded_sample = 24;                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 80, 'regvd': 106, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
500         }                                                                                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
502         iff->flags        = (screenmode & 0x80 /* Extra HalfBrite */) && iff->bpp <= 8;                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 125, 'regvd': 87, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
504         iff->masking      = masking;                                                                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 175, 'regvd': 175, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
506         iff->transparency = transparency;                                                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 122, 'regvd': 174, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
510         if (!st->codec->extradata) {                                                                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 25, 'regvd': 129, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
512             st->codec->extradata_size = IFF_EXTRA_VIDEO_SIZE;                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 188, 'regvd': 71, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
514             st->codec->extradata      = av_malloc(IFF_EXTRA_VIDEO_SIZE + FF_INPUT_BUFFER_PADDING_SIZE);                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 126, 'regvd': 4, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
516             if (!st->codec->extradata)                                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 24, 'regvd': 137, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
518                 return AVERROR(ENOMEM);                                                                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 133, 'regvd': 166, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
520         }                                                                                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
523         buf = st->codec->extradata;                                                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 63, 'regvd': 142, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
525         bytestream_put_be16(&buf, IFF_EXTRA_VIDEO_SIZE);                                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 196, 'regvd': 62, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
527         bytestream_put_byte(&buf, iff->bitmap_compression);                                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 160, 'regvd': 26, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
529         bytestream_put_byte(&buf, iff->bpp);                                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 181, 'regvd': 47, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
531         bytestream_put_byte(&buf, iff->ham);                                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 177, 'regvd': 46, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
533         bytestream_put_byte(&buf, iff->flags);                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 172, 'regvd': 39, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
535         bytestream_put_be16(&buf, iff->transparency);                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 174, 'regvd': 29, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
537         bytestream_put_byte(&buf, iff->masking);                                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 178, 'regvd': 33, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
539         bytestream_put_buffer(&buf, iff->tvdc, sizeof(iff->tvdc));                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 183, 'regvd': 28, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
541         st->codec->codec_id = AV_CODEC_ID_IFF_ILBM;                                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 180, 'regvd': 58, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
543         break;                                                                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 4, 'regvd': 212, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
545     default:                                                                                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 168, 'regvd': 228, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
547         return -1;                                                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 170, 'regvd': 206, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
549     }                                                                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
553     return 0;                                                                                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 124, 'regvd': 211, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
555 }                                                                                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 235, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
-----------------------
Highlighted lines: 
4     IffDemuxContext *iff = s->priv_data;
42     st->codec->codec_tag = avio_rl32(pb);
--------------------------------------------------------------------------------------------------------------
Example ids:  21374 project:  FFmpeg commit id:  d59591fb02c29b41e5b8d611160971a4493394c2 Number of lines:  96 tground truth:  1
Original lines: 
Predicted Correctly by :  ['linevul', 'PLBART', 'devign', 'regvd', 'vulberta_cnn']
0 static void mpegvideo_extract_headers(AVCodecParserContext *s,                                                     {'linevul': 2, 'PLBART': 2, 'devign': 40, 'regvd': 28, 'vulberta_cnn': 9}
2                                       AVCodecContext *avctx,                                                       {'linevul': 6, 'PLBART': 8, 'devign': 27, 'regvd': 63, 'vulberta_cnn': 20}
4                                       const uint8_t *buf, int buf_size)                                            {'linevul': 9, 'PLBART': 4, 'devign': 35, 'regvd': 30, 'vulberta_cnn': 89}
6 {                                                                                                                  {'linevul': 21, 'PLBART': 9, 'devign': 194, 'regvd': 84, 'vulberta_cnn': 41}
8     ParseContext1 *pc = s->priv_data;                                                                              {'linevul': 3, 'PLBART': 3, 'devign': 22, 'regvd': 27, 'vulberta_cnn': 43}
10     const uint8_t *buf_end;                                                                                       {'linevul': 7, 'PLBART': 5, 'devign': 38, 'regvd': 37, 'vulberta_cnn': 55}
13     uint32_t start_code;                                                                                          {'linevul': 19, 'PLBART': 6, 'devign': 11, 'regvd': 53, 'vulberta_cnn': 35}
15     int frame_rate_index, ext_type, bytes_left;                                                                   {'linevul': 16, 'PLBART': 0, 'devign': 21, 'regvd': 31, 'vulberta_cnn': 12}
17     int frame_rate_ext_n, frame_rate_ext_d;                                                                       {'linevul': 15, 'PLBART': -1, 'devign': 77, 'regvd': 51, 'vulberta_cnn': 75}
19     int picture_structure, top_field_first, repeat_first_field, progressive_frame;                                {'linevul': 8, 'PLBART': 1, 'devign': 10, 'regvd': 40, 'vulberta_cnn': 27}
21     int horiz_size_ext, vert_size_ext, bit_rate_ext;                                                              {'linevul': 1, 'PLBART': 7, 'devign': 75, 'regvd': 47, 'vulberta_cnn': 88}
23 //FIXME replace the crap with get_bits()                                                                          {'linevul': 0, 'PLBART': -1, 'devign': 184, 'regvd': 60, 'vulberta_cnn': -1}
25     s->repeat_pict = 0;                                                                                           {'linevul': 4, 'PLBART': -1, 'devign': 47, 'regvd': 52, 'vulberta_cnn': 15}
27     buf_end = buf + buf_size;                                                                                     {'linevul': 11, 'PLBART': -1, 'devign': 51, 'regvd': 46, 'vulberta_cnn': 63}
29     while (buf < buf_end) {                                                                                       {'linevul': 5, 'PLBART': -1, 'devign': 18, 'regvd': 50, 'vulberta_cnn': 66}
31         start_code= -1;                                                                                           {'linevul': 17, 'PLBART': -1, 'devign': 9, 'regvd': 48, 'vulberta_cnn': 2}
33         buf= ff_find_start_code(buf, buf_end, &start_code);                                                       {'linevul': 14, 'PLBART': -1, 'devign': 0, 'regvd': 9, 'vulberta_cnn': 6}
35         bytes_left = buf_end - buf;                                                                               {'linevul': 22, 'PLBART': -1, 'devign': 32, 'regvd': 33, 'vulberta_cnn': 28}
37         switch(start_code) {                                                                                      {'linevul': 18, 'PLBART': -1, 'devign': 15, 'regvd': 54, 'vulberta_cnn': 68}
39         case PICTURE_START_CODE:                                                                                  {'linevul': 13, 'PLBART': -1, 'devign': 71, 'regvd': 64, 'vulberta_cnn': 69}
41             ff_fetch_timestamp(s, buf-buf_start-4, 1);                                                            {'linevul': 10, 'PLBART': -1, 'devign': 46, 'regvd': 16, 'vulberta_cnn': 87}
45             if (bytes_left >= 2) {                                                                                {'linevul': 20, 'PLBART': -1, 'devign': 52, 'regvd': 39, 'vulberta_cnn': 5}
47                 s->pict_type = (buf[1] >> 3) & 7;                                                                 {'linevul': 12, 'PLBART': -1, 'devign': 53, 'regvd': 7, 'vulberta_cnn': 8}
49             }                                                                                                     {'linevul': 23, 'PLBART': -1, 'devign': 169, 'regvd': 95, 'vulberta_cnn': 24}
51             break;                                                                                                {'linevul': -1, 'PLBART': -1, 'devign': 6, 'regvd': 81, 'vulberta_cnn': 82}
53         case SEQ_START_CODE:                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 70, 'regvd': 66, 'vulberta_cnn': 79}
55             if (bytes_left >= 7) {                                                                                {'linevul': -1, 'PLBART': -1, 'devign': 30, 'regvd': 41, 'vulberta_cnn': 70}
57                 pc->width  = (buf[0] << 4) | (buf[1] >> 4);                                                       {'linevul': -1, 'PLBART': -1, 'devign': 43, 'regvd': 21, 'vulberta_cnn': 80}
59                 pc->height = ((buf[1] & 0x0f) << 8) | buf[2];                                                     {'linevul': -1, 'PLBART': -1, 'devign': 37, 'regvd': 18, 'vulberta_cnn': 84}
61                 avcodec_set_dimensions(avctx, pc->width, pc->height);                                             {'linevul': -1, 'PLBART': -1, 'devign': 17, 'regvd': 13, 'vulberta_cnn': 0}
63                 frame_rate_index = buf[3] & 0xf;                                                                  {'linevul': -1, 'PLBART': -1, 'devign': 61, 'regvd': 26, 'vulberta_cnn': 30}
65                 pc->frame_rate.den = avctx->time_base.den = ff_frame_rate_tab[frame_rate_index].num;              {'linevul': -1, 'PLBART': -1, 'devign': 8, 'regvd': 25, 'vulberta_cnn': 78}
67                 pc->frame_rate.num = avctx->time_base.num = ff_frame_rate_tab[frame_rate_index].den;              {'linevul': -1, 'PLBART': -1, 'devign': 7, 'regvd': 24, 'vulberta_cnn': 91}
69                 avctx->bit_rate = ((buf[4]<<10) | (buf[5]<<2) | (buf[6]>>6))*400;                                 {'linevul': -1, 'PLBART': -1, 'devign': 41, 'regvd': 0, 'vulberta_cnn': 1}
71                 avctx->codec_id = CODEC_ID_MPEG1VIDEO;                                                            {'linevul': -1, 'PLBART': -1, 'devign': 55, 'regvd': 32, 'vulberta_cnn': 60}
73                 avctx->sub_id = 1;                                                                                {'linevul': -1, 'PLBART': -1, 'devign': 48, 'regvd': 42, 'vulberta_cnn': 7}
75             }                                                                                                     {'linevul': -1, 'PLBART': -1, 'devign': 155, 'regvd': 94, 'vulberta_cnn': 40}
77             break;                                                                                                {'linevul': -1, 'PLBART': -1, 'devign': 5, 'regvd': 80, 'vulberta_cnn': 62}
79         case EXT_START_CODE:                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 72, 'regvd': 70, 'vulberta_cnn': 25}
81             if (bytes_left >= 1) {                                                                                {'linevul': -1, 'PLBART': -1, 'devign': 56, 'regvd': 35, 'vulberta_cnn': 57}
83                 ext_type = (buf[0] >> 4);                                                                         {'linevul': -1, 'PLBART': -1, 'devign': 19, 'regvd': 23, 'vulberta_cnn': 64}
85                 switch(ext_type) {                                                                                {'linevul': -1, 'PLBART': -1, 'devign': 36, 'regvd': 61, 'vulberta_cnn': 23}
87                 case 0x1: /* sequence extension */                                                                {'linevul': -1, 'PLBART': -1, 'devign': 50, 'regvd': 71, 'vulberta_cnn': 42}
89                     if (bytes_left >= 6) {                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 20, 'regvd': 45, 'vulberta_cnn': 71}
91                         horiz_size_ext = ((buf[1] & 1) << 1) | (buf[2] >> 7);                                     {'linevul': -1, 'PLBART': -1, 'devign': 73, 'regvd': 4, 'vulberta_cnn': 19}
93                         vert_size_ext = (buf[2] >> 5) & 3;                                                        {'linevul': -1, 'PLBART': -1, 'devign': 63, 'regvd': 20, 'vulberta_cnn': 56}
95                         bit_rate_ext = ((buf[2] & 0x1F)<<7) | (buf[3]>>1);                                        {'linevul': -1, 'PLBART': -1, 'devign': 64, 'regvd': 2, 'vulberta_cnn': 72}
97                         frame_rate_ext_n = (buf[5] >> 5) & 3;                                                     {'linevul': -1, 'PLBART': -1, 'devign': 67, 'regvd': 22, 'vulberta_cnn': 18}
99                         frame_rate_ext_d = (buf[5] & 0x1f);                                                       {'linevul': -1, 'PLBART': -1, 'devign': 69, 'regvd': 8, 'vulberta_cnn': 36}
101                         pc->progressive_sequence = buf[1] & (1 << 3);                                            {'linevul': -1, 'PLBART': -1, 'devign': 12, 'regvd': 5, 'vulberta_cnn': 45}
103                         avctx->has_b_frames= !(buf[5] >> 7);                                                     {'linevul': -1, 'PLBART': -1, 'devign': 42, 'regvd': 6, 'vulberta_cnn': 4}
107                         pc->width  |=(horiz_size_ext << 12);                                                     {'linevul': -1, 'PLBART': -1, 'devign': 29, 'regvd': 17, 'vulberta_cnn': 73}
109                         pc->height |=( vert_size_ext << 12);                                                     {'linevul': -1, 'PLBART': -1, 'devign': 23, 'regvd': 19, 'vulberta_cnn': 22}
111                         avctx->bit_rate += (bit_rate_ext << 18) * 400;                                           {'linevul': -1, 'PLBART': -1, 'devign': 34, 'regvd': 15, 'vulberta_cnn': 17}
113                         avcodec_set_dimensions(avctx, pc->width, pc->height);                                    {'linevul': -1, 'PLBART': -1, 'devign': 16, 'regvd': 12, 'vulberta_cnn': 16}
115                         avctx->time_base.den = pc->frame_rate.den * (frame_rate_ext_n + 1);                      {'linevul': -1, 'PLBART': -1, 'devign': 25, 'regvd': 1, 'vulberta_cnn': 3}
117                         avctx->time_base.num = pc->frame_rate.num * (frame_rate_ext_d + 1);                      {'linevul': -1, 'PLBART': -1, 'devign': 26, 'regvd': 3, 'vulberta_cnn': 13}
119                         avctx->codec_id = CODEC_ID_MPEG2VIDEO;                                                   {'linevul': -1, 'PLBART': -1, 'devign': 54, 'regvd': 36, 'vulberta_cnn': 90}
121                         avctx->sub_id = 2; /* forces MPEG2 */                                                    {'linevul': -1, 'PLBART': -1, 'devign': 45, 'regvd': 34, 'vulberta_cnn': 50}
123                     }                                                                                            {'linevul': -1, 'PLBART': -1, 'devign': 129, 'regvd': 93, 'vulberta_cnn': 49}
125                     break;                                                                                       {'linevul': -1, 'PLBART': -1, 'devign': 4, 'regvd': 79, 'vulberta_cnn': 52}
127                 case 0x8: /* picture coding extension */                                                         {'linevul': -1, 'PLBART': -1, 'devign': 74, 'regvd': 69, 'vulberta_cnn': 83}
129                     if (bytes_left >= 5) {                                                                       {'linevul': -1, 'PLBART': -1, 'devign': 39, 'regvd': 44, 'vulberta_cnn': 26}
131                         picture_structure = buf[2]&3;                                                            {'linevul': -1, 'PLBART': -1, 'devign': 76, 'regvd': 29, 'vulberta_cnn': 37}
133                         top_field_first = buf[3] & (1 << 7);                                                     {'linevul': -1, 'PLBART': -1, 'devign': 24, 'regvd': 11, 'vulberta_cnn': 10}
135                         repeat_first_field = buf[3] & (1 << 1);                                                  {'linevul': -1, 'PLBART': -1, 'devign': 28, 'regvd': 14, 'vulberta_cnn': 74}
137                         progressive_frame = buf[4] & (1 << 7);                                                   {'linevul': -1, 'PLBART': -1, 'devign': 33, 'regvd': 10, 'vulberta_cnn': 81}
141                         /* check if we must repeat the frame */                                                  {'linevul': -1, 'PLBART': -1, 'devign': 118, 'regvd': 72, 'vulberta_cnn': -1}
143                         if (repeat_first_field) {                                                                {'linevul': -1, 'PLBART': -1, 'devign': 60, 'regvd': 59, 'vulberta_cnn': 67}
145                             if (pc->progressive_sequence) {                                                      {'linevul': -1, 'PLBART': -1, 'devign': 31, 'regvd': 43, 'vulberta_cnn': 14}
147                                 if (top_field_first)                                                             {'linevul': -1, 'PLBART': -1, 'devign': 49, 'regvd': 62, 'vulberta_cnn': 65}
149                                     s->repeat_pict = 4;                                                          {'linevul': -1, 'PLBART': -1, 'devign': 59, 'regvd': 55, 'vulberta_cnn': 54}
151                                 else                                                                             {'linevul': -1, 'PLBART': -1, 'devign': 112, 'regvd': 83, 'vulberta_cnn': 32}
153                                     s->repeat_pict = 2;                                                          {'linevul': -1, 'PLBART': -1, 'devign': 57, 'regvd': 57, 'vulberta_cnn': 44}
155                             } else if (progressive_frame) {                                                      {'linevul': -1, 'PLBART': -1, 'devign': 68, 'regvd': 58, 'vulberta_cnn': 33}
157                                 s->repeat_pict = 1;                                                              {'linevul': -1, 'PLBART': -1, 'devign': 58, 'regvd': 49, 'vulberta_cnn': 86}
159                             }                                                                                    {'linevul': -1, 'PLBART': -1, 'devign': 107, 'regvd': 92, 'vulberta_cnn': 39}
161                         }                                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 105, 'regvd': 91, 'vulberta_cnn': 38}
163                     }                                                                                            {'linevul': -1, 'PLBART': -1, 'devign': 103, 'regvd': 90, 'vulberta_cnn': 58}
165                     break;                                                                                       {'linevul': -1, 'PLBART': -1, 'devign': 3, 'regvd': 78, 'vulberta_cnn': 11}
167                 }                                                                                                {'linevul': -1, 'PLBART': -1, 'devign': 100, 'regvd': 89, 'vulberta_cnn': 47}
169             }                                                                                                    {'linevul': -1, 'PLBART': -1, 'devign': 98, 'regvd': 88, 'vulberta_cnn': 61}
171             break;                                                                                               {'linevul': -1, 'PLBART': -1, 'devign': 2, 'regvd': 77, 'vulberta_cnn': 46}
173         case -1:                                                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 62, 'regvd': 73, 'vulberta_cnn': 29}
175             goto the_end;                                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 66, 'regvd': 68, 'vulberta_cnn': 77}
177         default:                                                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 78, 'regvd': 82, 'vulberta_cnn': 76}
179             /* we stop parsing when we encounter a slice. It ensures                                             {'linevul': -1, 'PLBART': -1, 'devign': 92, 'regvd': 75, 'vulberta_cnn': -1}
181                that this function takes a negligible amount of time */                                           {'linevul': -1, 'PLBART': -1, 'devign': 90, 'regvd': 74, 'vulberta_cnn': -1}
183             if (start_code >= SLICE_MIN_START_CODE &&                                                            {'linevul': -1, 'PLBART': -1, 'devign': 14, 'regvd': 38, 'vulberta_cnn': 31}
185                 start_code <= SLICE_MAX_START_CODE)                                                              {'linevul': -1, 'PLBART': -1, 'devign': 13, 'regvd': 56, 'vulberta_cnn': 85}
187                 goto the_end;                                                                                    {'linevul': -1, 'PLBART': -1, 'devign': 65, 'regvd': 67, 'vulberta_cnn': 34}
189             break;                                                                                               {'linevul': -1, 'PLBART': -1, 'devign': 1, 'regvd': 76, 'vulberta_cnn': 59}
191         }                                                                                                        {'linevul': -1, 'PLBART': -1, 'devign': 84, 'regvd': 87, 'vulberta_cnn': 48}
193     }                                                                                                            {'linevul': -1, 'PLBART': -1, 'devign': 82, 'regvd': 86, 'vulberta_cnn': 51}
195  the_end: ;                                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 44, 'regvd': 65, 'vulberta_cnn': 21}
197 }                                                                                                                {'linevul': -1, 'PLBART': -1, 'devign': 79, 'regvd': 85, 'vulberta_cnn': 53}
-----------------------
Highlighted lines: 
0 static void mpegvideo_extract_headers(AVCodecParserContext *s,
33         buf= ff_find_start_code(buf, buf_end, &start_code);
--------------------------------------------------------------------------------------------------------------
Example ids:  21386 project:  FFmpeg commit id:  1197c04896423c6c7db65f69da8bc3865b26bb50 Number of lines:  133 tground truth:  1
Original lines: 
Predicted Correctly by :  ['PLBART', 'devign', 'regvd', 'vulberta_cnn', 'vulberta_mlp']
0 static void fft_calc_c(FFTContext *s, FFTComplex *z) {                                          {'PLBART': 3, 'devign': 76, 'regvd': 24, 'vulberta_cnn': 64, 'vulberta_mlp': 1}
4     int nbits, i, n, num_transforms, offset, step;                                              {'PLBART': 2, 'devign': 125, 'regvd': 47, 'vulberta_cnn': 31, 'vulberta_mlp': 67}
6     int n4, n2, n34;                                                                            {'PLBART': 7, 'devign': 123, 'regvd': 104, 'vulberta_cnn': 66, 'vulberta_mlp': 66}
8     FFTSample tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8;                                   {'PLBART': 0, 'devign': 122, 'regvd': 61, 'vulberta_cnn': 30, 'vulberta_mlp': 16}
10     FFTComplex *tmpz;                                                                          {'PLBART': 8, 'devign': 81, 'regvd': 105, 'vulberta_cnn': 35, 'vulberta_mlp': 9}
12     const int fft_size = (1 << s->nbits);                                                      {'PLBART': 5, 'devign': 26, 'regvd': 10, 'vulberta_cnn': 9, 'vulberta_mlp': 11}
14     int64_t accu;                                                                              {'PLBART': 9, 'devign': 124, 'regvd': 103, 'vulberta_cnn': 18, 'vulberta_mlp': 65}
18     num_transforms = (0x2aab >> (16 - s->nbits)) | 1;                                          {'PLBART': 1, 'devign': 12, 'regvd': 3, 'vulberta_cnn': 34, 'vulberta_mlp': 15}
22     for (n=0; n<num_transforms; n++){                                                          {'PLBART': 6, 'devign': 2, 'regvd': 28, 'vulberta_cnn': 20, 'vulberta_mlp': 64}
24         offset = ff_fft_offsets_lut[n] << 2;                                                   {'PLBART': 4, 'devign': 121, 'regvd': 33, 'vulberta_cnn': 44, 'vulberta_mlp': 4}
26         tmpz = z + offset;                                                                     {'PLBART': 10, 'devign': 11, 'regvd': 102, 'vulberta_cnn': 24, 'vulberta_mlp': 63}
30         tmp1 = tmpz[0].re + tmpz[1].re;                                                        {'PLBART': -1, 'devign': 62, 'regvd': 78, 'vulberta_cnn': 25, 'vulberta_mlp': 21}
32         tmp5 = tmpz[2].re + tmpz[3].re;                                                        {'PLBART': -1, 'devign': 107, 'regvd': 77, 'vulberta_cnn': 42, 'vulberta_mlp': 14}
34         tmp2 = tmpz[0].im + tmpz[1].im;                                                        {'PLBART': -1, 'devign': 29, 'regvd': 52, 'vulberta_cnn': 56, 'vulberta_mlp': 8}
36         tmp6 = tmpz[2].im + tmpz[3].im;                                                        {'PLBART': -1, 'devign': 55, 'regvd': 69, 'vulberta_cnn': 0, 'vulberta_mlp': 25}
38         tmp3 = tmpz[0].re - tmpz[1].re;                                                        {'PLBART': -1, 'devign': 105, 'regvd': 56, 'vulberta_cnn': 62, 'vulberta_mlp': 62}
40         tmp8 = tmpz[2].im - tmpz[3].im;                                                        {'PLBART': -1, 'devign': 104, 'regvd': 59, 'vulberta_cnn': 38, 'vulberta_mlp': 24}
42         tmp4 = tmpz[0].im - tmpz[1].im;                                                        {'PLBART': -1, 'devign': 49, 'regvd': 54, 'vulberta_cnn': 12, 'vulberta_mlp': 13}
44         tmp7 = tmpz[2].re - tmpz[3].re;                                                        {'PLBART': -1, 'devign': 108, 'regvd': 67, 'vulberta_cnn': 1, 'vulberta_mlp': 61}
48         tmpz[0].re = tmp1 + tmp5;                                                              {'PLBART': -1, 'devign': 13, 'regvd': 68, 'vulberta_cnn': 28, 'vulberta_mlp': 19}
50         tmpz[2].re = tmp1 - tmp5;                                                              {'PLBART': -1, 'devign': 54, 'regvd': 55, 'vulberta_cnn': 65, 'vulberta_mlp': 60}
52         tmpz[0].im = tmp2 + tmp6;                                                              {'PLBART': -1, 'devign': 15, 'regvd': 60, 'vulberta_cnn': 4, 'vulberta_mlp': 18}
54         tmpz[2].im = tmp2 - tmp6;                                                              {'PLBART': -1, 'devign': 84, 'regvd': 74, 'vulberta_cnn': 46, 'vulberta_mlp': 17}
56         tmpz[1].re = tmp3 + tmp8;                                                              {'PLBART': -1, 'devign': 82, 'regvd': 73, 'vulberta_cnn': 26, 'vulberta_mlp': 59}
58         tmpz[3].re = tmp3 - tmp8;                                                              {'PLBART': -1, 'devign': 83, 'regvd': 89, 'vulberta_cnn': 27, 'vulberta_mlp': 58}
60         tmpz[1].im = tmp4 - tmp7;                                                              {'PLBART': -1, 'devign': 39, 'regvd': 58, 'vulberta_cnn': 13, 'vulberta_mlp': 57}
62         tmpz[3].im = tmp4 + tmp7;                                                              {'PLBART': -1, 'devign': 48, 'regvd': 81, 'vulberta_cnn': 5, 'vulberta_mlp': 56}
64     }                                                                                          {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': 41, 'vulberta_mlp': 55}
68     if (fft_size < 8)                                                                          {'PLBART': -1, 'devign': 77, 'regvd': 112, 'vulberta_cnn': 40, 'vulberta_mlp': 54}
70         return;                                                                                {'PLBART': -1, 'devign': 126, 'regvd': 126, 'vulberta_cnn': 29, 'vulberta_mlp': 0}
74     num_transforms = (num_transforms >> 1) | 1;                                                {'PLBART': -1, 'devign': 75, 'regvd': 43, 'vulberta_cnn': 7, 'vulberta_mlp': 5}
78     for (n=0; n<num_transforms; n++){                                                          {'PLBART': -1, 'devign': 1, 'regvd': 27, 'vulberta_cnn': 33, 'vulberta_mlp': 3}
80         offset = ff_fft_offsets_lut[n] << 3;                                                   {'PLBART': -1, 'devign': 120, 'regvd': 45, 'vulberta_cnn': 48, 'vulberta_mlp': 10}
82         tmpz = z + offset;                                                                     {'PLBART': -1, 'devign': 10, 'regvd': 101, 'vulberta_cnn': 8, 'vulberta_mlp': 12}
86         tmp1 = tmpz[4].re + tmpz[5].re;                                                        {'PLBART': -1, 'devign': 58, 'regvd': 72, 'vulberta_cnn': 53, 'vulberta_mlp': 7}
88         tmp3 = tmpz[6].re + tmpz[7].re;                                                        {'PLBART': -1, 'devign': 100, 'regvd': 88, 'vulberta_cnn': 47, 'vulberta_mlp': 53}
90         tmp2 = tmpz[4].im + tmpz[5].im;                                                        {'PLBART': -1, 'devign': 97, 'regvd': 66, 'vulberta_cnn': 17, 'vulberta_mlp': 2}
92         tmp4 = tmpz[6].im + tmpz[7].im;                                                        {'PLBART': -1, 'devign': 102, 'regvd': 82, 'vulberta_cnn': 50, 'vulberta_mlp': 52}
94         tmp5 = tmp1 + tmp3;                                                                    {'PLBART': -1, 'devign': 73, 'regvd': 114, 'vulberta_cnn': 49, 'vulberta_mlp': 51}
96         tmp7 = tmp1 - tmp3;                                                                    {'PLBART': -1, 'devign': 67, 'regvd': 107, 'vulberta_cnn': 11, 'vulberta_mlp': 50}
98         tmp6 = tmp2 + tmp4;                                                                    {'PLBART': -1, 'devign': 70, 'regvd': 109, 'vulberta_cnn': 10, 'vulberta_mlp': 49}
100         tmp8 = tmp2 - tmp4;                                                                   {'PLBART': -1, 'devign': 71, 'regvd': 106, 'vulberta_cnn': 58, 'vulberta_mlp': 48}
104         tmp1 = tmpz[4].re - tmpz[5].re;                                                       {'PLBART': -1, 'devign': 56, 'regvd': 62, 'vulberta_cnn': 23, 'vulberta_mlp': 47}
106         tmp2 = tmpz[4].im - tmpz[5].im;                                                       {'PLBART': -1, 'devign': 96, 'regvd': 57, 'vulberta_cnn': 52, 'vulberta_mlp': 46}
108         tmp3 = tmpz[6].re - tmpz[7].re;                                                       {'PLBART': -1, 'devign': 101, 'regvd': 83, 'vulberta_cnn': 16, 'vulberta_mlp': 23}
110         tmp4 = tmpz[6].im - tmpz[7].im;                                                       {'PLBART': -1, 'devign': 98, 'regvd': 76, 'vulberta_cnn': 6, 'vulberta_mlp': 45}
114         tmpz[4].re = tmpz[0].re - tmp5;                                                       {'PLBART': -1, 'devign': 85, 'regvd': 71, 'vulberta_cnn': 14, 'vulberta_mlp': 44}
116         tmpz[0].re = tmpz[0].re + tmp5;                                                       {'PLBART': -1, 'devign': 53, 'regvd': 91, 'vulberta_cnn': 2, 'vulberta_mlp': 43}
118         tmpz[4].im = tmpz[0].im - tmp6;                                                       {'PLBART': -1, 'devign': 86, 'regvd': 63, 'vulberta_cnn': 57, 'vulberta_mlp': 22}
120         tmpz[0].im = tmpz[0].im + tmp6;                                                       {'PLBART': -1, 'devign': 31, 'regvd': 87, 'vulberta_cnn': 59, 'vulberta_mlp': 42}
122         tmpz[6].re = tmpz[2].re - tmp8;                                                       {'PLBART': -1, 'devign': 93, 'regvd': 64, 'vulberta_cnn': 39, 'vulberta_mlp': 41}
124         tmpz[2].re = tmpz[2].re + tmp8;                                                       {'PLBART': -1, 'devign': 94, 'regvd': 84, 'vulberta_cnn': 21, 'vulberta_mlp': 40}
126         tmpz[6].im = tmpz[2].im + tmp7;                                                       {'PLBART': -1, 'devign': 90, 'regvd': 70, 'vulberta_cnn': 36, 'vulberta_mlp': 39}
128         tmpz[2].im = tmpz[2].im - tmp7;                                                       {'PLBART': -1, 'devign': 91, 'regvd': 75, 'vulberta_cnn': 15, 'vulberta_mlp': 38}
132         accu = (int64_t)Q31(M_SQRT1_2)*(tmp1 + tmp2);                                         {'PLBART': -1, 'devign': 36, 'regvd': 18, 'vulberta_cnn': 60, 'vulberta_mlp': 37}
134         tmp5 = (int32_t)((accu + 0x40000000) >> 31);                                          {'PLBART': -1, 'devign': 20, 'regvd': 15, 'vulberta_cnn': 32, 'vulberta_mlp': 20}
136         accu = (int64_t)Q31(M_SQRT1_2)*(tmp3 - tmp4);                                         {'PLBART': -1, 'devign': 38, 'regvd': 12, 'vulberta_cnn': 3, 'vulberta_mlp': 36}
138         tmp7 = (int32_t)((accu + 0x40000000) >> 31);                                          {'PLBART': -1, 'devign': 16, 'regvd': 16, 'vulberta_cnn': 55, 'vulberta_mlp': 35}
140         accu = (int64_t)Q31(M_SQRT1_2)*(tmp2 - tmp1);                                         {'PLBART': -1, 'devign': 37, 'regvd': 11, 'vulberta_cnn': 51, 'vulberta_mlp': 34}
142         tmp6 = (int32_t)((accu + 0x40000000) >> 31);                                          {'PLBART': -1, 'devign': 21, 'regvd': 14, 'vulberta_cnn': 67, 'vulberta_mlp': 33}
144         accu = (int64_t)Q31(M_SQRT1_2)*(tmp3 + tmp4);                                         {'PLBART': -1, 'devign': 35, 'regvd': 17, 'vulberta_cnn': 45, 'vulberta_mlp': 32}
146         tmp8 = (int32_t)((accu + 0x40000000) >> 31);                                          {'PLBART': -1, 'devign': 17, 'regvd': 13, 'vulberta_cnn': 37, 'vulberta_mlp': 6}
148         tmp1 = tmp5 + tmp7;                                                                   {'PLBART': -1, 'devign': 113, 'regvd': 115, 'vulberta_cnn': 43, 'vulberta_mlp': 31}
150         tmp3 = tmp5 - tmp7;                                                                   {'PLBART': -1, 'devign': 115, 'regvd': 121, 'vulberta_cnn': 19, 'vulberta_mlp': 30}
152         tmp2 = tmp6 + tmp8;                                                                   {'PLBART': -1, 'devign': 116, 'regvd': 110, 'vulberta_cnn': 22, 'vulberta_mlp': 29}
154         tmp4 = tmp6 - tmp8;                                                                   {'PLBART': -1, 'devign': 117, 'regvd': 118, 'vulberta_cnn': 61, 'vulberta_mlp': 28}
158         tmpz[5].re = tmpz[1].re - tmp1;                                                       {'PLBART': -1, 'devign': 88, 'regvd': 79, 'vulberta_cnn': 54, 'vulberta_mlp': 27}
160         tmpz[1].re = tmpz[1].re + tmp1;                                                       {'PLBART': -1, 'devign': 95, 'regvd': 93, 'vulberta_cnn': 63, 'vulberta_mlp': 26}
162         tmpz[5].im = tmpz[1].im - tmp2;                                                       {'PLBART': -1, 'devign': 45, 'regvd': 53, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
164         tmpz[1].im = tmpz[1].im + tmp2;                                                       {'PLBART': -1, 'devign': 44, 'regvd': 65, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
166         tmpz[7].re = tmpz[3].re - tmp4;                                                       {'PLBART': -1, 'devign': 92, 'regvd': 80, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
168         tmpz[3].re = tmpz[3].re + tmp4;                                                       {'PLBART': -1, 'devign': 87, 'regvd': 94, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
170         tmpz[7].im = tmpz[3].im + tmp3;                                                       {'PLBART': -1, 'devign': 89, 'regvd': 92, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
172         tmpz[3].im = tmpz[3].im - tmp3;                                                       {'PLBART': -1, 'devign': 57, 'regvd': 95, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
174     }                                                                                         {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
178     step = 1 << ((MAX_LOG2_NFFT-4) - 4);                                                      {'PLBART': -1, 'devign': 110, 'regvd': 48, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
180     n4 = 4;                                                                                   {'PLBART': -1, 'devign': 78, 'regvd': 125, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
184     for (nbits=4; nbits<=s->nbits; nbits++){                                                  {'PLBART': -1, 'devign': 8, 'regvd': 50, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
186         n2  = 2*n4;                                                                           {'PLBART': -1, 'devign': 46, 'regvd': 120, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
188         n34 = 3*n4;                                                                           {'PLBART': -1, 'devign': 42, 'regvd': 123, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
190         num_transforms = (num_transforms >> 1) | 1;                                           {'PLBART': -1, 'devign': 74, 'regvd': 42, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
194         for (n=0; n<num_transforms; n++){                                                     {'PLBART': -1, 'devign': 0, 'regvd': 26, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
196             const FFTSample *w_re_ptr = ff_w_tab_sr + step;                                   {'PLBART': -1, 'devign': 119, 'regvd': 44, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
198             const FFTSample *w_im_ptr = ff_w_tab_sr + MAX_FFT_SIZE/(4*16) - step;             {'PLBART': -1, 'devign': 50, 'regvd': 9, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
200             offset = ff_fft_offsets_lut[n] << nbits;                                          {'PLBART': -1, 'devign': 112, 'regvd': 41, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
202             tmpz = z + offset;                                                                {'PLBART': -1, 'devign': 9, 'regvd': 100, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
206             tmp5 = tmpz[ n2].re + tmpz[n34].re;                                               {'PLBART': -1, 'devign': 51, 'regvd': 32, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
208             tmp1 = tmpz[ n2].re - tmpz[n34].re;                                               {'PLBART': -1, 'devign': 68, 'regvd': 23, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
210             tmp6 = tmpz[ n2].im + tmpz[n34].im;                                               {'PLBART': -1, 'devign': 27, 'regvd': 29, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
212             tmp2 = tmpz[ n2].im - tmpz[n34].im;                                               {'PLBART': -1, 'devign': 66, 'regvd': 30, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
216             tmpz[ n2].re = tmpz[ 0].re - tmp5;                                                {'PLBART': -1, 'devign': 28, 'regvd': 37, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
218             tmpz[  0].re = tmpz[ 0].re + tmp5;                                                {'PLBART': -1, 'devign': 52, 'regvd': 90, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
220             tmpz[ n2].im = tmpz[ 0].im - tmp6;                                                {'PLBART': -1, 'devign': 25, 'regvd': 31, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
222             tmpz[  0].im = tmpz[ 0].im + tmp6;                                                {'PLBART': -1, 'devign': 30, 'regvd': 86, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
224             tmpz[n34].re = tmpz[n4].re - tmp2;                                                {'PLBART': -1, 'devign': 41, 'regvd': 35, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
226             tmpz[ n4].re = tmpz[n4].re + tmp2;                                                {'PLBART': -1, 'devign': 47, 'regvd': 51, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
228             tmpz[n34].im = tmpz[n4].im + tmp1;                                                {'PLBART': -1, 'devign': 7, 'regvd': 39, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
230             tmpz[ n4].im = tmpz[n4].im - tmp1;                                                {'PLBART': -1, 'devign': 14, 'regvd': 46, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
234             for (i=1; i<n4; i++){                                                             {'PLBART': -1, 'devign': 3, 'regvd': 85, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
236                 FFTSample w_re = w_re_ptr[0];                                                 {'PLBART': -1, 'devign': 111, 'regvd': 99, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
238                 FFTSample w_im = w_im_ptr[0];                                                 {'PLBART': -1, 'devign': 103, 'regvd': 98, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
240                 accu  = (int64_t)w_re*tmpz[ n2+i].re;                                         {'PLBART': -1, 'devign': 64, 'regvd': 7, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
242                 accu += (int64_t)w_im*tmpz[ n2+i].im;                                         {'PLBART': -1, 'devign': 61, 'regvd': 6, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
244                 tmp1 = (int32_t)((accu + 0x40000000) >> 31);                                  {'PLBART': -1, 'devign': 23, 'regvd': 22, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
246                 accu  = (int64_t)w_re*tmpz[ n2+i].im;                                         {'PLBART': -1, 'devign': 34, 'regvd': 2, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
248                 accu -= (int64_t)w_im*tmpz[ n2+i].re;                                         {'PLBART': -1, 'devign': 59, 'regvd': 0, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
250                 tmp2 = (int32_t)((accu + 0x40000000) >> 31);                                  {'PLBART': -1, 'devign': 19, 'regvd': 21, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
252                 accu  = (int64_t)w_re*tmpz[n34+i].re;                                         {'PLBART': -1, 'devign': 65, 'regvd': 8, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
254                 accu -= (int64_t)w_im*tmpz[n34+i].im;                                         {'PLBART': -1, 'devign': 63, 'regvd': 1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
256                 tmp3 = (int32_t)((accu + 0x40000000) >> 31);                                  {'PLBART': -1, 'devign': 22, 'regvd': 20, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
258                 accu  = (int64_t)w_re*tmpz[n34+i].im;                                         {'PLBART': -1, 'devign': 33, 'regvd': 5, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
260                 accu += (int64_t)w_im*tmpz[n34+i].re;                                         {'PLBART': -1, 'devign': 60, 'regvd': 4, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
262                 tmp4 = (int32_t)((accu + 0x40000000) >> 31);                                  {'PLBART': -1, 'devign': 18, 'regvd': 19, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
266                 tmp5 = tmp1 + tmp3;                                                           {'PLBART': -1, 'devign': 72, 'regvd': 113, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
268                 tmp1 = tmp1 - tmp3;                                                           {'PLBART': -1, 'devign': 114, 'regvd': 119, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
270                 tmp6 = tmp2 + tmp4;                                                           {'PLBART': -1, 'devign': 69, 'regvd': 108, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
272                 tmp2 = tmp2 - tmp4;                                                           {'PLBART': -1, 'devign': 118, 'regvd': 116, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
276                 tmpz[ n2+i].re = tmpz[   i].re - tmp5;                                        {'PLBART': -1, 'devign': 40, 'regvd': 40, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
278                 tmpz[    i].re = tmpz[   i].re + tmp5;                                        {'PLBART': -1, 'devign': 80, 'regvd': 97, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
280                 tmpz[ n2+i].im = tmpz[   i].im - tmp6;                                        {'PLBART': -1, 'devign': 32, 'regvd': 36, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
282                 tmpz[    i].im = tmpz[   i].im + tmp6;                                        {'PLBART': -1, 'devign': 79, 'regvd': 96, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
284                 tmpz[n34+i].re = tmpz[n4+i].re - tmp2;                                        {'PLBART': -1, 'devign': 5, 'regvd': 25, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
286                 tmpz[ n4+i].re = tmpz[n4+i].re + tmp2;                                        {'PLBART': -1, 'devign': 24, 'regvd': 49, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
288                 tmpz[n34+i].im = tmpz[n4+i].im + tmp1;                                        {'PLBART': -1, 'devign': 6, 'regvd': 38, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
290                 tmpz[ n4+i].im = tmpz[n4+i].im - tmp1;                                        {'PLBART': -1, 'devign': 4, 'regvd': 34, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
294                 w_re_ptr += step;                                                             {'PLBART': -1, 'devign': 109, 'regvd': 122, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
296                 w_im_ptr -= step;                                                             {'PLBART': -1, 'devign': 106, 'regvd': 111, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
298             }                                                                                 {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
300         }                                                                                     {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
302         step >>= 1;                                                                           {'PLBART': -1, 'devign': 99, 'regvd': 124, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
304         n4   <<= 1;                                                                           {'PLBART': -1, 'devign': 43, 'regvd': 117, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
306     }                                                                                         {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
308 }                                                                                             {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
-----------------------
Highlighted lines: 
--------------------------------------------------------------------------------------------------------------
Example ids:  21925 project:  FFmpeg commit id:  2c90316b46fce5785bc6af72c8fd369c31666604 Number of lines:  171 tground truth:  1
Original lines: 
Predicted Correctly by :  ['codebert', 'PLBART', 'devign', 'vulberta_cnn', 'vulberta_mlp']
0 static int hls_read_header(AVFormatContext *s)                                                                       {'codebert': 1, 'PLBART': 2, 'devign': 62, 'vulberta_cnn': 82, 'vulberta_mlp': 19}
2 {                                                                                                                    {'codebert': 2, 'PLBART': 11, 'devign': -1, 'vulberta_cnn': 35, 'vulberta_mlp': 96}
4     void *u = (s->flags & AVFMT_FLAG_CUSTOM_IO) ? NULL : s->pb;                                                      {'codebert': 0, 'PLBART': 0, 'devign': 54, 'vulberta_cnn': 62, 'vulberta_mlp': 25}
6     HLSContext *c = s->priv_data;                                                                                    {'codebert': 3, 'PLBART': 3, 'devign': 37, 'vulberta_cnn': 46, 'vulberta_mlp': 42}
8     int ret = 0, i;                                                                                                  {'codebert': 15, 'PLBART': 9, 'devign': 34, 'vulberta_cnn': 53, 'vulberta_mlp': 95}
10     int highest_cur_seq_no = 0;                                                                                     {'codebert': 9, 'PLBART': 6, 'devign': 12, 'vulberta_cnn': 16, 'vulberta_mlp': 35}
14     c->ctx                = s;                                                                                      {'codebert': 7, 'PLBART': 8, 'devign': 120, 'vulberta_cnn': 27, 'vulberta_mlp': 94}
16     c->interrupt_callback = &s->interrupt_callback;                                                                 {'codebert': 16, 'PLBART': 4, 'devign': 69, 'vulberta_cnn': 81, 'vulberta_mlp': 28}
18     c->strict_std_compliance = s->strict_std_compliance;                                                            {'codebert': 11, 'PLBART': 1, 'devign': 124, 'vulberta_cnn': 66, 'vulberta_mlp': 93}
22     c->first_packet = 1;                                                                                            {'codebert': 6, 'PLBART': 7, 'devign': 127, 'vulberta_cnn': 3, 'vulberta_mlp': 92}
24     c->first_timestamp = AV_NOPTS_VALUE;                                                                            {'codebert': 4, 'PLBART': 5, 'devign': 126, 'vulberta_cnn': 38, 'vulberta_mlp': 91}
26     c->cur_timestamp = AV_NOPTS_VALUE;                                                                              {'codebert': 19, 'PLBART': 10, 'devign': 45, 'vulberta_cnn': 91, 'vulberta_mlp': 90}
30     if (u) {                                                                                                        {'codebert': 5, 'PLBART': -1, 'devign': 111, 'vulberta_cnn': 87, 'vulberta_mlp': 15}
32         // get the previous user agent & set back to null if string size is zero                                    {'codebert': 14, 'PLBART': -1, 'devign': 110, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
34         update_options(&c->user_agent, "user-agent", u);                                                            {'codebert': 12, 'PLBART': -1, 'devign': 109, 'vulberta_cnn': 15, 'vulberta_mlp': 11}
38         // get the previous cookies & set back to null if string size is zero                                       {'codebert': 18, 'PLBART': -1, 'devign': 108, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
40         update_options(&c->cookies, "cookies", u);                                                                  {'codebert': 13, 'PLBART': -1, 'devign': 107, 'vulberta_cnn': 4, 'vulberta_mlp': 5}
44         // get the previous headers & set back to null if string size is zero                                       {'codebert': 17, 'PLBART': -1, 'devign': 106, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
46         update_options(&c->headers, "headers", u);                                                                  {'codebert': 8, 'PLBART': -1, 'devign': 105, 'vulberta_cnn': 6, 'vulberta_mlp': 6}
50         // get the previous http proxt & set back to null if string size is zero                                    {'codebert': 10, 'PLBART': -1, 'devign': 104, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
52         update_options(&c->http_proxy, "http_proxy", u);                                                            {'codebert': -1, 'PLBART': -1, 'devign': 103, 'vulberta_cnn': 2, 'vulberta_mlp': 8}
54     }                                                                                                               {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 44, 'vulberta_mlp': 0}
58     if ((ret = parse_playlist(c, s->filename, NULL, s->pb)) < 0)                                                    {'codebert': -1, 'PLBART': -1, 'devign': 9, 'vulberta_cnn': 13, 'vulberta_mlp': 14}
60         goto fail;                                                                                                  {'codebert': -1, 'PLBART': -1, 'devign': 33, 'vulberta_cnn': 73, 'vulberta_mlp': 2}
64     if ((ret = save_avio_options(s)) < 0)                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 10, 'vulberta_cnn': 67, 'vulberta_mlp': 34}
66         goto fail;                                                                                                  {'codebert': -1, 'PLBART': -1, 'devign': 32, 'vulberta_cnn': 59, 'vulberta_mlp': 89}
70     /* Some HLS servers don't like being sent the range header */                                                   {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
72     av_dict_set(&c->avio_opts, "seekable", "0", 0);                                                                 {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 1, 'vulberta_mlp': 21}
76     if (c->n_variants == 0) {                                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 77, 'vulberta_cnn': 61, 'vulberta_mlp': 3}
78         av_log(NULL, AV_LOG_WARNING, "Empty playlist\n");                                                           {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 47, 'vulberta_mlp': 22}
80         ret = AVERROR_EOF;                                                                                          {'codebert': -1, 'PLBART': -1, 'devign': 86, 'vulberta_cnn': 17, 'vulberta_mlp': 32}
82         goto fail;                                                                                                  {'codebert': -1, 'PLBART': -1, 'devign': 31, 'vulberta_cnn': 64, 'vulberta_mlp': 88}
84     }                                                                                                               {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 39, 'vulberta_mlp': 87}
86     /* If the playlist only contained playlists (Master Playlist),                                                  {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
88      * parse each individual playlist. */                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 102, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
90     if (c->n_playlists > 1 || c->playlists[0]->n_segments == 0) {                                                   {'codebert': -1, 'PLBART': -1, 'devign': 115, 'vulberta_cnn': 0, 'vulberta_mlp': 50}
92         for (i = 0; i < c->n_playlists; i++) {                                                                      {'codebert': -1, 'PLBART': -1, 'devign': 2, 'vulberta_cnn': 7, 'vulberta_mlp': 86}
94             struct playlist *pls = c->playlists[i];                                                                 {'codebert': -1, 'PLBART': -1, 'devign': 16, 'vulberta_cnn': 25, 'vulberta_mlp': 33}
96             if ((ret = parse_playlist(c, pls->url, pls, NULL)) < 0)                                                 {'codebert': -1, 'PLBART': -1, 'devign': 7, 'vulberta_cnn': 18, 'vulberta_mlp': 24}
98                 goto fail;                                                                                          {'codebert': -1, 'PLBART': -1, 'devign': 30, 'vulberta_cnn': 77, 'vulberta_mlp': 4}
100         }                                                                                                          {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 57, 'vulberta_mlp': 85}
102     }                                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 65, 'vulberta_mlp': 84}
106     if (c->variants[0]->playlists[0]->n_segments == 0) {                                                           {'codebert': -1, 'PLBART': -1, 'devign': 60, 'vulberta_cnn': 32, 'vulberta_mlp': 27}
108         av_log(NULL, AV_LOG_WARNING, "Empty playlist\n");                                                          {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 79, 'vulberta_mlp': 16}
110         ret = AVERROR_EOF;                                                                                         {'codebert': -1, 'PLBART': -1, 'devign': 85, 'vulberta_cnn': 72, 'vulberta_mlp': 83}
112         goto fail;                                                                                                 {'codebert': -1, 'PLBART': -1, 'devign': 29, 'vulberta_cnn': 31, 'vulberta_mlp': 18}
114     }                                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 43, 'vulberta_mlp': 82}
118     /* If this isn't a live stream, calculate the total duration of the                                            {'codebert': -1, 'PLBART': -1, 'devign': 101, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
120      * stream. */                                                                                                  {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
122     if (c->variants[0]->playlists[0]->finished) {                                                                  {'codebert': -1, 'PLBART': -1, 'devign': 114, 'vulberta_cnn': 93, 'vulberta_mlp': 20}
124         int64_t duration = 0;                                                                                      {'codebert': -1, 'PLBART': -1, 'devign': 13, 'vulberta_cnn': 69, 'vulberta_mlp': 13}
126         for (i = 0; i < c->variants[0]->playlists[0]->n_segments; i++)                                             {'codebert': -1, 'PLBART': -1, 'devign': 5, 'vulberta_cnn': 95, 'vulberta_mlp': 12}
128             duration += c->variants[0]->playlists[0]->segments[i]->duration;                                       {'codebert': -1, 'PLBART': -1, 'devign': 11, 'vulberta_cnn': 40, 'vulberta_mlp': 23}
130         s->duration = duration;                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': 65, 'vulberta_cnn': 88, 'vulberta_mlp': 17}
132     }                                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 63, 'vulberta_mlp': 81}
136     /* Associate renditions with variants */                                                                       {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
138     for (i = 0; i < c->n_variants; i++) {                                                                          {'codebert': -1, 'PLBART': -1, 'devign': 4, 'vulberta_cnn': 86, 'vulberta_mlp': 9}
140         struct variant *var = c->variants[i];                                                                      {'codebert': -1, 'PLBART': -1, 'devign': 41, 'vulberta_cnn': 49, 'vulberta_mlp': 31}
144         if (var->audio_group[0])                                                                                   {'codebert': -1, 'PLBART': -1, 'devign': 61, 'vulberta_cnn': 76, 'vulberta_mlp': 41}
146             add_renditions_to_variant(c, var, AVMEDIA_TYPE_AUDIO, var->audio_group);                               {'codebert': -1, 'PLBART': -1, 'devign': 73, 'vulberta_cnn': 34, 'vulberta_mlp': 48}
148         if (var->video_group[0])                                                                                   {'codebert': -1, 'PLBART': -1, 'devign': 57, 'vulberta_cnn': 37, 'vulberta_mlp': 80}
150             add_renditions_to_variant(c, var, AVMEDIA_TYPE_VIDEO, var->video_group);                               {'codebert': -1, 'PLBART': -1, 'devign': 74, 'vulberta_cnn': 28, 'vulberta_mlp': 79}
152         if (var->subtitles_group[0])                                                                               {'codebert': -1, 'PLBART': -1, 'devign': 55, 'vulberta_cnn': 94, 'vulberta_mlp': 78}
154             add_renditions_to_variant(c, var, AVMEDIA_TYPE_SUBTITLE, var->subtitles_group);                        {'codebert': -1, 'PLBART': -1, 'devign': 72, 'vulberta_cnn': 84, 'vulberta_mlp': 77}
156     }                                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 75, 'vulberta_mlp': 76}
160     /* Create a program for each variant */                                                                        {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
162     for (i = 0; i < c->n_variants; i++) {                                                                          {'codebert': -1, 'PLBART': -1, 'devign': 3, 'vulberta_cnn': 68, 'vulberta_mlp': 29}
164         struct variant *v = c->variants[i];                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 40, 'vulberta_cnn': 36, 'vulberta_mlp': 75}
166         AVProgram *program;                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 130, 'vulberta_cnn': 60, 'vulberta_mlp': 26}
170         program = av_new_program(s, i);                                                                            {'codebert': -1, 'PLBART': -1, 'devign': 117, 'vulberta_cnn': 20, 'vulberta_mlp': 74}
172         if (!program)                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': 83, 'vulberta_cnn': 78, 'vulberta_mlp': 73}
174             goto fail;                                                                                             {'codebert': -1, 'PLBART': -1, 'devign': 28, 'vulberta_cnn': 52, 'vulberta_mlp': 72}
176         av_dict_set_int(&program->metadata, "variant_bitrate", v->bandwidth, 0);                                   {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 70, 'vulberta_mlp': 71}
178     }                                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 58, 'vulberta_mlp': 70}
182     /* Select the starting segments */                                                                             {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
184     for (i = 0; i < c->n_playlists; i++) {                                                                         {'codebert': -1, 'PLBART': -1, 'devign': 1, 'vulberta_cnn': 83, 'vulberta_mlp': 47}
186         struct playlist *pls = c->playlists[i];                                                                    {'codebert': -1, 'PLBART': -1, 'devign': 15, 'vulberta_cnn': 10, 'vulberta_mlp': 43}
190         if (pls->n_segments == 0)                                                                                  {'codebert': -1, 'PLBART': -1, 'devign': 48, 'vulberta_cnn': 26, 'vulberta_mlp': 39}
192             continue;                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': 67, 'vulberta_cnn': 42, 'vulberta_mlp': 7}
196         pls->cur_seq_no = select_cur_seq_no(c, pls);                                                               {'codebert': -1, 'PLBART': -1, 'devign': 59, 'vulberta_cnn': 71, 'vulberta_mlp': 44}
198         highest_cur_seq_no = FFMAX(highest_cur_seq_no, pls->cur_seq_no);                                           {'codebert': -1, 'PLBART': -1, 'devign': 43, 'vulberta_cnn': 30, 'vulberta_mlp': 69}
200     }                                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 29, 'vulberta_mlp': 68}
204     /* Open the demuxer for each playlist */                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 100, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
206     for (i = 0; i < c->n_playlists; i++) {                                                                         {'codebert': -1, 'PLBART': -1, 'devign': 0, 'vulberta_cnn': 89, 'vulberta_mlp': 30}
208         struct playlist *pls = c->playlists[i];                                                                    {'codebert': -1, 'PLBART': -1, 'devign': 14, 'vulberta_cnn': 48, 'vulberta_mlp': 67}
210         AVInputFormat *in_fmt = NULL;                                                                              {'codebert': -1, 'PLBART': -1, 'devign': 49, 'vulberta_cnn': 8, 'vulberta_mlp': 38}
214         if (!(pls->ctx = avformat_alloc_context())) {                                                              {'codebert': -1, 'PLBART': -1, 'devign': 44, 'vulberta_cnn': 5, 'vulberta_mlp': 46}
216             ret = AVERROR(ENOMEM);                                                                                 {'codebert': -1, 'PLBART': -1, 'devign': 113, 'vulberta_cnn': 45, 'vulberta_mlp': 66}
218             goto fail;                                                                                             {'codebert': -1, 'PLBART': -1, 'devign': 27, 'vulberta_cnn': 33, 'vulberta_mlp': 65}
220         }                                                                                                          {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 50, 'vulberta_mlp': 64}
224         if (pls->n_segments == 0)                                                                                  {'codebert': -1, 'PLBART': -1, 'devign': 47, 'vulberta_cnn': 85, 'vulberta_mlp': 37}
226             continue;                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': 66, 'vulberta_cnn': 51, 'vulberta_mlp': 1}
230         pls->index  = i;                                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 123, 'vulberta_cnn': 19, 'vulberta_mlp': 63}
232         pls->needed = 1;                                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 129, 'vulberta_cnn': 80, 'vulberta_mlp': 62}
234         pls->parent = s;                                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 118, 'vulberta_cnn': 55, 'vulberta_mlp': 61}
238         /*                                                                                                         {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
240          * If this is a live stream and this playlist looks like it is one segment                                 {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
242          * behind, try to sync it up so that every substream starts at the same                                    {'codebert': -1, 'PLBART': -1, 'devign': 99, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
244          * time position (so e.g. avformat_find_stream_info() will see packets from                                {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
246          * all active streams within the first few seconds). This is not very generic,                             {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
248          * though, as the sequence numbers are technically independent.                                            {'codebert': -1, 'PLBART': -1, 'devign': 98, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
250          */                                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
252         if (!pls->finished && pls->cur_seq_no == highest_cur_seq_no - 1 &&                                         {'codebert': -1, 'PLBART': -1, 'devign': 71, 'vulberta_cnn': 92, 'vulberta_mlp': 60}
254             highest_cur_seq_no < pls->start_seq_no + pls->n_segments) {                                            {'codebert': -1, 'PLBART': -1, 'devign': 97, 'vulberta_cnn': 9, 'vulberta_mlp': 45}
256             pls->cur_seq_no = highest_cur_seq_no;                                                                  {'codebert': -1, 'PLBART': -1, 'devign': 70, 'vulberta_cnn': 22, 'vulberta_mlp': 59}
258         }                                                                                                          {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 56, 'vulberta_mlp': 58}
262         pls->read_buffer = av_malloc(INITIAL_BUFFER_SIZE);                                                         {'codebert': -1, 'PLBART': -1, 'devign': 50, 'vulberta_cnn': 11, 'vulberta_mlp': 57}
264         if (!pls->read_buffer){                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': 42, 'vulberta_cnn': 12, 'vulberta_mlp': 56}
266             ret = AVERROR(ENOMEM);                                                                                 {'codebert': -1, 'PLBART': -1, 'devign': 112, 'vulberta_cnn': 14, 'vulberta_mlp': 55}
268             avformat_free_context(pls->ctx);                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 81, 'vulberta_cnn': 90, 'vulberta_mlp': 40}
270             pls->ctx = NULL;                                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 53, 'vulberta_cnn': 23, 'vulberta_mlp': 54}
272             goto fail;                                                                                             {'codebert': -1, 'PLBART': -1, 'devign': 26, 'vulberta_cnn': 21, 'vulberta_mlp': 53}
274         }                                                                                                          {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 41, 'vulberta_mlp': 52}
276         ffio_init_context(&pls->pb, pls->read_buffer, INITIAL_BUFFER_SIZE, 0, pls,                                 {'codebert': -1, 'PLBART': -1, 'devign': 96, 'vulberta_cnn': 96, 'vulberta_mlp': 49}
278                           read_data, NULL, NULL);                                                                  {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 24, 'vulberta_mlp': 51}
280         pls->pb.seekable = 0;                                                                                      {'codebert': -1, 'PLBART': -1, 'devign': 63, 'vulberta_cnn': 54, 'vulberta_mlp': 36}
282         ret = av_probe_input_buffer(&pls->pb, &in_fmt, pls->segments[0]->url,                                      {'codebert': -1, 'PLBART': -1, 'devign': 95, 'vulberta_cnn': 74, 'vulberta_mlp': 10}
284                                     NULL, 0, 0);                                                                   {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
286         if (ret < 0) {                                                                                             {'codebert': -1, 'PLBART': -1, 'devign': 20, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
288             /* Free the ctx - it isn't initialized properly at this point,                                         {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
290              * so avformat_close_input shouldn't be called. If                                                     {'codebert': -1, 'PLBART': -1, 'devign': 94, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
292              * avformat_open_input fails below, it frees and zeros the                                             {'codebert': -1, 'PLBART': -1, 'devign': 93, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
294              * context, so it doesn't need any special treatment like this. */                                     {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
296             av_log(s, AV_LOG_ERROR, "Error when loading first segment '%s'\n", pls->segments[0]->url);             {'codebert': -1, 'PLBART': -1, 'devign': 92, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
298             avformat_free_context(pls->ctx);                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 80, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
300             pls->ctx = NULL;                                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 52, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
302             goto fail;                                                                                             {'codebert': -1, 'PLBART': -1, 'devign': 25, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
304         }                                                                                                          {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
306         pls->ctx->pb       = &pls->pb;                                                                             {'codebert': -1, 'PLBART': -1, 'devign': 84, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
308         pls->ctx->io_open  = nested_io_open;                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 56, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
312         if ((ret = ff_copy_whiteblacklists(pls->ctx, s)) < 0)                                                      {'codebert': -1, 'PLBART': -1, 'devign': 8, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
314             goto fail;                                                                                             {'codebert': -1, 'PLBART': -1, 'devign': 24, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
318         ret = avformat_open_input(&pls->ctx, pls->segments[0]->url, in_fmt, NULL);                                 {'codebert': -1, 'PLBART': -1, 'devign': 6, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
320         if (ret < 0)                                                                                               {'codebert': -1, 'PLBART': -1, 'devign': 19, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
322             goto fail;                                                                                             {'codebert': -1, 'PLBART': -1, 'devign': 23, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
326         if (pls->id3_deferred_extra && pls->ctx->nb_streams == 1) {                                                {'codebert': -1, 'PLBART': -1, 'devign': 51, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
328             ff_id3v2_parse_apic(pls->ctx, &pls->id3_deferred_extra);                                               {'codebert': -1, 'PLBART': -1, 'devign': 122, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
330             avformat_queue_attached_pictures(pls->ctx);                                                            {'codebert': -1, 'PLBART': -1, 'devign': 64, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
332             ff_id3v2_free_extra_meta(&pls->id3_deferred_extra);                                                    {'codebert': -1, 'PLBART': -1, 'devign': 125, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
334             pls->id3_deferred_extra = NULL;                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 116, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
336         }                                                                                                          {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
340         if (pls->is_id3_timestamped == -1)                                                                         {'codebert': -1, 'PLBART': -1, 'devign': 46, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
342             av_log(s, AV_LOG_WARNING, "No expected HTTP requests have been made\n");                               {'codebert': -1, 'PLBART': -1, 'devign': 91, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
346         /*                                                                                                         {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
348          * For ID3 timestamped raw audio streams we need to detect the packet                                      {'codebert': -1, 'PLBART': -1, 'devign': 90, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
350          * durations to calculate timestamps in fill_timing_for_id3_timestamped_stream(),                          {'codebert': -1, 'PLBART': -1, 'devign': 89, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
352          * but for other streams we can rely on our user calling avformat_find_stream_info()                       {'codebert': -1, 'PLBART': -1, 'devign': 88, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
354          * on us if they want to.                                                                                  {'codebert': -1, 'PLBART': -1, 'devign': 87, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
356          */                                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
358         if (pls->is_id3_timestamped) {                                                                             {'codebert': -1, 'PLBART': -1, 'devign': 82, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
360             ret = avformat_find_stream_info(pls->ctx, NULL);                                                       {'codebert': -1, 'PLBART': -1, 'devign': 39, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
362             if (ret < 0)                                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 18, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
364                 goto fail;                                                                                         {'codebert': -1, 'PLBART': -1, 'devign': 22, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
366         }                                                                                                          {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
370         pls->has_noheader_flag = !!(pls->ctx->ctx_flags & AVFMTCTX_NOHEADER);                                      {'codebert': -1, 'PLBART': -1, 'devign': 68, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
374         /* Create new AVStreams for each stream in this playlist */                                                {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
376         ret = update_streams_from_subdemuxer(s, pls);                                                              {'codebert': -1, 'PLBART': -1, 'devign': 58, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
378         if (ret < 0)                                                                                               {'codebert': -1, 'PLBART': -1, 'devign': 17, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
380             goto fail;                                                                                             {'codebert': -1, 'PLBART': -1, 'devign': 21, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
384         add_metadata_from_renditions(s, pls, AVMEDIA_TYPE_AUDIO);                                                  {'codebert': -1, 'PLBART': -1, 'devign': 128, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
386         add_metadata_from_renditions(s, pls, AVMEDIA_TYPE_VIDEO);                                                  {'codebert': -1, 'PLBART': -1, 'devign': 119, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
388         add_metadata_from_renditions(s, pls, AVMEDIA_TYPE_SUBTITLE);                                               {'codebert': -1, 'PLBART': -1, 'devign': 121, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
390     }                                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
394     update_noheader_flag(s);                                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 75, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
398     return 0;                                                                                                      {'codebert': -1, 'PLBART': -1, 'devign': 35, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
400 fail:                                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': 38, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
402     free_playlist_list(c);                                                                                         {'codebert': -1, 'PLBART': -1, 'devign': 79, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
404     free_variant_list(c);                                                                                          {'codebert': -1, 'PLBART': -1, 'devign': 76, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
406     free_rendition_list(c);                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 78, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
408     return ret;                                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': 36, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
410 }                                                                                                                  {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
-----------------------
Highlighted lines: 
22     c->first_packet = 1;
46         update_options(&c->headers, "headers", u);
--------------------------------------------------------------------------------------------------------------
Example ids:  22316 project:  FFmpeg commit id:  5952b8da0b7f65dfa23991e71737e0abdaeb339c Number of lines:  77 tground truth:  1
Original lines: 
Predicted Correctly by :  ['codebert', 'PLBART', 'devign', 'regvd', 'vulberta_cnn', 'vulberta_mlp']
0 static int seek_test(const char *input_filename, const char *start, const char *end)                {'codebert': 2, 'PLBART': 0, 'devign': 24, 'regvd': 17, 'vulberta_cnn': 17, 'vulberta_mlp': 27}
2 {                                                                                                   {'codebert': 17, 'PLBART': 14, 'devign': -1, 'regvd': 66, 'vulberta_cnn': 31, 'vulberta_mlp': 75}
4     AVCodec *codec = NULL;                                                                          {'codebert': 11, 'PLBART': 6, 'devign': 45, 'regvd': 37, 'vulberta_cnn': 49, 'vulberta_mlp': 18}
6     AVCodecContext *ctx= NULL;                                                                      {'codebert': 16, 'PLBART': 5, 'devign': 38, 'regvd': 33, 'vulberta_cnn': 32, 'vulberta_mlp': 57}
8     AVCodecParameters *origin_par = NULL;                                                           {'codebert': 4, 'PLBART': 4, 'devign': 39, 'regvd': 19, 'vulberta_cnn': 23, 'vulberta_mlp': 46}
10     AVFrame *fr = NULL;                                                                            {'codebert': 8, 'PLBART': 7, 'devign': 42, 'regvd': 41, 'vulberta_cnn': 1, 'vulberta_mlp': 56}
12     AVFormatContext *fmt_ctx = NULL;                                                               {'codebert': 9, 'PLBART': 3, 'devign': 21, 'regvd': 23, 'vulberta_cnn': 55, 'vulberta_mlp': 47}
14     int video_stream;                                                                              {'codebert': 3, 'PLBART': 11, 'devign': 50, 'regvd': 40, 'vulberta_cnn': 42, 'vulberta_mlp': 45}
16     int result;                                                                                    {'codebert': 24, 'PLBART': 12, 'devign': 25, 'regvd': 54, 'vulberta_cnn': 35, 'vulberta_mlp': 74}
18     int i, j;                                                                                      {'codebert': 23, 'PLBART': 13, 'devign': 40, 'regvd': 52, 'vulberta_cnn': 70, 'vulberta_mlp': 73}
20     long int start_ts, end_ts;                                                                     {'codebert': 20, 'PLBART': 2, 'devign': 54, 'regvd': 31, 'vulberta_cnn': 61, 'vulberta_mlp': 59}
24     size_of_array = 0;                                                                             {'codebert': 13, 'PLBART': 8, 'devign': 53, 'regvd': 38, 'vulberta_cnn': 16, 'vulberta_mlp': 72}
26     number_of_elements = 0;                                                                        {'codebert': 15, 'PLBART': 9, 'devign': 52, 'regvd': 34, 'vulberta_cnn': 51, 'vulberta_mlp': 25}
28     crc_array = pts_array = NULL;                                                                  {'codebert': 6, 'PLBART': 1, 'devign': 46, 'regvd': 36, 'vulberta_cnn': 52, 'vulberta_mlp': 12}
32     result = avformat_open_input(&fmt_ctx, input_filename, NULL, NULL);                            {'codebert': 0, 'PLBART': 10, 'devign': 19, 'regvd': 3, 'vulberta_cnn': 69, 'vulberta_mlp': 14}
34     if (result < 0) {                                                                              {'codebert': 19, 'PLBART': -1, 'devign': 3, 'regvd': 48, 'vulberta_cnn': 41, 'vulberta_mlp': 71}
36         av_log(NULL, AV_LOG_ERROR, "Can't open file\n");                                           {'codebert': 12, 'PLBART': -1, 'devign': -1, 'regvd': 15, 'vulberta_cnn': 27, 'vulberta_mlp': 13}
38         return result;                                                                             {'codebert': 26, 'PLBART': -1, 'devign': 8, 'regvd': 64, 'vulberta_cnn': 67, 'vulberta_mlp': 38}
40     }                                                                                              {'codebert': 22, 'PLBART': -1, 'devign': -1, 'regvd': 76, 'vulberta_cnn': 44, 'vulberta_mlp': 6}
44     result = avformat_find_stream_info(fmt_ctx, NULL);                                             {'codebert': 5, 'PLBART': -1, 'devign': 22, 'regvd': 2, 'vulberta_cnn': 59, 'vulberta_mlp': 17}
46     if (result < 0) {                                                                              {'codebert': 25, 'PLBART': -1, 'devign': 2, 'regvd': 47, 'vulberta_cnn': 30, 'vulberta_mlp': 19}
48         av_log(NULL, AV_LOG_ERROR, "Can't get stream info\n");                                     {'codebert': 14, 'PLBART': -1, 'devign': -1, 'regvd': 7, 'vulberta_cnn': 29, 'vulberta_mlp': 7}
50         return result;                                                                             {'codebert': 21, 'PLBART': -1, 'devign': 7, 'regvd': 63, 'vulberta_cnn': 40, 'vulberta_mlp': 70}
52     }                                                                                              {'codebert': 1, 'PLBART': -1, 'devign': -1, 'regvd': 75, 'vulberta_cnn': 39, 'vulberta_mlp': 5}
56     start_ts = read_seek_range(start);                                                             {'codebert': 7, 'PLBART': -1, 'devign': 43, 'regvd': 26, 'vulberta_cnn': 43, 'vulberta_mlp': 20}
58     end_ts = read_seek_range(end);                                                                 {'codebert': 10, 'PLBART': -1, 'devign': 36, 'regvd': 24, 'vulberta_cnn': 50, 'vulberta_mlp': 28}
60     if ((start_ts < 0) || (end_ts < 0))                                                            {'codebert': 18, 'PLBART': -1, 'devign': 11, 'regvd': 27, 'vulberta_cnn': 12, 'vulberta_mlp': 50}
62         return -1;                                                                                 {'codebert': -1, 'PLBART': -1, 'devign': 18, 'regvd': 60, 'vulberta_cnn': 62, 'vulberta_mlp': 69}
66     //TODO: add ability to work with audio format                                                  {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 55, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
68     video_stream = av_find_best_stream(fmt_ctx, AVMEDIA_TYPE_VIDEO, -1, -1, NULL, 0);              {'codebert': -1, 'PLBART': -1, 'devign': 32, 'regvd': 0, 'vulberta_cnn': 73, 'vulberta_mlp': 34}
70     if (video_stream < 0) {                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 26, 'regvd': 29, 'vulberta_cnn': 54, 'vulberta_mlp': 29}
72       av_log(NULL, AV_LOG_ERROR, "Can't find video stream in input file\n");                       {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 1, 'vulberta_cnn': 10, 'vulberta_mlp': 33}
74       return -1;                                                                                   {'codebert': -1, 'PLBART': -1, 'devign': 17, 'regvd': 59, 'vulberta_cnn': 38, 'vulberta_mlp': 44}
76     }                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 74, 'vulberta_cnn': 26, 'vulberta_mlp': 4}
80     origin_par = fmt_ctx->streams[video_stream]->codecpar;                                         {'codebert': -1, 'PLBART': -1, 'devign': 37, 'regvd': 13, 'vulberta_cnn': 5, 'vulberta_mlp': 32}
84     codec = avcodec_find_decoder(origin_par->codec_id);                                            {'codebert': -1, 'PLBART': -1, 'devign': 35, 'regvd': 14, 'vulberta_cnn': 65, 'vulberta_mlp': 41}
86     if (!codec) {                                                                                  {'codebert': -1, 'PLBART': -1, 'devign': 31, 'regvd': 49, 'vulberta_cnn': 47, 'vulberta_mlp': 54}
88         av_log(NULL, AV_LOG_ERROR, "Can't find decoder\n");                                        {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 5, 'vulberta_cnn': 0, 'vulberta_mlp': 26}
90         return -1;                                                                                 {'codebert': -1, 'PLBART': -1, 'devign': 16, 'regvd': 58, 'vulberta_cnn': 66, 'vulberta_mlp': 24}
92     }                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 73, 'vulberta_cnn': 37, 'vulberta_mlp': 3}
96     ctx = avcodec_alloc_context3(codec);                                                           {'codebert': -1, 'PLBART': -1, 'devign': 29, 'regvd': 21, 'vulberta_cnn': 3, 'vulberta_mlp': 40}
98     if (!ctx) {                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': 30, 'regvd': 50, 'vulberta_cnn': 45, 'vulberta_mlp': 37}
100         av_log(NULL, AV_LOG_ERROR, "Can't allocate decoder context\n");                           {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 12, 'vulberta_cnn': 25, 'vulberta_mlp': 9}
102         return AVERROR(ENOMEM);                                                                   {'codebert': -1, 'PLBART': -1, 'devign': 34, 'regvd': 45, 'vulberta_cnn': 8, 'vulberta_mlp': 53}
104     }                                                                                             {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 72, 'vulberta_cnn': 34, 'vulberta_mlp': 68}
108     result = avcodec_parameters_to_context(ctx, origin_par);                                      {'codebert': -1, 'PLBART': -1, 'devign': 23, 'regvd': 8, 'vulberta_cnn': 24, 'vulberta_mlp': 48}
110     if (result) {                                                                                 {'codebert': -1, 'PLBART': -1, 'devign': 27, 'regvd': 51, 'vulberta_cnn': 28, 'vulberta_mlp': 49}
112         av_log(NULL, AV_LOG_ERROR, "Can't copy decoder context\n");                               {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 11, 'vulberta_cnn': 6, 'vulberta_mlp': 35}
114         return result;                                                                            {'codebert': -1, 'PLBART': -1, 'devign': 6, 'regvd': 62, 'vulberta_cnn': 60, 'vulberta_mlp': 36}
116     }                                                                                             {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 71, 'vulberta_cnn': 36, 'vulberta_mlp': 2}
120     result = avcodec_open2(ctx, codec, NULL);                                                     {'codebert': -1, 'PLBART': -1, 'devign': 20, 'regvd': 10, 'vulberta_cnn': 15, 'vulberta_mlp': 15}
122     if (result < 0) {                                                                             {'codebert': -1, 'PLBART': -1, 'devign': 1, 'regvd': 46, 'vulberta_cnn': 75, 'vulberta_mlp': 30}
124         av_log(ctx, AV_LOG_ERROR, "Can't open decoder\n");                                        {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 9, 'vulberta_cnn': 74, 'vulberta_mlp': 8}
126         return result;                                                                            {'codebert': -1, 'PLBART': -1, 'devign': 5, 'regvd': 61, 'vulberta_cnn': 53, 'vulberta_mlp': 11}
128     }                                                                                             {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 70, 'vulberta_cnn': 46, 'vulberta_mlp': 1}
132     fr = av_frame_alloc();                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 41, 'regvd': 30, 'vulberta_cnn': 9, 'vulberta_mlp': 23}
134     if (!fr) {                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': 28, 'regvd': 53, 'vulberta_cnn': 57, 'vulberta_mlp': 10}
136         av_log(NULL, AV_LOG_ERROR, "Can't allocate frame\n");                                     {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 16, 'vulberta_cnn': 14, 'vulberta_mlp': 0}
138         return AVERROR(ENOMEM);                                                                   {'codebert': -1, 'PLBART': -1, 'devign': 33, 'regvd': 44, 'vulberta_cnn': 71, 'vulberta_mlp': 22}
140     }                                                                                             {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 69, 'vulberta_cnn': 58, 'vulberta_mlp': 67}
144     result = compute_crc_of_packets(fmt_ctx, video_stream, ctx, fr, i, j, 1);                     {'codebert': -1, 'PLBART': -1, 'devign': 13, 'regvd': 6, 'vulberta_cnn': 20, 'vulberta_mlp': 39}
146     if (result != 0)                                                                              {'codebert': -1, 'PLBART': -1, 'devign': 10, 'regvd': 43, 'vulberta_cnn': 64, 'vulberta_mlp': 52}
148         return -1;                                                                                {'codebert': -1, 'PLBART': -1, 'devign': 15, 'regvd': 57, 'vulberta_cnn': 56, 'vulberta_mlp': 66}
152     for (i = start_ts; i < end_ts; i += 100) {                                                    {'codebert': -1, 'PLBART': -1, 'devign': 4, 'regvd': 18, 'vulberta_cnn': 21, 'vulberta_mlp': 61}
154         for (j = i + 100; j < end_ts; j += 100)                                                   {'codebert': -1, 'PLBART': -1, 'devign': 0, 'regvd': 20, 'vulberta_cnn': 4, 'vulberta_mlp': 60}
156         result = compute_crc_of_packets(fmt_ctx, video_stream, ctx, fr, i, j, 0);                 {'codebert': -1, 'PLBART': -1, 'devign': 12, 'regvd': 4, 'vulberta_cnn': 63, 'vulberta_mlp': 51}
158         if (result != 0)                                                                          {'codebert': -1, 'PLBART': -1, 'devign': 9, 'regvd': 42, 'vulberta_cnn': 18, 'vulberta_mlp': 43}
160             return -1;                                                                            {'codebert': -1, 'PLBART': -1, 'devign': 14, 'regvd': 56, 'vulberta_cnn': 19, 'vulberta_mlp': 65}
162     }                                                                                             {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 68, 'vulberta_cnn': 33, 'vulberta_mlp': 64}
166     av_freep(&crc_array);                                                                         {'codebert': -1, 'PLBART': -1, 'devign': 55, 'regvd': 35, 'vulberta_cnn': 13, 'vulberta_mlp': 16}
168     av_freep(&pts_array);                                                                         {'codebert': -1, 'PLBART': -1, 'devign': 47, 'regvd': 32, 'vulberta_cnn': 2, 'vulberta_mlp': 58}
170     av_frame_free(&fr);                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 48, 'regvd': 39, 'vulberta_cnn': 48, 'vulberta_mlp': 42}
172     avcodec_close(ctx);                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 44, 'regvd': 28, 'vulberta_cnn': 68, 'vulberta_mlp': 55}
174     avformat_close_input(&fmt_ctx);                                                               {'codebert': -1, 'PLBART': -1, 'devign': 49, 'regvd': 22, 'vulberta_cnn': 7, 'vulberta_mlp': 31}
176     avcodec_free_context(&ctx);                                                                   {'codebert': -1, 'PLBART': -1, 'devign': 51, 'regvd': 25, 'vulberta_cnn': 11, 'vulberta_mlp': 21}
178     return 0;                                                                                     {'codebert': -1, 'PLBART': -1, 'devign': 56, 'regvd': 65, 'vulberta_cnn': 22, 'vulberta_mlp': 63}
180 }                                                                                                 {'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 67, 'vulberta_cnn': 72, 'vulberta_mlp': 62}
-----------------------
Highlighted lines: 
10     AVFrame *fr = NULL;
--------------------------------------------------------------------------------------------------------------
Example ids:  23206 project:  FFmpeg commit id:  d7da4d47a6841444f12bf56dfe4230d3e4af8646 Number of lines:  121 tground truth:  1
Original lines: 
Predicted Correctly by :  ['codebert', 'PLBART', 'devign', 'vulberta_cnn', 'vulberta_mlp']
0 static int mxf_read_header(AVFormatContext *s)                                                                                              {'codebert': 18, 'PLBART': 3, 'devign': 40, 'vulberta_cnn': 8, 'vulberta_mlp': 16}
2 {                                                                                                                                           {'codebert': 17, 'PLBART': 11, 'devign': 278, 'vulberta_cnn': 61, 'vulberta_mlp': 94}
4     MXFContext *mxf = s->priv_data;                                                                                                         {'codebert': 14, 'PLBART': 4, 'devign': 61, 'vulberta_cnn': 19, 'vulberta_mlp': 15}
6     KLVPacket klv;                                                                                                                          {'codebert': 8, 'PLBART': 8, 'devign': 70, 'vulberta_cnn': 20, 'vulberta_mlp': 18}
8     int64_t essence_offset = 0;                                                                                                             {'codebert': 20, 'PLBART': 6, 'devign': 71, 'vulberta_cnn': 9, 'vulberta_mlp': 93}
10     int ret;                                                                                                                               {'codebert': 21, 'PLBART': 10, 'devign': 102, 'vulberta_cnn': 32, 'vulberta_mlp': 92}
14     mxf->last_forward_tell = INT64_MAX;                                                                                                    {'codebert': 6, 'PLBART': 2, 'devign': 79, 'vulberta_cnn': 58, 'vulberta_mlp': 91}
16     mxf->edit_units_per_packet = 1;                                                                                                        {'codebert': 7, 'PLBART': 7, 'devign': 80, 'vulberta_cnn': 46, 'vulberta_mlp': 90}
20     if (!mxf_read_sync(s->pb, mxf_header_partition_pack_key, 14)) {                                                                        {'codebert': 12, 'PLBART': 0, 'devign': 15, 'vulberta_cnn': 75, 'vulberta_mlp': 23}
22         av_log(s, AV_LOG_ERROR, "could not find header partition pack key\n");                                                             {'codebert': 15, 'PLBART': 1, 'devign': 20, 'vulberta_cnn': 86, 'vulberta_mlp': 22}
24         return AVERROR_INVALIDDATA;                                                                                                        {'codebert': 16, 'PLBART': 5, 'devign': 67, 'vulberta_cnn': 2, 'vulberta_mlp': 89}
26     }                                                                                                                                      {'codebert': 0, 'PLBART': 12, 'devign': 263, 'vulberta_cnn': 56, 'vulberta_mlp': 88}
28     avio_seek(s->pb, -14, SEEK_CUR);                                                                                                       {'codebert': 2, 'PLBART': 9, 'devign': 26, 'vulberta_cnn': 66, 'vulberta_mlp': 31}
30     mxf->fc = s;                                                                                                                           {'codebert': 19, 'PLBART': -1, 'devign': 78, 'vulberta_cnn': 44, 'vulberta_mlp': 87}
32     mxf->run_in = avio_tell(s->pb);                                                                                                        {'codebert': 13, 'PLBART': -1, 'devign': 45, 'vulberta_cnn': 68, 'vulberta_mlp': 7}
36     while (!url_feof(s->pb)) {                                                                                                             {'codebert': 4, 'PLBART': -1, 'devign': 38, 'vulberta_cnn': 85, 'vulberta_mlp': 9}
38         const MXFMetadataReadTableEntry *metadata;                                                                                         {'codebert': 9, 'PLBART': -1, 'devign': 81, 'vulberta_cnn': 30, 'vulberta_mlp': 10}
42         if (klv_read_packet(&klv, s->pb) < 0) {                                                                                            {'codebert': 1, 'PLBART': -1, 'devign': 3, 'vulberta_cnn': 77, 'vulberta_mlp': 6}
44             /* EOF - seek to previous partition or stop */                                                                                 {'codebert': 5, 'PLBART': -1, 'devign': 99, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
46             if(mxf_parse_handle_partition_or_eof(mxf) <= 0)                                                                                {'codebert': 3, 'PLBART': -1, 'devign': 43, 'vulberta_cnn': 1, 'vulberta_mlp': 21}
48                 break;                                                                                                                     {'codebert': 10, 'PLBART': -1, 'devign': 85, 'vulberta_cnn': 52, 'vulberta_mlp': 86}
50             else                                                                                                                           {'codebert': 11, 'PLBART': -1, 'devign': 98, 'vulberta_cnn': 69, 'vulberta_mlp': 85}
52                 continue;                                                                                                                  {'codebert': -1, 'PLBART': -1, 'devign': 90, 'vulberta_cnn': 29, 'vulberta_mlp': 5}
54         }                                                                                                                                  {'codebert': -1, 'PLBART': -1, 'devign': 246, 'vulberta_cnn': 49, 'vulberta_mlp': 84}
58         PRINT_KEY(s, "read header", klv.key);                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': 12, 'vulberta_cnn': 38, 'vulberta_mlp': 28}
60         av_dlog(s, "size %"PRIu64" offset %#"PRIx64"\n", klv.length, klv.offset);                                                          {'codebert': -1, 'PLBART': -1, 'devign': 1, 'vulberta_cnn': 23, 'vulberta_mlp': 17}
62         if (IS_KLV_KEY(klv.key, mxf_encrypted_triplet_key) ||                                                                              {'codebert': -1, 'PLBART': -1, 'devign': 13, 'vulberta_cnn': 72, 'vulberta_mlp': 11}
64             IS_KLV_KEY(klv.key, mxf_essence_element_key) ||                                                                                {'codebert': -1, 'PLBART': -1, 'devign': 11, 'vulberta_cnn': 40, 'vulberta_mlp': 83}
66             IS_KLV_KEY(klv.key, mxf_avid_essence_element_key) ||                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 10, 'vulberta_cnn': 94, 'vulberta_mlp': 82}
68             IS_KLV_KEY(klv.key, mxf_system_item_key)) {                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': 9, 'vulberta_cnn': 93, 'vulberta_mlp': 34}
72             if (!mxf->current_partition) {                                                                                                 {'codebert': -1, 'PLBART': -1, 'devign': 62, 'vulberta_cnn': 84, 'vulberta_mlp': 81}
74                 av_log(mxf->fc, AV_LOG_ERROR, "found essence prior to first PartitionPack\n");                                             {'codebert': -1, 'PLBART': -1, 'devign': 19, 'vulberta_cnn': 87, 'vulberta_mlp': 3}
76                 return AVERROR_INVALIDDATA;                                                                                                {'codebert': -1, 'PLBART': -1, 'devign': 66, 'vulberta_cnn': 27, 'vulberta_mlp': 12}
78             }                                                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': 231, 'vulberta_cnn': 47, 'vulberta_mlp': 80}
82             if (!mxf->current_partition->essence_offset) {                                                                                 {'codebert': -1, 'PLBART': -1, 'devign': 6, 'vulberta_cnn': 7, 'vulberta_mlp': 79}
84                 /* for OP1a we compute essence_offset                                                                                      {'codebert': -1, 'PLBART': -1, 'devign': 76, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
86                  * for OPAtom we point essence_offset after the KL (usually op1a_essence_offset + 20 or 25)                                {'codebert': -1, 'PLBART': -1, 'devign': 55, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
88                  * TODO: for OP1a we could eliminate this entire if statement, always stopping parsing at op1a_essence_offset              {'codebert': -1, 'PLBART': -1, 'devign': 39, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
90                  *       for OPAtom we still need the actual essence_offset though (the KL's length can vary)                              {'codebert': -1, 'PLBART': -1, 'devign': 46, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
92                  */                                                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 222, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
94                 int64_t op1a_essence_offset =                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': 75, 'vulberta_cnn': 35, 'vulberta_mlp': 78}
96                     round_to_kag(mxf->current_partition->this_partition +                                                                  {'codebert': -1, 'PLBART': -1, 'devign': 77, 'vulberta_cnn': 12, 'vulberta_mlp': 77}
98                                  mxf->current_partition->pack_length,       mxf->current_partition->kag_size) +                            {'codebert': -1, 'PLBART': -1, 'devign': 34, 'vulberta_cnn': 17, 'vulberta_mlp': 36}
100                     round_to_kag(mxf->current_partition->header_byte_count, mxf->current_partition->kag_size) +                           {'codebert': -1, 'PLBART': -1, 'devign': 30, 'vulberta_cnn': 82, 'vulberta_mlp': 14}
102                     round_to_kag(mxf->current_partition->index_byte_count,  mxf->current_partition->kag_size);                            {'codebert': -1, 'PLBART': -1, 'devign': 29, 'vulberta_cnn': 5, 'vulberta_mlp': 13}
106                 if (mxf->op == OPAtom) {                                                                                                  {'codebert': -1, 'PLBART': -1, 'devign': 68, 'vulberta_cnn': 65, 'vulberta_mlp': 24}
108                     /* point essence_offset to the actual data                                                                            {'codebert': -1, 'PLBART': -1, 'devign': 74, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
110                     * OPAtom has all the essence in one big KLV                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 97, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
112                     */                                                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': 210, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
114                     mxf->current_partition->essence_offset = avio_tell(s->pb);                                                            {'codebert': -1, 'PLBART': -1, 'devign': 44, 'vulberta_cnn': 81, 'vulberta_mlp': 19}
116                     mxf->current_partition->essence_length = klv.length;                                                                  {'codebert': -1, 'PLBART': -1, 'devign': 35, 'vulberta_cnn': 39, 'vulberta_mlp': 30}
118                 } else {                                                                                                                  {'codebert': -1, 'PLBART': -1, 'devign': 96, 'vulberta_cnn': 33, 'vulberta_mlp': 8}
120                     /* NOTE: op1a_essence_offset may be less than to klv.offset (C0023S01.mxf)  */                                        {'codebert': -1, 'PLBART': -1, 'devign': 21, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
122                     mxf->current_partition->essence_offset = op1a_essence_offset;                                                         {'codebert': -1, 'PLBART': -1, 'devign': 69, 'vulberta_cnn': 62, 'vulberta_mlp': 76}
124                 }                                                                                                                         {'codebert': -1, 'PLBART': -1, 'devign': 203, 'vulberta_cnn': 34, 'vulberta_mlp': 2}
126             }                                                                                                                             {'codebert': -1, 'PLBART': -1, 'devign': 201, 'vulberta_cnn': 74, 'vulberta_mlp': 75}
130             if (!essence_offset)                                                                                                          {'codebert': -1, 'PLBART': -1, 'devign': 23, 'vulberta_cnn': 83, 'vulberta_mlp': 20}
132                 essence_offset = klv.offset;                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': 33, 'vulberta_cnn': 42, 'vulberta_mlp': 74}
136             /* seek to footer, previous partition or stop */                                                                              {'codebert': -1, 'PLBART': -1, 'devign': 53, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
138             if (mxf_parse_handle_essence(mxf) <= 0)                                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 49, 'vulberta_cnn': 18, 'vulberta_mlp': 29}
140                 break;                                                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': 84, 'vulberta_cnn': 51, 'vulberta_mlp': 73}
142             continue;                                                                                                                     {'codebert': -1, 'PLBART': -1, 'devign': 89, 'vulberta_cnn': 26, 'vulberta_mlp': 72}
144         } else if (!memcmp(klv.key, mxf_header_partition_pack_key, 13) &&                                                                 {'codebert': -1, 'PLBART': -1, 'devign': 8, 'vulberta_cnn': 28, 'vulberta_mlp': 37}
146                    klv.key[13] >= 2 && klv.key[13] <= 4 && mxf->current_partition) {                                                      {'codebert': -1, 'PLBART': -1, 'devign': 50, 'vulberta_cnn': 90, 'vulberta_mlp': 71}
148             /* next partition pack - keep going, seek to previous partition or stop */                                                    {'codebert': -1, 'PLBART': -1, 'devign': 52, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
150             if(mxf_parse_handle_partition_or_eof(mxf) <= 0)                                                                               {'codebert': -1, 'PLBART': -1, 'devign': 42, 'vulberta_cnn': 14, 'vulberta_mlp': 33}
152                 break;                                                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': 83, 'vulberta_cnn': 55, 'vulberta_mlp': 70}
154             else if (mxf->parsing_backward)                                                                                               {'codebert': -1, 'PLBART': -1, 'devign': 56, 'vulberta_cnn': 79, 'vulberta_mlp': 69}
156                 continue;                                                                                                                 {'codebert': -1, 'PLBART': -1, 'devign': 88, 'vulberta_cnn': 31, 'vulberta_mlp': 4}
158             /* we're still parsing forward. proceed to parsing this partition pack */                                                     {'codebert': -1, 'PLBART': -1, 'devign': 72, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
160         }                                                                                                                                 {'codebert': -1, 'PLBART': -1, 'devign': 181, 'vulberta_cnn': 37, 'vulberta_mlp': 68}
164         for (metadata = mxf_metadata_read_table; metadata->read; metadata++) {                                                            {'codebert': -1, 'PLBART': -1, 'devign': 36, 'vulberta_cnn': 70, 'vulberta_mlp': 67}
166             if (IS_KLV_KEY(klv.key, metadata->key)) {                                                                                     {'codebert': -1, 'PLBART': -1, 'devign': 7, 'vulberta_cnn': 54, 'vulberta_mlp': 66}
168                 int res;                                                                                                                  {'codebert': -1, 'PLBART': -1, 'devign': 86, 'vulberta_cnn': 64, 'vulberta_mlp': 65}
170                 if (klv.key[5] == 0x53) {                                                                                                 {'codebert': -1, 'PLBART': -1, 'devign': 28, 'vulberta_cnn': 71, 'vulberta_mlp': 27}
172                     res = mxf_read_local_tags(mxf, &klv, metadata->read, metadata->ctx_size, metadata->type);                             {'codebert': -1, 'PLBART': -1, 'devign': 4, 'vulberta_cnn': 6, 'vulberta_mlp': 26}
174                 } else {                                                                                                                  {'codebert': -1, 'PLBART': -1, 'devign': 95, 'vulberta_cnn': 73, 'vulberta_mlp': 64}
176                     uint64_t next = avio_tell(s->pb) + klv.length;                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 5, 'vulberta_cnn': 63, 'vulberta_mlp': 32}
178                     res = metadata->read(mxf, s->pb, 0, klv.length, klv.key, klv.offset);                                                 {'codebert': -1, 'PLBART': -1, 'devign': 0, 'vulberta_cnn': 0, 'vulberta_mlp': 63}
182                     /* only seek forward, else this can loop for a long time */                                                           {'codebert': -1, 'PLBART': -1, 'devign': 51, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
184                     if (avio_tell(s->pb) > next) {                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 37, 'vulberta_cnn': 11, 'vulberta_mlp': 62}
186                         av_log(s, AV_LOG_ERROR, "read past end of KLV @ %#"PRIx64"\n",                                                    {'codebert': -1, 'PLBART': -1, 'devign': 16, 'vulberta_cnn': 4, 'vulberta_mlp': 35}
188                                klv.offset);                                                                                               {'codebert': -1, 'PLBART': -1, 'devign': 32, 'vulberta_cnn': 60, 'vulberta_mlp': 61}
190                         return AVERROR_INVALIDDATA;                                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 65, 'vulberta_cnn': 24, 'vulberta_mlp': 60}
192                     }                                                                                                                     {'codebert': -1, 'PLBART': -1, 'devign': 162, 'vulberta_cnn': 88, 'vulberta_mlp': 59}
196                     avio_seek(s->pb, next, SEEK_SET);                                                                                     {'codebert': -1, 'PLBART': -1, 'devign': 25, 'vulberta_cnn': 78, 'vulberta_mlp': 58}
198                 }                                                                                                                         {'codebert': -1, 'PLBART': -1, 'devign': 157, 'vulberta_cnn': 76, 'vulberta_mlp': 57}
200                 if (res < 0) {                                                                                                            {'codebert': -1, 'PLBART': -1, 'devign': 47, 'vulberta_cnn': 67, 'vulberta_mlp': 56}
202                     av_log(s, AV_LOG_ERROR, "error reading header metadata\n");                                                           {'codebert': -1, 'PLBART': -1, 'devign': 18, 'vulberta_cnn': 3, 'vulberta_mlp': 55}
204                     return res;                                                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 73, 'vulberta_cnn': 45, 'vulberta_mlp': 54}
206                 }                                                                                                                         {'codebert': -1, 'PLBART': -1, 'devign': 152, 'vulberta_cnn': 48, 'vulberta_mlp': 53}
208                 break;                                                                                                                    {'codebert': -1, 'PLBART': -1, 'devign': 82, 'vulberta_cnn': 50, 'vulberta_mlp': 52}
210             }                                                                                                                             {'codebert': -1, 'PLBART': -1, 'devign': 149, 'vulberta_cnn': 43, 'vulberta_mlp': 1}
212         }                                                                                                                                 {'codebert': -1, 'PLBART': -1, 'devign': 147, 'vulberta_cnn': 41, 'vulberta_mlp': 0}
214         if (!metadata->read)                                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': 48, 'vulberta_cnn': 80, 'vulberta_mlp': 51}
216             avio_skip(s->pb, klv.length);                                                                                                 {'codebert': -1, 'PLBART': -1, 'devign': 2, 'vulberta_cnn': 15, 'vulberta_mlp': 25}
218     }                                                                                                                                     {'codebert': -1, 'PLBART': -1, 'devign': 143, 'vulberta_cnn': 53, 'vulberta_mlp': 50}
220     /* FIXME avoid seek */                                                                                                                {'codebert': -1, 'PLBART': -1, 'devign': 94, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
222     if (!essence_offset)  {                                                                                                               {'codebert': -1, 'PLBART': -1, 'devign': 22, 'vulberta_cnn': 22, 'vulberta_mlp': 49}
224         av_log(s, AV_LOG_ERROR, "no essence\n");                                                                                          {'codebert': -1, 'PLBART': -1, 'devign': 17, 'vulberta_cnn': 10, 'vulberta_mlp': 48}
226         return AVERROR_INVALIDDATA;                                                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 64, 'vulberta_cnn': 89, 'vulberta_mlp': 47}
228     }                                                                                                                                     {'codebert': -1, 'PLBART': -1, 'devign': 137, 'vulberta_cnn': 91, 'vulberta_mlp': 46}
230     avio_seek(s->pb, essence_offset, SEEK_SET);                                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 14, 'vulberta_cnn': 25, 'vulberta_mlp': 45}
234     mxf_compute_essence_containers(mxf);                                                                                                  {'codebert': -1, 'PLBART': -1, 'devign': 60, 'vulberta_cnn': 36, 'vulberta_mlp': 44}
238     /* we need to do this before computing the index tables                                                                               {'codebert': -1, 'PLBART': -1, 'devign': 93, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
240      * to be able to fill in zero IndexDurations with st->duration */                                                                     {'codebert': -1, 'PLBART': -1, 'devign': 92, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
242     if ((ret = mxf_parse_structural_metadata(mxf)) < 0)                                                                                   {'codebert': -1, 'PLBART': -1, 'devign': 57, 'vulberta_cnn': 92, 'vulberta_mlp': 43}
244         return ret;                                                                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 101, 'vulberta_cnn': 57, 'vulberta_mlp': 42}
248     if ((ret = mxf_compute_index_tables(mxf)) < 0)                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 58, 'vulberta_cnn': 16, 'vulberta_mlp': 41}
250         return ret;                                                                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 100, 'vulberta_cnn': 13, 'vulberta_mlp': 40}
254     if (mxf->nb_index_tables > 1) {                                                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 54, 'vulberta_cnn': 21, 'vulberta_mlp': 39}
256         /* TODO: look up which IndexSID to use via EssenceContainerData */                                                                {'codebert': -1, 'PLBART': -1, 'devign': 91, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
258         av_log(mxf->fc, AV_LOG_INFO, "got %i index tables - only the first one (IndexSID %i) will be used\n",                             {'codebert': -1, 'PLBART': -1, 'devign': 27, 'vulberta_cnn': 59, 'vulberta_mlp': 38}
260                mxf->nb_index_tables, mxf->index_tables[0].index_sid);                                                                     {'codebert': -1, 'PLBART': -1, 'devign': 24, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
262     } else if (mxf->nb_index_tables == 0 && mxf->op == OPAtom) {                                                                          {'codebert': -1, 'PLBART': -1, 'devign': 41, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
264         av_log(mxf->fc, AV_LOG_ERROR, "cannot demux OPAtom without an index\n");                                                          {'codebert': -1, 'PLBART': -1, 'devign': 31, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
266         return AVERROR_INVALIDDATA;                                                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 63, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
268     }                                                                                                                                     {'codebert': -1, 'PLBART': -1, 'devign': 112, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
272     mxf_handle_small_eubc(s);                                                                                                             {'codebert': -1, 'PLBART': -1, 'devign': 59, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
276     return 0;                                                                                                                             {'codebert': -1, 'PLBART': -1, 'devign': 87, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
278 }                                                                                                                                         {'codebert': -1, 'PLBART': -1, 'devign': 104, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
-----------------------
Highlighted lines: 
42         if (klv_read_packet(&klv, s->pb) < 0) {
--------------------------------------------------------------------------------------------------------------
Example ids:  23386 project:  qemu commit id:  d470ad42acfc73c45d3e8ed5311a491160b4c100 Number of lines:  72 tground truth:  1
Original lines: 
Predicted Correctly by :  ['linevul', 'codebert', 'regvd', 'vulberta_cnn', 'vulberta_mlp']
0 static int coroutine_fn bdrv_aligned_pwritev(BdrvChild *child,                                {'linevul': 4, 'codebert': 14, 'regvd': 27, 'vulberta_cnn': 39, 'vulberta_mlp': 4}
1     BdrvTrackedRequest *req, int64_t offset, unsigned int bytes,                              {'linevul': 6, 'codebert': 17, 'regvd': 28, 'vulberta_cnn': 4, 'vulberta_mlp': 21}
2     int64_t align, QEMUIOVector *qiov, int flags)                                             {'linevul': 7, 'codebert': 7, 'regvd': 33, 'vulberta_cnn': 51, 'vulberta_mlp': 14}
3 {                                                                                             {'linevul': 25, 'codebert': 3, 'regvd': 71, 'vulberta_cnn': 37, 'vulberta_mlp': 3}
4     BlockDriverState *bs = child->bs;                                                         {'linevul': 20, 'codebert': 13, 'regvd': 44, 'vulberta_cnn': 50, 'vulberta_mlp': 39}
5     BlockDriver *drv = bs->drv;                                                               {'linevul': 12, 'codebert': 16, 'regvd': 49, 'vulberta_cnn': 36, 'vulberta_mlp': 37}
6     bool waited;                                                                              {'linevul': 23, 'codebert': 18, 'regvd': 64, 'vulberta_cnn': 55, 'vulberta_mlp': 68}
7     int ret;                                                                                  {'linevul': 24, 'codebert': 19, 'regvd': 66, 'vulberta_cnn': 31, 'vulberta_mlp': 67}
8     int64_t end_sector = DIV_ROUND_UP(offset + bytes, BDRV_SECTOR_SIZE);                      {'linevul': 2, 'codebert': 12, 'regvd': 1, 'vulberta_cnn': 24, 'vulberta_mlp': 28}
9     uint64_t bytes_remaining = bytes;                                                         {'linevul': 18, 'codebert': 15, 'regvd': 48, 'vulberta_cnn': 12, 'vulberta_mlp': 66}
10     int max_transfer;                                                                        {'linevul': 22, 'codebert': 10, 'regvd': 56, 'vulberta_cnn': 38, 'vulberta_mlp': 19}
11     if (bdrv_has_readonly_bitmaps(bs)) {                                                     {'linevul': 8, 'codebert': 0, 'regvd': 41, 'vulberta_cnn': 58, 'vulberta_mlp': 29}
12         return -EPERM;                                                                       {'linevul': 21, 'codebert': 2, 'regvd': 62, 'vulberta_cnn': 26, 'vulberta_mlp': 65}
13     assert(is_power_of_2(align));                                                            {'linevul': 14, 'codebert': 1, 'regvd': 37, 'vulberta_cnn': 23, 'vulberta_mlp': 25}
14     assert((offset & (align - 1)) == 0);                                                     {'linevul': 15, 'codebert': 9, 'regvd': 36, 'vulberta_cnn': 41, 'vulberta_mlp': 9}
15     assert((bytes & (align - 1)) == 0);                                                      {'linevul': 17, 'codebert': 5, 'regvd': 31, 'vulberta_cnn': 44, 'vulberta_mlp': 6}
16     assert(!qiov || bytes == qiov->size);                                                    {'linevul': 11, 'codebert': 4, 'regvd': 25, 'vulberta_cnn': 45, 'vulberta_mlp': 11}
17     assert((bs->open_flags & BDRV_O_NO_IO) == 0);                                            {'linevul': 3, 'codebert': 6, 'regvd': 2, 'vulberta_cnn': 25, 'vulberta_mlp': 1}
18     assert(!(flags & ~BDRV_REQ_MASK));                                                       {'linevul': 9, 'codebert': 11, 'regvd': 11, 'vulberta_cnn': 34, 'vulberta_mlp': 8}
19     max_transfer = QEMU_ALIGN_DOWN(MIN_NON_ZERO(bs->bl.max_transfer, INT_MAX),               {'linevul': 0, 'codebert': 8, 'regvd': 7, 'vulberta_cnn': 65, 'vulberta_mlp': 16}
20                                    align);                                                   {'linevul': 1, 'codebert': 20, 'regvd': 63, 'vulberta_cnn': 9, 'vulberta_mlp': 5}
21     waited = wait_serialising_requests(req);                                                 {'linevul': 13, 'codebert': -1, 'regvd': 30, 'vulberta_cnn': 13, 'vulberta_mlp': 64}
22     assert(!waited || !req->serialising);                                                    {'linevul': 16, 'codebert': -1, 'regvd': 35, 'vulberta_cnn': 16, 'vulberta_mlp': 10}
23     assert(req->overlap_offset <= offset);                                                   {'linevul': 19, 'codebert': -1, 'regvd': 9, 'vulberta_cnn': 6, 'vulberta_mlp': 23}
24     assert(offset + bytes <= req->overlap_offset + req->overlap_bytes);                      {'linevul': 5, 'codebert': -1, 'regvd': 3, 'vulberta_cnn': 10, 'vulberta_mlp': 34}
25     assert(child->perm & BLK_PERM_WRITE);                                                    {'linevul': 10, 'codebert': -1, 'regvd': 12, 'vulberta_cnn': 52, 'vulberta_mlp': 41}
26     assert(end_sector <= bs->total_sectors || child->perm & BLK_PERM_RESIZE);                {'linevul': -1, 'codebert': -1, 'regvd': 0, 'vulberta_cnn': 54, 'vulberta_mlp': 38}
27     ret = notifier_with_return_list_notify(&bs->before_write_notifiers, req);                {'linevul': -1, 'codebert': -1, 'regvd': 4, 'vulberta_cnn': 33, 'vulberta_mlp': 63}
28     if (!ret && bs->detect_zeroes != BLOCKDEV_DETECT_ZEROES_OPTIONS_OFF &&                   {'linevul': -1, 'codebert': -1, 'regvd': 16, 'vulberta_cnn': 29, 'vulberta_mlp': 62}
29         !(flags & BDRV_REQ_ZERO_WRITE) && drv->bdrv_co_pwrite_zeroes &&                      {'linevul': -1, 'codebert': -1, 'regvd': 13, 'vulberta_cnn': 63, 'vulberta_mlp': 46}
30         qemu_iovec_is_zero(qiov)) {                                                          {'linevul': -1, 'codebert': -1, 'regvd': 52, 'vulberta_cnn': 8, 'vulberta_mlp': 61}
31         flags |= BDRV_REQ_ZERO_WRITE;                                                        {'linevul': -1, 'codebert': -1, 'regvd': 45, 'vulberta_cnn': 28, 'vulberta_mlp': 18}
32         if (bs->detect_zeroes == BLOCKDEV_DETECT_ZEROES_OPTIONS_UNMAP) {                     {'linevul': -1, 'codebert': -1, 'regvd': 14, 'vulberta_cnn': 32, 'vulberta_mlp': 36}
33             flags |= BDRV_REQ_MAY_UNMAP;                                                     {'linevul': -1, 'codebert': -1, 'regvd': 47, 'vulberta_cnn': 43, 'vulberta_mlp': 60}
34     if (ret < 0) {                                                                           {'linevul': -1, 'codebert': -1, 'regvd': 60, 'vulberta_cnn': 20, 'vulberta_mlp': 59}
35         /* Do nothing, write notifier decided to fail this request */                        {'linevul': -1, 'codebert': -1, 'regvd': 57, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
36     } else if (flags & BDRV_REQ_ZERO_WRITE) {                                                {'linevul': -1, 'codebert': -1, 'regvd': 39, 'vulberta_cnn': 5, 'vulberta_mlp': 20}
37         bdrv_debug_event(bs, BLKDBG_PWRITEV_ZERO);                                           {'linevul': -1, 'codebert': -1, 'regvd': 17, 'vulberta_cnn': 7, 'vulberta_mlp': 43}
38         ret = bdrv_co_do_pwrite_zeroes(bs, offset, bytes, flags);                            {'linevul': -1, 'codebert': -1, 'regvd': 10, 'vulberta_cnn': 2, 'vulberta_mlp': 45}
39     } else if (flags & BDRV_REQ_WRITE_COMPRESSED) {                                          {'linevul': -1, 'codebert': -1, 'regvd': 38, 'vulberta_cnn': 62, 'vulberta_mlp': 15}
40         ret = bdrv_driver_pwritev_compressed(bs, offset, bytes, qiov);                       {'linevul': -1, 'codebert': -1, 'regvd': 6, 'vulberta_cnn': 1, 'vulberta_mlp': 44}
41     } else if (bytes <= max_transfer) {                                                      {'linevul': -1, 'codebert': -1, 'regvd': 40, 'vulberta_cnn': 59, 'vulberta_mlp': 58}
42         bdrv_debug_event(bs, BLKDBG_PWRITEV);                                                {'linevul': -1, 'codebert': -1, 'regvd': 23, 'vulberta_cnn': 3, 'vulberta_mlp': 31}
43         ret = bdrv_driver_pwritev(bs, offset, bytes, qiov, flags);                           {'linevul': -1, 'codebert': -1, 'regvd': 5, 'vulberta_cnn': 0, 'vulberta_mlp': 30}
44     } else {                                                                                 {'linevul': -1, 'codebert': -1, 'regvd': 70, 'vulberta_cnn': 35, 'vulberta_mlp': 57}
45         bdrv_debug_event(bs, BLKDBG_PWRITEV);                                                {'linevul': -1, 'codebert': -1, 'regvd': 22, 'vulberta_cnn': 60, 'vulberta_mlp': 42}
46         while (bytes_remaining) {                                                            {'linevul': -1, 'codebert': -1, 'regvd': 51, 'vulberta_cnn': 14, 'vulberta_mlp': 13}
47             int num = MIN(bytes_remaining, max_transfer);                                    {'linevul': -1, 'codebert': -1, 'regvd': 20, 'vulberta_cnn': 48, 'vulberta_mlp': 40}
48             QEMUIOVector local_qiov;                                                         {'linevul': -1, 'codebert': -1, 'regvd': 50, 'vulberta_cnn': 15, 'vulberta_mlp': 56}
49             int local_flags = flags;                                                         {'linevul': -1, 'codebert': -1, 'regvd': 54, 'vulberta_cnn': 21, 'vulberta_mlp': 12}
50             assert(num);                                                                     {'linevul': -1, 'codebert': -1, 'regvd': 55, 'vulberta_cnn': 61, 'vulberta_mlp': 55}
51             if (num < bytes_remaining && (flags & BDRV_REQ_FUA) &&                           {'linevul': -1, 'codebert': -1, 'regvd': 34, 'vulberta_cnn': 67, 'vulberta_mlp': 27}
52                 !(bs->supported_write_flags & BDRV_REQ_FUA)) {                               {'linevul': -1, 'codebert': -1, 'regvd': 18, 'vulberta_cnn': 27, 'vulberta_mlp': 0}
53                 /* If FUA is going to be emulated by flush, we only                          {'linevul': -1, 'codebert': -1, 'regvd': 61, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
54                  * need to flush on the last iteration */                                    {'linevul': -1, 'codebert': -1, 'regvd': 68, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
55                 local_flags &= ~BDRV_REQ_FUA;                                                {'linevul': -1, 'codebert': -1, 'regvd': 46, 'vulberta_cnn': 56, 'vulberta_mlp': 24}
56             qemu_iovec_init(&local_qiov, qiov->niov);                                        {'linevul': -1, 'codebert': -1, 'regvd': 29, 'vulberta_cnn': 42, 'vulberta_mlp': 54}
57             qemu_iovec_concat(&local_qiov, qiov, bytes - bytes_remaining, num);              {'linevul': -1, 'codebert': -1, 'regvd': 26, 'vulberta_cnn': 11, 'vulberta_mlp': 53}
58             ret = bdrv_driver_pwritev(bs, offset + bytes - bytes_remaining,                  {'linevul': -1, 'codebert': -1, 'regvd': 21, 'vulberta_cnn': 68, 'vulberta_mlp': 33}
59                                       num, &local_qiov, local_flags);                        {'linevul': -1, 'codebert': -1, 'regvd': 43, 'vulberta_cnn': 30, 'vulberta_mlp': 7}
60             qemu_iovec_destroy(&local_qiov);                                                 {'linevul': -1, 'codebert': -1, 'regvd': 42, 'vulberta_cnn': 66, 'vulberta_mlp': 52}
61             if (ret < 0) {                                                                   {'linevul': -1, 'codebert': -1, 'regvd': 59, 'vulberta_cnn': 46, 'vulberta_mlp': 51}
62                 break;                                                                       {'linevul': -1, 'codebert': -1, 'regvd': 69, 'vulberta_cnn': 19, 'vulberta_mlp': 2}
63             bytes_remaining -= num;                                                          {'linevul': -1, 'codebert': -1, 'regvd': 53, 'vulberta_cnn': 40, 'vulberta_mlp': 22}
64     bdrv_debug_event(bs, BLKDBG_PWRITEV_DONE);                                               {'linevul': -1, 'codebert': -1, 'regvd': 19, 'vulberta_cnn': 17, 'vulberta_mlp': 32}
65     atomic_inc(&bs->write_gen);                                                              {'linevul': -1, 'codebert': -1, 'regvd': 32, 'vulberta_cnn': 49, 'vulberta_mlp': 35}
66     bdrv_set_dirty(bs, offset, bytes);                                                       {'linevul': -1, 'codebert': -1, 'regvd': 24, 'vulberta_cnn': 64, 'vulberta_mlp': 26}
67     stat64_max(&bs->wr_highest_offset, offset + bytes);                                      {'linevul': -1, 'codebert': -1, 'regvd': 8, 'vulberta_cnn': 18, 'vulberta_mlp': 50}
68     if (ret >= 0) {                                                                          {'linevul': -1, 'codebert': -1, 'regvd': 58, 'vulberta_cnn': 47, 'vulberta_mlp': 49}
69         bs->total_sectors = MAX(bs->total_sectors, end_sector);                              {'linevul': -1, 'codebert': -1, 'regvd': 15, 'vulberta_cnn': 57, 'vulberta_mlp': 48}
70         ret = 0;                                                                             {'linevul': -1, 'codebert': -1, 'regvd': 65, 'vulberta_cnn': 22, 'vulberta_mlp': 17}
71     return ret;                                                                              {'linevul': -1, 'codebert': -1, 'regvd': 67, 'vulberta_cnn': 53, 'vulberta_mlp': 47}
-----------------------
Highlighted lines: 
17     assert((bs->open_flags & BDRV_O_NO_IO) == 0);
19     max_transfer = QEMU_ALIGN_DOWN(MIN_NON_ZERO(bs->bl.max_transfer, INT_MAX),
20                                    align);
--------------------------------------------------------------------------------------------------------------
Example ids:  23786 project:  FFmpeg commit id:  8cd1c0febe88b757e915e9af15559575c21ca728 Number of lines:  136 tground truth:  1
Original lines: 
Predicted Correctly by :  ['linevul', 'codebert', 'PLBART', 'devign', 'regvd', 'vulberta_cnn', 'vulberta_mlp']
0 static int pcx_decode_frame(AVCodecContext *avctx, void *data, int *data_size,                 {'linevul': 1, 'codebert': 0, 'PLBART': 1, 'devign': 22, 'regvd': 13, 'vulberta_cnn': 2, 'vulberta_mlp': 25}
2                             AVPacket *avpkt) {                                                 {'linevul': 0, 'codebert': 11, 'PLBART': 8, 'devign': 56, 'regvd': 93, 'vulberta_cnn': 101, 'vulberta_mlp': 110}
4     const uint8_t *buf = avpkt->data;                                                          {'linevul': 10, 'codebert': 3, 'PLBART': 3, 'devign': 30, 'regvd': 12, 'vulberta_cnn': 1, 'vulberta_mlp': 36}
6     int buf_size = avpkt->size;                                                                {'linevul': 18, 'codebert': 7, 'PLBART': 6, 'devign': 70, 'regvd': 34, 'vulberta_cnn': 49, 'vulberta_mlp': 31}
8     PCXContext * const s = avctx->priv_data;                                                   {'linevul': 9, 'codebert': 10, 'PLBART': 2, 'devign': 29, 'regvd': 20, 'vulberta_cnn': 23, 'vulberta_mlp': 42}
10     AVFrame *picture = data;                                                                  {'linevul': 22, 'codebert': 9, 'PLBART': 4, 'devign': 43, 'regvd': 74, 'vulberta_cnn': 62, 'vulberta_mlp': 109}
12     AVFrame * const p = &s->picture;                                                          {'linevul': 17, 'codebert': 6, 'PLBART': 7, 'devign': 10, 'regvd': 54, 'vulberta_cnn': 71, 'vulberta_mlp': 108}
14     int compressed, xmin, ymin, xmax, ymax;                                                   {'linevul': 7, 'codebert': 18, 'PLBART': 5, 'devign': 80, 'regvd': 56, 'vulberta_cnn': 39, 'vulberta_mlp': 107}
16     unsigned int w, h, bits_per_pixel, bytes_per_line, nplanes, stride, y, x,                 {'linevul': 3, 'codebert': 5, 'PLBART': 0, 'devign': -1, 'regvd': 45, 'vulberta_cnn': 14, 'vulberta_mlp': 10}
18                  bytes_per_scanline;                                                          {'linevul': 6, 'codebert': 14, 'PLBART': -1, 'devign': -1, 'regvd': 68, 'vulberta_cnn': 55, 'vulberta_mlp': 0}
20     uint8_t *ptr;                                                                             {'linevul': 23, 'codebert': 1, 'PLBART': -1, 'devign': 50, 'regvd': 69, 'vulberta_cnn': 20, 'vulberta_mlp': 106}
22     uint8_t const *bufstart = buf;                                                            {'linevul': 19, 'codebert': 2, 'PLBART': -1, 'devign': 17, 'regvd': 41, 'vulberta_cnn': 82, 'vulberta_mlp': 105}
24     uint8_t *scanline;                                                                        {'linevul': 21, 'codebert': 4, 'PLBART': -1, 'devign': 49, 'regvd': 65, 'vulberta_cnn': 70, 'vulberta_mlp': 104}
26     int ret = -1;                                                                             {'linevul': 24, 'codebert': 19, 'PLBART': -1, 'devign': 81, 'regvd': 96, 'vulberta_cnn': 69, 'vulberta_mlp': 103}
30     if (buf[0] != 0x0a || buf[1] > 5) {                                                       {'linevul': 5, 'codebert': 15, 'PLBART': -1, 'devign': 41, 'regvd': 52, 'vulberta_cnn': 46, 'vulberta_mlp': 35}
32         av_log(avctx, AV_LOG_ERROR, "this is not PCX encoded data\n");                        {'linevul': 2, 'codebert': 13, 'PLBART': -1, 'devign': -1, 'regvd': 7, 'vulberta_cnn': 73, 'vulberta_mlp': 21}
34         return AVERROR_INVALIDDATA;                                                           {'linevul': 12, 'codebert': 12, 'PLBART': -1, 'devign': 28, 'regvd': 83, 'vulberta_cnn': 28, 'vulberta_mlp': 102}
36     }                                                                                         {'linevul': 27, 'codebert': 8, 'PLBART': -1, 'devign': -1, 'regvd': 135, 'vulberta_cnn': 40, 'vulberta_mlp': 101}
40     compressed = buf[2];                                                                      {'linevul': 25, 'codebert': 16, 'PLBART': -1, 'devign': 88, 'regvd': 76, 'vulberta_cnn': 37, 'vulberta_mlp': 28}
42     xmin = AV_RL16(buf+ 4);                                                                   {'linevul': 16, 'codebert': 17, 'PLBART': -1, 'devign': 93, 'regvd': 18, 'vulberta_cnn': 6, 'vulberta_mlp': 1}
44     ymin = AV_RL16(buf+ 6);                                                                   {'linevul': 15, 'codebert': 20, 'PLBART': -1, 'devign': 91, 'regvd': 28, 'vulberta_cnn': 13, 'vulberta_mlp': 41}
46     xmax = AV_RL16(buf+ 8);                                                                   {'linevul': 14, 'codebert': -1, 'PLBART': -1, 'devign': 92, 'regvd': 21, 'vulberta_cnn': 4, 'vulberta_mlp': 40}
48     ymax = AV_RL16(buf+10);                                                                   {'linevul': 13, 'codebert': -1, 'PLBART': -1, 'devign': 9, 'regvd': 14, 'vulberta_cnn': 64, 'vulberta_mlp': 100}
52     if (xmax < xmin || ymax < ymin) {                                                         {'linevul': 8, 'codebert': -1, 'PLBART': -1, 'devign': 57, 'regvd': 78, 'vulberta_cnn': 98, 'vulberta_mlp': 39}
54         av_log(avctx, AV_LOG_ERROR, "invalid image dimensions\n");                            {'linevul': 4, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 22, 'vulberta_cnn': 8, 'vulberta_mlp': 20}
56         return AVERROR_INVALIDDATA;                                                           {'linevul': 11, 'codebert': -1, 'PLBART': -1, 'devign': 27, 'regvd': 82, 'vulberta_cnn': 63, 'vulberta_mlp': 24}
58     }                                                                                         {'linevul': 26, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 134, 'vulberta_cnn': 33, 'vulberta_mlp': 99}
62     w = xmax - xmin + 1;                                                                      {'linevul': 20, 'codebert': -1, 'PLBART': -1, 'devign': 68, 'regvd': 63, 'vulberta_cnn': 21, 'vulberta_mlp': 3}
64     h = ymax - ymin + 1;                                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 69, 'regvd': 55, 'vulberta_cnn': 7, 'vulberta_mlp': 18}
68     bits_per_pixel     = buf[3];                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 67, 'regvd': 43, 'vulberta_cnn': 29, 'vulberta_mlp': 98}
70     bytes_per_line     = AV_RL16(buf+66);                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 82, 'regvd': 9, 'vulberta_cnn': 9, 'vulberta_mlp': 27}
72     nplanes            = buf[65];                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 66, 'regvd': 60, 'vulberta_cnn': 25, 'vulberta_mlp': 30}
74     bytes_per_scanline = nplanes * bytes_per_line;                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 44, 'regvd': 47, 'vulberta_cnn': 26, 'vulberta_mlp': 4}
78     if (bytes_per_scanline < w * bits_per_pixel * nplanes / 8) {                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 8, 'regvd': 29, 'vulberta_cnn': 48, 'vulberta_mlp': 9}
80         av_log(avctx, AV_LOG_ERROR, "PCX data is corrupted\n");                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 10, 'vulberta_cnn': 83, 'vulberta_mlp': 47}
82         return AVERROR_INVALIDDATA;                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 26, 'regvd': 81, 'vulberta_cnn': 41, 'vulberta_mlp': 97}
84     }                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 133, 'vulberta_cnn': 68, 'vulberta_mlp': 96}
88     switch ((nplanes<<8) + bits_per_pixel) {                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 1, 'regvd': 48, 'vulberta_cnn': 104, 'vulberta_mlp': 6}
90         case 0x0308:                                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 108, 'regvd': 111, 'vulberta_cnn': 81, 'vulberta_mlp': 8}
92             avctx->pix_fmt = AV_PIX_FMT_RGB24;                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 89, 'regvd': 42, 'vulberta_cnn': 56, 'vulberta_mlp': 95}
94             break;                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 64, 'regvd': 116, 'vulberta_cnn': 52, 'vulberta_mlp': 94}
96         case 0x0108:                                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 109, 'regvd': 102, 'vulberta_cnn': 88, 'vulberta_mlp': 17}
98         case 0x0104:                                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 98, 'regvd': 104, 'vulberta_cnn': 11, 'vulberta_mlp': 16}
100         case 0x0102:                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 95, 'regvd': 105, 'vulberta_cnn': 17, 'vulberta_mlp': 15}
102         case 0x0101:                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 94, 'regvd': 107, 'vulberta_cnn': 86, 'vulberta_mlp': 5}
104         case 0x0401:                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 87, 'regvd': 109, 'vulberta_cnn': 87, 'vulberta_mlp': 23}
106         case 0x0301:                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 83, 'regvd': 108, 'vulberta_cnn': 94, 'vulberta_mlp': 2}
108         case 0x0201:                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 78, 'regvd': 110, 'vulberta_cnn': 54, 'vulberta_mlp': 14}
110             avctx->pix_fmt = AV_PIX_FMT_PAL8;                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 65, 'regvd': 40, 'vulberta_cnn': 108, 'vulberta_mlp': 38}
112             break;                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 63, 'regvd': 115, 'vulberta_cnn': 77, 'vulberta_mlp': 93}
114         default:                                                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 106, 'regvd': 118, 'vulberta_cnn': 57, 'vulberta_mlp': 92}
116             av_log(avctx, AV_LOG_ERROR, "invalid PCX file\n");                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 24, 'vulberta_cnn': 75, 'vulberta_mlp': 12}
118             return AVERROR_INVALIDDATA;                                                      {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 25, 'regvd': 80, 'vulberta_cnn': 44, 'vulberta_mlp': 7}
120     }                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 132, 'vulberta_cnn': 53, 'vulberta_mlp': 91}
124     buf += 128;                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 55, 'regvd': 89, 'vulberta_cnn': 85, 'vulberta_mlp': 13}
128     if (p->data[0])                                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 62, 'regvd': 92, 'vulberta_cnn': 5, 'vulberta_mlp': 34}
130         avctx->release_buffer(avctx, p);                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 103, 'regvd': 30, 'vulberta_cnn': 47, 'vulberta_mlp': 90}
134     if (av_image_check_size(w, h, 0, avctx))                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 54, 'regvd': 49, 'vulberta_cnn': 95, 'vulberta_mlp': 29}
136         return AVERROR_INVALIDDATA;                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 24, 'regvd': 79, 'vulberta_cnn': 34, 'vulberta_mlp': 22}
138     if (w != avctx->width || h != avctx->height)                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 76, 'regvd': 57, 'vulberta_cnn': 106, 'vulberta_mlp': 44}
140         avcodec_set_dimensions(avctx, w, h);                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 97, 'regvd': 36, 'vulberta_cnn': 89, 'vulberta_mlp': 43}
142     if ((ret = avctx->get_buffer(avctx, p)) < 0) {                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 33, 'regvd': 25, 'vulberta_cnn': 110, 'vulberta_mlp': 89}
144         av_log(avctx, AV_LOG_ERROR, "get_buffer() failed\n");                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 19, 'vulberta_cnn': 65, 'vulberta_mlp': 88}
146         return ret;                                                                          {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 73, 'regvd': 113, 'vulberta_cnn': 27, 'vulberta_mlp': 87}
148     }                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 131, 'vulberta_cnn': 58, 'vulberta_mlp': 86}
152     p->pict_type = AV_PICTURE_TYPE_I;                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 79, 'regvd': 64, 'vulberta_cnn': 3, 'vulberta_mlp': 85}
156     ptr    = p->data[0];                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 38, 'regvd': 73, 'vulberta_cnn': 60, 'vulberta_mlp': 84}
158     stride = p->linesize[0];                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 45, 'regvd': 58, 'vulberta_cnn': 84, 'vulberta_mlp': 83}
162     scanline = av_malloc(bytes_per_scanline);                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 60, 'regvd': 33, 'vulberta_cnn': 79, 'vulberta_mlp': 11}
164     if (!scanline)                                                                           {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 74, 'regvd': 101, 'vulberta_cnn': 38, 'vulberta_mlp': 82}
166         return AVERROR(ENOMEM);                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 59, 'regvd': 90, 'vulberta_cnn': 24, 'vulberta_mlp': 81}
170     if (nplanes == 3 && bits_per_pixel == 8) {                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 61, 'regvd': 44, 'vulberta_cnn': 15, 'vulberta_mlp': 80}
172         for (y=0; y<h; y++) {                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 4, 'regvd': 86, 'vulberta_cnn': 22, 'vulberta_mlp': 79}
174             buf = pcx_rle_decode(buf, scanline, bytes_per_scanline, compressed);             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 21, 'regvd': 5, 'vulberta_cnn': 107, 'vulberta_mlp': 32}
178             for (x=0; x<w; x++) {                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 7, 'regvd': 72, 'vulberta_cnn': 102, 'vulberta_mlp': 78}
180                 ptr[3*x  ] = scanline[x                    ];                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 51, 'regvd': 50, 'vulberta_cnn': 36, 'vulberta_mlp': 77}
182                 ptr[3*x+1] = scanline[x+ bytes_per_line    ];                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 32, 'regvd': 16, 'vulberta_cnn': 93, 'vulberta_mlp': 19}
184                 ptr[3*x+2] = scanline[x+(bytes_per_line<<1)];                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 16, 'regvd': 1, 'vulberta_cnn': 10, 'vulberta_mlp': 37}
186             }                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 130, 'vulberta_cnn': 45, 'vulberta_mlp': 76}
190             ptr += stride;                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 37, 'regvd': 99, 'vulberta_cnn': 35, 'vulberta_mlp': 75}
192         }                                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 129, 'vulberta_cnn': 59, 'vulberta_mlp': 74}
196     } else if (nplanes == 1 && bits_per_pixel == 8) {                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 15, 'regvd': 35, 'vulberta_cnn': 92, 'vulberta_mlp': 73}
198         const uint8_t *palstart = bufstart + buf_size - 769;                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 11, 'regvd': 27, 'vulberta_cnn': 12, 'vulberta_mlp': 72}
202         for (y=0; y<h; y++, ptr+=stride) {                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 0, 'regvd': 53, 'vulberta_cnn': 66, 'vulberta_mlp': 71}
204             buf = pcx_rle_decode(buf, scanline, bytes_per_scanline, compressed);             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 20, 'regvd': 4, 'vulberta_cnn': 97, 'vulberta_mlp': 26}
206             memcpy(ptr, scanline, w);                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 86, 'regvd': 62, 'vulberta_cnn': 105, 'vulberta_mlp': 70}
208         }                                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 128, 'vulberta_cnn': 51, 'vulberta_mlp': 69}
212         if (buf != palstart) {                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 58, 'regvd': 77, 'vulberta_cnn': 16, 'vulberta_mlp': 68}
214             av_log(avctx, AV_LOG_WARNING, "image data possibly corrupted\n");                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 11, 'vulberta_cnn': 103, 'vulberta_mlp': 67}
216             buf = palstart;                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 100, 'regvd': 94, 'vulberta_cnn': 74, 'vulberta_mlp': 66}
218         }                                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 127, 'vulberta_cnn': 43, 'vulberta_mlp': 65}
220         if (*buf++ != 12) {                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 39, 'regvd': 67, 'vulberta_cnn': 32, 'vulberta_mlp': 33}
222             av_log(avctx, AV_LOG_ERROR, "expected palette after image data\n");              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 17, 'vulberta_cnn': 91, 'vulberta_mlp': 64}
224             ret = AVERROR_INVALIDDATA;                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 99, 'regvd': 70, 'vulberta_cnn': 19, 'vulberta_mlp': 63}
226             goto end;                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 107, 'regvd': 114, 'vulberta_cnn': 96, 'vulberta_mlp': 62}
228         }                                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 126, 'vulberta_cnn': 76, 'vulberta_mlp': 61}
232     } else if (nplanes == 1) {   /* all packed formats, max. 16 colors */                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 46, 'regvd': 37, 'vulberta_cnn': 31, 'vulberta_mlp': 60}
234         GetBitContext s;                                                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 104, 'regvd': 100, 'vulberta_cnn': 100, 'vulberta_mlp': 59}
238         for (y=0; y<h; y++) {                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 3, 'regvd': 85, 'vulberta_cnn': 78, 'vulberta_mlp': 58}
240             init_get_bits(&s, scanline, bytes_per_scanline<<3);                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 102, 'regvd': 39, 'vulberta_cnn': 30, 'vulberta_mlp': 45}
244             buf = pcx_rle_decode(buf, scanline, bytes_per_scanline, compressed);             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 19, 'regvd': 3, 'vulberta_cnn': 18, 'vulberta_mlp': 57}
248             for (x=0; x<w; x++)                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 6, 'regvd': 75, 'vulberta_cnn': 80, 'vulberta_mlp': 56}
250                 ptr[x] = get_bits(&s, bits_per_pixel);                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 85, 'regvd': 31, 'vulberta_cnn': 90, 'vulberta_mlp': 55}
252             ptr += stride;                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 36, 'regvd': 98, 'vulberta_cnn': 61, 'vulberta_mlp': 54}
254         }                                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 125, 'vulberta_cnn': 50, 'vulberta_mlp': 53}
258     } else {    /* planar, 4, 8 or 16 colors */                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 75, 'regvd': 88, 'vulberta_cnn': 72, 'vulberta_mlp': 52}
260         int i;                                                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 105, 'regvd': 106, 'vulberta_cnn': 99, 'vulberta_mlp': 51}
264         for (y=0; y<h; y++) {                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 2, 'regvd': 84, 'vulberta_cnn': 109, 'vulberta_mlp': 50}
266             buf = pcx_rle_decode(buf, scanline, bytes_per_scanline, compressed);             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 18, 'regvd': 2, 'vulberta_cnn': 0, 'vulberta_mlp': 46}
270             for (x=0; x<w; x++) {                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 5, 'regvd': 71, 'vulberta_cnn': 67, 'vulberta_mlp': 49}
272                 int m = 0x80 >> (x&7), v = 0;                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 12, 'regvd': 51, 'vulberta_cnn': 42, 'vulberta_mlp': 48}
274                 for (i=nplanes - 1; i>=0; i--) {                                             {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 34, 'regvd': 59, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
276                     v <<= 1;                                                                 {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 96, 'regvd': 103, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
278                     v  += !!(scanline[i*bytes_per_line + (x>>3)] & m);                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 23, 'regvd': 8, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
280                 }                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 124, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
282                 ptr[x] = v;                                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 77, 'regvd': 91, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
284             }                                                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 123, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
286             ptr += stride;                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 35, 'regvd': 97, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
288         }                                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 122, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
290     }                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 121, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
294     if (nplanes == 1 && bits_per_pixel == 8) {                                               {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 14, 'regvd': 38, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
296         pcx_palette(&buf, (uint32_t *) p->data[1], 256);                                     {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 48, 'regvd': 0, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
298     } else if (bits_per_pixel * nplanes == 1) {                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 31, 'regvd': 32, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
300         AV_WN32A(p->data[1]  , 0xFF000000);                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 53, 'regvd': 23, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
302         AV_WN32A(p->data[1]+4, 0xFFFFFFFF);                                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 52, 'regvd': 15, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
304     } else if (bits_per_pixel < 8) {                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 90, 'regvd': 61, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
306         const uint8_t *palette = bufstart+16;                                                {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 13, 'regvd': 26, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
308         pcx_palette(&palette, (uint32_t *) p->data[1], 16);                                  {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 47, 'regvd': 6, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
310     }                                                                                        {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 120, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
314     *picture = s->picture;                                                                   {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 40, 'regvd': 87, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
316     *data_size = sizeof(AVFrame);                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 42, 'regvd': 46, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
320     ret = buf - bufstart;                                                                    {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 71, 'regvd': 95, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
322 end:                                                                                         {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 84, 'regvd': 117, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
324     av_free(scanline);                                                                       {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 101, 'regvd': 66, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
326     return ret;                                                                              {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': 72, 'regvd': 112, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
328 }                                                                                            {'linevul': -1, 'codebert': -1, 'PLBART': -1, 'devign': -1, 'regvd': 119, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
-----------------------
Highlighted lines: 
0 static int pcx_decode_frame(AVCodecContext *avctx, void *data, int *data_size,
4     const uint8_t *buf = avpkt->data;
16     unsigned int w, h, bits_per_pixel, bytes_per_line, nplanes, stride, y, x,
--------------------------------------------------------------------------------------------------------------
Example ids:  23956 project:  qemu commit id:  81907a582901671c15be36a63b5063f88f3487e2 Number of lines:  90 tground truth:  1
Original lines: 
Predicted Correctly by :  ['codebert', 'PLBART', 'devign', 'vulberta_cnn', 'vulberta_mlp']
0 void cpsr_write(CPUARMState *env, uint32_t val, uint32_t mask,                                {'codebert': 1, 'PLBART': 0, 'devign': 0, 'vulberta_cnn': 61, 'vulberta_mlp': 14}
2                 CPSRWriteType write_type)                                                     {'codebert': 0, 'PLBART': 9, 'devign': 37, 'vulberta_cnn': 62, 'vulberta_mlp': 57}
4 {                                                                                             {'codebert': 19, 'PLBART': 13, 'devign': 193, 'vulberta_cnn': 23, 'vulberta_mlp': 9}
6     uint32_t changed_daif;                                                                    {'codebert': 2, 'PLBART': 8, 'devign': 52, 'vulberta_cnn': 65, 'vulberta_mlp': 53}
10     if (mask & CPSR_NZCV) {                                                                  {'codebert': 3, 'PLBART': 10, 'devign': 18, 'vulberta_cnn': 32, 'vulberta_mlp': 26}
12         env->ZF = (~val) & CPSR_Z;                                                           {'codebert': 5, 'PLBART': 2, 'devign': 30, 'vulberta_cnn': 0, 'vulberta_mlp': 43}
14         env->NF = val;                                                                       {'codebert': 7, 'PLBART': 11, 'devign': 51, 'vulberta_cnn': 15, 'vulberta_mlp': 40}
16         env->CF = (val >> 29) & 1;                                                           {'codebert': 13, 'PLBART': 6, 'devign': 29, 'vulberta_cnn': 52, 'vulberta_mlp': 56}
18         env->VF = (val << 3) & 0x80000000;                                                   {'codebert': 12, 'PLBART': 4, 'devign': 19, 'vulberta_cnn': 59, 'vulberta_mlp': 36}
20     }                                                                                        {'codebert': 21, 'PLBART': 14, 'devign': 183, 'vulberta_cnn': 27, 'vulberta_mlp': 8}
22     if (mask & CPSR_Q)                                                                       {'codebert': 14, 'PLBART': 7, 'devign': 24, 'vulberta_cnn': 45, 'vulberta_mlp': 16}
24         env->QF = ((val & CPSR_Q) != 0);                                                     {'codebert': 11, 'PLBART': 1, 'devign': 21, 'vulberta_cnn': 6, 'vulberta_mlp': 41}
26     if (mask & CPSR_T)                                                                       {'codebert': 15, 'PLBART': 5, 'devign': 20, 'vulberta_cnn': 57, 'vulberta_mlp': 24}
28         env->thumb = ((val & CPSR_T) != 0);                                                  {'codebert': 4, 'PLBART': 3, 'devign': 22, 'vulberta_cnn': 14, 'vulberta_mlp': 51}
30     if (mask & CPSR_IT_0_1) {                                                                {'codebert': 18, 'PLBART': 12, 'devign': 16, 'vulberta_cnn': 36, 'vulberta_mlp': 23}
32         env->condexec_bits &= ~3;                                                            {'codebert': 9, 'PLBART': -1, 'devign': 40, 'vulberta_cnn': 38, 'vulberta_mlp': 28}
34         env->condexec_bits |= (val >> 25) & 3;                                               {'codebert': 8, 'PLBART': -1, 'devign': 5, 'vulberta_cnn': 60, 'vulberta_mlp': 21}
36     }                                                                                        {'codebert': 20, 'PLBART': -1, 'devign': 174, 'vulberta_cnn': 29, 'vulberta_mlp': 7}
38     if (mask & CPSR_IT_2_7) {                                                                {'codebert': 17, 'PLBART': -1, 'devign': 17, 'vulberta_cnn': 69, 'vulberta_mlp': 46}
40         env->condexec_bits &= 3;                                                             {'codebert': 10, 'PLBART': -1, 'devign': 49, 'vulberta_cnn': 68, 'vulberta_mlp': 22}
42         env->condexec_bits |= (val >> 8) & 0xfc;                                             {'codebert': 6, 'PLBART': -1, 'devign': 23, 'vulberta_cnn': 7, 'vulberta_mlp': 48}
44     }                                                                                        {'codebert': 22, 'PLBART': -1, 'devign': 169, 'vulberta_cnn': 41, 'vulberta_mlp': 69}
46     if (mask & CPSR_GE) {                                                                    {'codebert': 16, 'PLBART': -1, 'devign': 25, 'vulberta_cnn': 35, 'vulberta_mlp': 50}
48         env->GE = (val >> 16) & 0xf;                                                         {'codebert': -1, 'PLBART': -1, 'devign': 27, 'vulberta_cnn': 56, 'vulberta_mlp': 68}
50     }                                                                                        {'codebert': -1, 'PLBART': -1, 'devign': 165, 'vulberta_cnn': 30, 'vulberta_mlp': 67}
54     /* In a V7 implementation that includes the security extensions but does                 {'codebert': -1, 'PLBART': -1, 'devign': 161, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
56      * not include Virtualization Extensions the SCR.FW and SCR.AW bits control              {'codebert': -1, 'PLBART': -1, 'devign': 159, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
58      * whether non-secure software is allowed to change the CPSR_F and CPSR_A                {'codebert': -1, 'PLBART': -1, 'devign': 157, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
60      * bits respectively.                                                                    {'codebert': -1, 'PLBART': -1, 'devign': 155, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
62      *                                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 153, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
64      * In a V8 implementation, it is permitted for privileged software to                    {'codebert': -1, 'PLBART': -1, 'devign': 42, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
66      * change the CPSR A/F bits regardless of the SCR.AW/FW bits.                            {'codebert': -1, 'PLBART': -1, 'devign': 150, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
68      */                                                                                      {'codebert': -1, 'PLBART': -1, 'devign': 148, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
70     if (write_type != CPSRWriteRaw && !arm_feature(env, ARM_FEATURE_V8) &&                   {'codebert': -1, 'PLBART': -1, 'devign': 13, 'vulberta_cnn': 53, 'vulberta_mlp': 39}
72         arm_feature(env, ARM_FEATURE_EL3) &&                                                 {'codebert': -1, 'PLBART': -1, 'devign': 12, 'vulberta_cnn': 51, 'vulberta_mlp': 45}
74         !arm_feature(env, ARM_FEATURE_EL2) &&                                                {'codebert': -1, 'PLBART': -1, 'devign': 11, 'vulberta_cnn': 66, 'vulberta_mlp': 52}
76         !arm_is_secure(env)) {                                                               {'codebert': -1, 'PLBART': -1, 'devign': 36, 'vulberta_cnn': 11, 'vulberta_mlp': 49}
80         changed_daif = (env->daif ^ val) & mask;                                             {'codebert': -1, 'PLBART': -1, 'devign': 14, 'vulberta_cnn': 49, 'vulberta_mlp': 58}
84         if (changed_daif & CPSR_A) {                                                         {'codebert': -1, 'PLBART': -1, 'devign': 28, 'vulberta_cnn': 50, 'vulberta_mlp': 55}
86             /* Check to see if we are allowed to change the masking of async                 {'codebert': -1, 'PLBART': -1, 'devign': 136, 'vulberta_cnn': 19, 'vulberta_mlp': 66}
88              * abort exceptions from a non-secure state.                                     {'codebert': -1, 'PLBART': -1, 'devign': 134, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
90              */                                                                              {'codebert': -1, 'PLBART': -1, 'devign': 132, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
92             if (!(env->cp15.scr_el3 & SCR_AW)) {                                             {'codebert': -1, 'PLBART': -1, 'devign': 9, 'vulberta_cnn': 9, 'vulberta_mlp': 54}
94                 qemu_log_mask(LOG_GUEST_ERROR,                                               {'codebert': -1, 'PLBART': -1, 'devign': 3, 'vulberta_cnn': 58, 'vulberta_mlp': 30}
96                               "Ignoring attempt to switch CPSR_A flag from "                 {'codebert': -1, 'PLBART': -1, 'devign': 128, 'vulberta_cnn': 13, 'vulberta_mlp': 38}
98                               "non-secure world with SCR.AW bit clear\n");                   {'codebert': -1, 'PLBART': -1, 'devign': 45, 'vulberta_cnn': 43, 'vulberta_mlp': 1}
100                 mask &= ~CPSR_A;                                                            {'codebert': -1, 'PLBART': -1, 'devign': 48, 'vulberta_cnn': 21, 'vulberta_mlp': 31}
102             }                                                                               {'codebert': -1, 'PLBART': -1, 'devign': 124, 'vulberta_cnn': 18, 'vulberta_mlp': 6}
104         }                                                                                   {'codebert': -1, 'PLBART': -1, 'devign': 122, 'vulberta_cnn': 33, 'vulberta_mlp': 65}
108         if (changed_daif & CPSR_F) {                                                        {'codebert': -1, 'PLBART': -1, 'devign': 15, 'vulberta_cnn': 48, 'vulberta_mlp': 44}
110             /* Check to see if we are allowed to change the masking of FIQ                  {'codebert': -1, 'PLBART': -1, 'devign': 117, 'vulberta_cnn': 16, 'vulberta_mlp': 64}
112              * exceptions from a non-secure state.                                          {'codebert': -1, 'PLBART': -1, 'devign': 115, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
114              */                                                                             {'codebert': -1, 'PLBART': -1, 'devign': 113, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
116             if (!(env->cp15.scr_el3 & SCR_FW)) {                                            {'codebert': -1, 'PLBART': -1, 'devign': 8, 'vulberta_cnn': 8, 'vulberta_mlp': 34}
118                 qemu_log_mask(LOG_GUEST_ERROR,                                              {'codebert': -1, 'PLBART': -1, 'devign': 2, 'vulberta_cnn': 22, 'vulberta_mlp': 11}
120                               "Ignoring attempt to switch CPSR_F flag from "                {'codebert': -1, 'PLBART': -1, 'devign': 109, 'vulberta_cnn': 39, 'vulberta_mlp': 25}
122                               "non-secure world with SCR.FW bit clear\n");                  {'codebert': -1, 'PLBART': -1, 'devign': 44, 'vulberta_cnn': 20, 'vulberta_mlp': 12}
124                 mask &= ~CPSR_F;                                                            {'codebert': -1, 'PLBART': -1, 'devign': 39, 'vulberta_cnn': 63, 'vulberta_mlp': 19}
126             }                                                                               {'codebert': -1, 'PLBART': -1, 'devign': 105, 'vulberta_cnn': 46, 'vulberta_mlp': 63}
130             /* Check whether non-maskable FIQ (NMFI) support is enabled.                    {'codebert': -1, 'PLBART': -1, 'devign': 35, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
132              * If this bit is set software is not allowed to mask                           {'codebert': -1, 'PLBART': -1, 'devign': 100, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
134              * FIQs, but is allowed to set CPSR_F to 0.                                     {'codebert': -1, 'PLBART': -1, 'devign': 41, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
136              */                                                                             {'codebert': -1, 'PLBART': -1, 'devign': 97, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
138             if ((A32_BANKED_CURRENT_REG_GET(env, sctlr) & SCTLR_NMFI) &&                    {'codebert': -1, 'PLBART': -1, 'devign': 10, 'vulberta_cnn': 1, 'vulberta_mlp': 18}
140                 (val & CPSR_F)) {                                                           {'codebert': -1, 'PLBART': -1, 'devign': 34, 'vulberta_cnn': 3, 'vulberta_mlp': 29}
142                 qemu_log_mask(LOG_GUEST_ERROR,                                              {'codebert': -1, 'PLBART': -1, 'devign': 1, 'vulberta_cnn': 28, 'vulberta_mlp': 17}
144                               "Ignoring attempt to enable CPSR_F flag "                     {'codebert': -1, 'PLBART': -1, 'devign': 92, 'vulberta_cnn': 34, 'vulberta_mlp': 10}
146                               "(non-maskable FIQ [NMFI] support enabled)\n");               {'codebert': -1, 'PLBART': -1, 'devign': 33, 'vulberta_cnn': 42, 'vulberta_mlp': 5}
148                 mask &= ~CPSR_F;                                                            {'codebert': -1, 'PLBART': -1, 'devign': 38, 'vulberta_cnn': 40, 'vulberta_mlp': 0}
150             }                                                                               {'codebert': -1, 'PLBART': -1, 'devign': 88, 'vulberta_cnn': 44, 'vulberta_mlp': 62}
152         }                                                                                   {'codebert': -1, 'PLBART': -1, 'devign': 86, 'vulberta_cnn': 26, 'vulberta_mlp': 4}
154     }                                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 84, 'vulberta_cnn': 37, 'vulberta_mlp': 61}
158     env->daif &= ~(CPSR_AIF & mask);                                                        {'codebert': -1, 'PLBART': -1, 'devign': 7, 'vulberta_cnn': 55, 'vulberta_mlp': 33}
160     env->daif |= val & CPSR_AIF & mask;                                                     {'codebert': -1, 'PLBART': -1, 'devign': 47, 'vulberta_cnn': 67, 'vulberta_mlp': 20}
164     if (write_type != CPSRWriteRaw &&                                                       {'codebert': -1, 'PLBART': -1, 'devign': 43, 'vulberta_cnn': 10, 'vulberta_mlp': 27}
166         (env->uncached_cpsr & CPSR_M) != CPSR_USER &&                                       {'codebert': -1, 'PLBART': -1, 'devign': 32, 'vulberta_cnn': 5, 'vulberta_mlp': 2}
168         ((env->uncached_cpsr ^ val) & mask & CPSR_M)) {                                     {'codebert': -1, 'PLBART': -1, 'devign': 31, 'vulberta_cnn': 64, 'vulberta_mlp': 32}
170         if (bad_mode_switch(env, val & CPSR_M)) {                                           {'codebert': -1, 'PLBART': -1, 'devign': 4, 'vulberta_cnn': 2, 'vulberta_mlp': 47}
172             /* Attempt to switch to an invalid mode: this is UNPREDICTABLE.                 {'codebert': -1, 'PLBART': -1, 'devign': 72, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
174              * We choose to ignore the attempt and leave the CPSR M field                   {'codebert': -1, 'PLBART': -1, 'devign': 70, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
176              * untouched.                                                                   {'codebert': -1, 'PLBART': -1, 'devign': 68, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
178              */                                                                             {'codebert': -1, 'PLBART': -1, 'devign': 66, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
180             mask &= ~CPSR_M;                                                                {'codebert': -1, 'PLBART': -1, 'devign': 50, 'vulberta_cnn': 24, 'vulberta_mlp': 13}
182         } else {                                                                            {'codebert': -1, 'PLBART': -1, 'devign': 63, 'vulberta_cnn': 12, 'vulberta_mlp': 37}
184             switch_mode(env, val & CPSR_M);                                                 {'codebert': -1, 'PLBART': -1, 'devign': 6, 'vulberta_cnn': 47, 'vulberta_mlp': 15}
186         }                                                                                   {'codebert': -1, 'PLBART': -1, 'devign': 60, 'vulberta_cnn': 25, 'vulberta_mlp': 60}
188     }                                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 58, 'vulberta_cnn': 31, 'vulberta_mlp': 3}
190     mask &= ~CACHED_CPSR_BITS;                                                              {'codebert': -1, 'PLBART': -1, 'devign': 46, 'vulberta_cnn': 17, 'vulberta_mlp': 42}
192     env->uncached_cpsr = (env->uncached_cpsr & ~mask) | (val & mask);                       {'codebert': -1, 'PLBART': -1, 'devign': 26, 'vulberta_cnn': 54, 'vulberta_mlp': 35}
194 }                                                                                           {'codebert': -1, 'PLBART': -1, 'devign': 54, 'vulberta_cnn': 4, 'vulberta_mlp': 59}
-----------------------
Highlighted lines: 
0 void cpsr_write(CPUARMState *env, uint32_t val, uint32_t mask,
12         env->ZF = (~val) & CPSR_Z;
--------------------------------------------------------------------------------------------------------------
Example ids:  24230 project:  FFmpeg commit id:  86dfcfd0e30d6645eea2c63c1c60a0550e7c97ea Number of lines:  65 tground truth:  1
Original lines: 
Predicted Correctly by :  ['linevul', 'codebert', 'devign', 'regvd', 'vulberta_cnn', 'vulberta_mlp']
0 static int read_kuki_chunk(AVFormatContext *s, int64_t size)                                         {'linevul': 9, 'codebert': 2, 'devign': 10, 'regvd': 14, 'vulberta_cnn': 31, 'vulberta_mlp': 15}
2 {                                                                                                    {'linevul': 24, 'codebert': 6, 'devign': -1, 'regvd': 58, 'vulberta_cnn': 32, 'vulberta_mlp': 57}
4     AVIOContext *pb = s->pb;                                                                         {'linevul': 16, 'codebert': 7, 'devign': 18, 'regvd': 39, 'vulberta_cnn': 55, 'vulberta_mlp': 56}
6     AVStream *st      = s->streams[0];                                                               {'linevul': 12, 'codebert': 5, 'devign': 13, 'regvd': 34, 'vulberta_cnn': 4, 'vulberta_mlp': 46}
10     if (size < 0 || size > INT_MAX - FF_INPUT_BUFFER_PADDING_SIZE)                                  {'linevul': 2, 'codebert': 0, 'devign': 31, 'regvd': 22, 'vulberta_cnn': 28, 'vulberta_mlp': 17}
12         return -1;                                                                                  {'linevul': 20, 'codebert': 4, 'devign': 45, 'regvd': 54, 'vulberta_cnn': 41, 'vulberta_mlp': 24}
16     if (st->codec->codec_id == AV_CODEC_ID_AAC) {                                                   {'linevul': 4, 'codebert': 1, 'devign': 24, 'regvd': 10, 'vulberta_cnn': 43, 'vulberta_mlp': 40}
18         /* The magic cookie format for AAC is an mp4 esds atom.                                     {'linevul': 10, 'codebert': 8, 'devign': -1, 'regvd': 31, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
20            The lavc AAC decoder requires the data from the codec specific                           {'linevul': 7, 'codebert': 11, 'devign': -1, 'regvd': 35, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
22            description as extradata input. */                                                       {'linevul': 14, 'codebert': 12, 'devign': -1, 'regvd': 50, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
24         int strt, skip;                                                                             {'linevul': 17, 'codebert': 17, 'devign': 44, 'regvd': 47, 'vulberta_cnn': 27, 'vulberta_mlp': 42}
26         MOVAtom atom;                                                                               {'linevul': 18, 'codebert': 16, 'devign': 40, 'regvd': 53, 'vulberta_cnn': 44, 'vulberta_mlp': 55}
30         strt = avio_tell(pb);                                                                       {'linevul': 13, 'codebert': 13, 'devign': 38, 'regvd': 24, 'vulberta_cnn': 3, 'vulberta_mlp': 28}
32         ff_mov_read_esds(s, pb, atom);                                                              {'linevul': 5, 'codebert': 9, 'devign': 37, 'regvd': 23, 'vulberta_cnn': 18, 'vulberta_mlp': 43}
34         skip = size - (avio_tell(pb) - strt);                                                       {'linevul': 8, 'codebert': 15, 'devign': 16, 'regvd': 13, 'vulberta_cnn': 48, 'vulberta_mlp': 38}
36         if (skip < 0 || !st->codec->extradata ||                                                    {'linevul': 6, 'codebert': 14, 'devign': 8, 'regvd': 29, 'vulberta_cnn': 11, 'vulberta_mlp': 54}
38             st->codec->codec_id != AV_CODEC_ID_AAC) {                                               {'linevul': 0, 'codebert': 10, 'devign': -1, 'regvd': 17, 'vulberta_cnn': 54, 'vulberta_mlp': 45}
40             av_log(s, AV_LOG_ERROR, "invalid AAC magic cookie\n");                                  {'linevul': 1, 'codebert': 3, 'devign': -1, 'regvd': 11, 'vulberta_cnn': 10, 'vulberta_mlp': 11}
42             return AVERROR_INVALIDDATA;                                                             {'linevul': 11, 'codebert': -1, 'devign': 21, 'regvd': 38, 'vulberta_cnn': 14, 'vulberta_mlp': 6}
44         }                                                                                           {'linevul': 23, 'codebert': -1, 'devign': -1, 'regvd': 64, 'vulberta_cnn': 37, 'vulberta_mlp': 0}
46         avio_skip(pb, skip);                                                                        {'linevul': 15, 'codebert': -1, 'devign': 42, 'regvd': 26, 'vulberta_cnn': 1, 'vulberta_mlp': 10}
48     } else if (st->codec->codec_id == AV_CODEC_ID_ALAC) {                                           {'linevul': 3, 'codebert': -1, 'devign': 15, 'regvd': 5, 'vulberta_cnn': 49, 'vulberta_mlp': 20}
50 #define ALAC_PREAMBLE 12                                                                            {'linevul': 22, 'codebert': -1, 'devign': 5, 'regvd': 45, 'vulberta_cnn': 51, 'vulberta_mlp': 16}
52 #define ALAC_HEADER   36                                                                            {'linevul': 21, 'codebert': -1, 'devign': 3, 'regvd': 49, 'vulberta_cnn': 38, 'vulberta_mlp': 23}
54 #define ALAC_NEW_KUKI 24                                                                            {'linevul': 19, 'codebert': -1, 'devign': 2, 'regvd': 46, 'vulberta_cnn': 17, 'vulberta_mlp': 29}
56         uint8_t preamble[12];                                                                       {'linevul': -1, 'codebert': -1, 'devign': 25, 'regvd': 41, 'vulberta_cnn': 20, 'vulberta_mlp': 53}
58         if (size < ALAC_NEW_KUKI) {                                                                 {'linevul': -1, 'codebert': -1, 'devign': 14, 'regvd': 28, 'vulberta_cnn': 35, 'vulberta_mlp': 37}
60             av_log(s, AV_LOG_ERROR, "invalid ALAC magic cookie\n");                                 {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 9, 'vulberta_cnn': 13, 'vulberta_mlp': 7}
62             avio_skip(pb, size);                                                                    {'linevul': -1, 'codebert': -1, 'devign': 26, 'regvd': 21, 'vulberta_cnn': 24, 'vulberta_mlp': 39}
64             return AVERROR_INVALIDDATA;                                                             {'linevul': -1, 'codebert': -1, 'devign': 20, 'regvd': 37, 'vulberta_cnn': 33, 'vulberta_mlp': 19}
66         }                                                                                           {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 63, 'vulberta_cnn': 36, 'vulberta_mlp': 2}
68         avio_read(pb, preamble, ALAC_PREAMBLE);                                                     {'linevul': -1, 'codebert': -1, 'devign': 29, 'regvd': 16, 'vulberta_cnn': 9, 'vulberta_mlp': 30}
72         st->codec->extradata = av_mallocz(ALAC_HEADER + FF_INPUT_BUFFER_PADDING_SIZE);              {'linevul': -1, 'codebert': -1, 'devign': 1, 'regvd': 2, 'vulberta_cnn': 7, 'vulberta_mlp': 22}
74         if (!st->codec->extradata)                                                                  {'linevul': -1, 'codebert': -1, 'devign': 7, 'regvd': 33, 'vulberta_cnn': 15, 'vulberta_mlp': 35}
76             return AVERROR(ENOMEM);                                                                 {'linevul': -1, 'codebert': -1, 'devign': 35, 'regvd': 44, 'vulberta_cnn': 12, 'vulberta_mlp': 34}
80         /* For the old style cookie, we skip 12 bytes, then read 36 bytes.                          {'linevul': -1, 'codebert': -1, 'devign': 28, 'regvd': 40, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
82          * The new style cookie only contains the last 24 bytes of what was                         {'linevul': -1, 'codebert': -1, 'devign': 43, 'regvd': 51, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
84          * 36 bytes in the old style cookie, so we fabricate the first 12 bytes                     {'linevul': -1, 'codebert': -1, 'devign': 27, 'regvd': 48, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
86          * in that case to maintain compatibility. */                                               {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 52, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
88         if (!memcmp(&preamble[4], "frmaalac", 8)) {                                                 {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 42, 'vulberta_cnn': 50, 'vulberta_mlp': 25}
90             if (size < ALAC_PREAMBLE + ALAC_HEADER) {                                               {'linevul': -1, 'codebert': -1, 'devign': 11, 'regvd': 27, 'vulberta_cnn': 26, 'vulberta_mlp': 47}
92                 av_log(s, AV_LOG_ERROR, "invalid ALAC magic cookie\n");                             {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 8, 'vulberta_cnn': 22, 'vulberta_mlp': 13}
94                 av_freep(&st->codec->extradata);                                                    {'linevul': -1, 'codebert': -1, 'devign': 41, 'regvd': 19, 'vulberta_cnn': 21, 'vulberta_mlp': 44}
96                 return AVERROR_INVALIDDATA;                                                         {'linevul': -1, 'codebert': -1, 'devign': 19, 'regvd': 36, 'vulberta_cnn': 34, 'vulberta_mlp': 27}
98             }                                                                                       {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 62, 'vulberta_cnn': 39, 'vulberta_mlp': 52}
100             avio_read(pb, st->codec->extradata, ALAC_HEADER);                                      {'linevul': -1, 'codebert': -1, 'devign': 22, 'regvd': 1, 'vulberta_cnn': 16, 'vulberta_mlp': 36}
102             avio_skip(pb, size - ALAC_PREAMBLE - ALAC_HEADER);                                     {'linevul': -1, 'codebert': -1, 'devign': 0, 'regvd': 6, 'vulberta_cnn': 29, 'vulberta_mlp': 31}
104         } else {                                                                                   {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 57, 'vulberta_cnn': 47, 'vulberta_mlp': 9}
106             AV_WB32(st->codec->extradata, 36);                                                     {'linevul': -1, 'codebert': -1, 'devign': 23, 'regvd': 15, 'vulberta_cnn': 8, 'vulberta_mlp': 14}
108             memcpy(&st->codec->extradata[4], "alac", 4);                                           {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 25, 'vulberta_cnn': 57, 'vulberta_mlp': 21}
110             AV_WB32(&st->codec->extradata[8], 0);                                                  {'linevul': -1, 'codebert': -1, 'devign': 36, 'regvd': 12, 'vulberta_cnn': 6, 'vulberta_mlp': 18}
112             memcpy(&st->codec->extradata[12], preamble, 12);                                       {'linevul': -1, 'codebert': -1, 'devign': 17, 'regvd': 20, 'vulberta_cnn': 40, 'vulberta_mlp': 32}
114             avio_read(pb, &st->codec->extradata[24], ALAC_NEW_KUKI - 12);                          {'linevul': -1, 'codebert': -1, 'devign': 4, 'regvd': 0, 'vulberta_cnn': 52, 'vulberta_mlp': 26}
116             avio_skip(pb, size - ALAC_NEW_KUKI);                                                   {'linevul': -1, 'codebert': -1, 'devign': 9, 'regvd': 7, 'vulberta_cnn': 45, 'vulberta_mlp': 4}
118         }                                                                                          {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 61, 'vulberta_cnn': 30, 'vulberta_mlp': 51}
120         st->codec->extradata_size = ALAC_HEADER;                                                   {'linevul': -1, 'codebert': -1, 'devign': 12, 'regvd': 18, 'vulberta_cnn': 5, 'vulberta_mlp': 8}
122     } else {                                                                                       {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 56, 'vulberta_cnn': 46, 'vulberta_mlp': 33}
124         st->codec->extradata = av_mallocz(size + FF_INPUT_BUFFER_PADDING_SIZE);                    {'linevul': -1, 'codebert': -1, 'devign': 30, 'regvd': 3, 'vulberta_cnn': 2, 'vulberta_mlp': 5}
126         if (!st->codec->extradata)                                                                 {'linevul': -1, 'codebert': -1, 'devign': 6, 'regvd': 32, 'vulberta_cnn': 42, 'vulberta_mlp': 12}
128             return AVERROR(ENOMEM);                                                                {'linevul': -1, 'codebert': -1, 'devign': 34, 'regvd': 43, 'vulberta_cnn': 23, 'vulberta_mlp': 41}
130         avio_read(pb, st->codec->extradata, size);                                                 {'linevul': -1, 'codebert': -1, 'devign': 33, 'regvd': 4, 'vulberta_cnn': 56, 'vulberta_mlp': 3}
132         st->codec->extradata_size = size;                                                          {'linevul': -1, 'codebert': -1, 'devign': 39, 'regvd': 30, 'vulberta_cnn': 0, 'vulberta_mlp': 1}
134     }                                                                                              {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 60, 'vulberta_cnn': 19, 'vulberta_mlp': 50}
138     return 0;                                                                                      {'linevul': -1, 'codebert': -1, 'devign': 32, 'regvd': 55, 'vulberta_cnn': 25, 'vulberta_mlp': 49}
140 }                                                                                                  {'linevul': -1, 'codebert': -1, 'devign': -1, 'regvd': 59, 'vulberta_cnn': 53, 'vulberta_mlp': 48}
-----------------------
Highlighted lines: 
72         st->codec->extradata = av_mallocz(ALAC_HEADER + FF_INPUT_BUFFER_PADDING_SIZE);
116             avio_skip(pb, size - ALAC_NEW_KUKI);
124         st->codec->extradata = av_mallocz(size + FF_INPUT_BUFFER_PADDING_SIZE);
--------------------------------------------------------------------------------------------------------------
Example ids:  25413 project:  FFmpeg commit id:  80387f0e2568746dce4a68e2217297029a053dae Number of lines:  83 tground truth:  1
Original lines: 
Predicted Correctly by :  ['codebert', 'PLBART', 'devign', 'vulberta_cnn', 'vulberta_mlp']
0 static int mimic_decode_frame(AVCodecContext *avctx, void *data,                                             {'codebert': 0, 'PLBART': 0, 'devign': 11, 'vulberta_cnn': 48, 'vulberta_mlp': 23}
2                               int *data_size, AVPacket *avpkt)                                               {'codebert': 8, 'PLBART': 10, 'devign': 27, 'vulberta_cnn': 81, 'vulberta_mlp': 81}
4 {                                                                                                            {'codebert': 18, 'PLBART': 12, 'devign': -1, 'vulberta_cnn': 30, 'vulberta_mlp': 80}
6     const uint8_t *buf = avpkt->data;                                                                        {'codebert': 7, 'PLBART': 3, 'devign': 29, 'vulberta_cnn': 16, 'vulberta_mlp': 79}
8     int buf_size = avpkt->size;                                                                              {'codebert': 13, 'PLBART': 7, 'devign': 25, 'vulberta_cnn': 11, 'vulberta_mlp': 22}
10     MimicContext *ctx = avctx->priv_data;                                                                   {'codebert': 1, 'PLBART': 4, 'devign': 1, 'vulberta_cnn': 4, 'vulberta_mlp': 36}
12     GetByteContext gb;                                                                                      {'codebert': 17, 'PLBART': 11, 'devign': 52, 'vulberta_cnn': 59, 'vulberta_mlp': 78}
14     int is_pframe;                                                                                          {'codebert': 6, 'PLBART': 6, 'devign': 39, 'vulberta_cnn': 78, 'vulberta_mlp': 77}
16     int width, height;                                                                                      {'codebert': 19, 'PLBART': 8, 'devign': 38, 'vulberta_cnn': 34, 'vulberta_mlp': 76}
18     int quality, num_coeffs;                                                                                {'codebert': 11, 'PLBART': 5, 'devign': 37, 'vulberta_cnn': 70, 'vulberta_mlp': 75}
20     int swap_buf_size = buf_size - MIMIC_HEADER_SIZE;                                                       {'codebert': 2, 'PLBART': 1, 'devign': 26, 'vulberta_cnn': 66, 'vulberta_mlp': 8}
24     if (buf_size <= MIMIC_HEADER_SIZE) {                                                                    {'codebert': 5, 'PLBART': 2, 'devign': 15, 'vulberta_cnn': 61, 'vulberta_mlp': 74}
26         av_log(avctx, AV_LOG_ERROR, "insufficient data\n");                                                 {'codebert': 9, 'PLBART': 9, 'devign': -1, 'vulberta_cnn': 33, 'vulberta_mlp': 7}
28         return -1;                                                                                          {'codebert': 20, 'PLBART': -1, 'devign': 8, 'vulberta_cnn': 24, 'vulberta_mlp': 0}
30     }                                                                                                       {'codebert': 4, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 45, 'vulberta_mlp': 6}
34     bytestream2_init(&gb, buf, MIMIC_HEADER_SIZE);                                                          {'codebert': 3, 'PLBART': -1, 'devign': 51, 'vulberta_cnn': 68, 'vulberta_mlp': 14}
36     bytestream2_skip(&gb, 2); /* some constant (always 256) */                                              {'codebert': 10, 'PLBART': -1, 'devign': 53, 'vulberta_cnn': 60, 'vulberta_mlp': 11}
38     quality    = bytestream2_get_le16u(&gb);                                                                {'codebert': 12, 'PLBART': -1, 'devign': 49, 'vulberta_cnn': 36, 'vulberta_mlp': 13}
40     width      = bytestream2_get_le16u(&gb);                                                                {'codebert': 16, 'PLBART': -1, 'devign': 44, 'vulberta_cnn': 58, 'vulberta_mlp': 12}
42     height     = bytestream2_get_le16u(&gb);                                                                {'codebert': 15, 'PLBART': -1, 'devign': 41, 'vulberta_cnn': 67, 'vulberta_mlp': 31}
44     bytestream2_skip(&gb, 4); /* some constant */                                                           {'codebert': 14, 'PLBART': -1, 'devign': 34, 'vulberta_cnn': 54, 'vulberta_mlp': 18}
46     is_pframe  = bytestream2_get_le32u(&gb);                                                                {'codebert': -1, 'PLBART': -1, 'devign': 46, 'vulberta_cnn': 27, 'vulberta_mlp': 17}
48     num_coeffs = bytestream2_get_byteu(&gb);                                                                {'codebert': -1, 'PLBART': -1, 'devign': 50, 'vulberta_cnn': 72, 'vulberta_mlp': 24}
50     bytestream2_skip(&gb, 3); /* some constant */                                                           {'codebert': -1, 'PLBART': -1, 'devign': 35, 'vulberta_cnn': 40, 'vulberta_mlp': 26}
54     if(!ctx->avctx) {                                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 31, 'vulberta_cnn': 32, 'vulberta_mlp': 21}
56         int i;                                                                                              {'codebert': -1, 'PLBART': -1, 'devign': 55, 'vulberta_cnn': 23, 'vulberta_mlp': 73}
60         if(!(width == 160 && height == 120) &&                                                              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 18, 'vulberta_mlp': 32}
62            !(width == 320 && height == 240)) {                                                              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 53, 'vulberta_mlp': 10}
64             av_log(avctx, AV_LOG_ERROR, "invalid width/height!\n");                                         {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 7, 'vulberta_mlp': 25}
66             return -1;                                                                                      {'codebert': -1, 'PLBART': -1, 'devign': 7, 'vulberta_cnn': 46, 'vulberta_mlp': 72}
68         }                                                                                                   {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 56, 'vulberta_mlp': 5}
72         ctx->avctx     = avctx;                                                                             {'codebert': -1, 'PLBART': -1, 'devign': 32, 'vulberta_cnn': 69, 'vulberta_mlp': 30}
74         avctx->width   = width;                                                                             {'codebert': -1, 'PLBART': -1, 'devign': 13, 'vulberta_cnn': 57, 'vulberta_mlp': 29}
76         avctx->height  = height;                                                                            {'codebert': -1, 'PLBART': -1, 'devign': 14, 'vulberta_cnn': 38, 'vulberta_mlp': 28}
78         avctx->pix_fmt = PIX_FMT_YUV420P;                                                                   {'codebert': -1, 'PLBART': -1, 'devign': 9, 'vulberta_cnn': 21, 'vulberta_mlp': 71}
80         for(i = 0; i < 3; i++) {                                                                            {'codebert': -1, 'PLBART': -1, 'devign': 2, 'vulberta_cnn': 29, 'vulberta_mlp': 70}
82             ctx->num_vblocks[i] = -((-height) >> (3 + !!i));                                                {'codebert': -1, 'PLBART': -1, 'devign': 42, 'vulberta_cnn': 75, 'vulberta_mlp': 15}
84             ctx->num_hblocks[i] =     width   >> (3 + !!i) ;                                                {'codebert': -1, 'PLBART': -1, 'devign': 36, 'vulberta_cnn': 80, 'vulberta_mlp': 16}
86         }                                                                                                   {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 51, 'vulberta_mlp': 69}
88     } else if(width != ctx->avctx->width || height != ctx->avctx->height) {                                 {'codebert': -1, 'PLBART': -1, 'devign': 0, 'vulberta_cnn': 52, 'vulberta_mlp': 68}
90         av_log(avctx, AV_LOG_ERROR, "resolution changing is not supported\n");                              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 15, 'vulberta_mlp': 1}
92         return -1;                                                                                          {'codebert': -1, 'PLBART': -1, 'devign': 6, 'vulberta_cnn': 71, 'vulberta_mlp': 20}
94     }                                                                                                       {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 42, 'vulberta_mlp': 4}
98     if(is_pframe && !ctx->buf_ptrs[ctx->prev_index].data[0]) {                                              {'codebert': -1, 'PLBART': -1, 'devign': 18, 'vulberta_cnn': 76, 'vulberta_mlp': 27}
100         av_log(avctx, AV_LOG_ERROR, "decoding must start with keyframe\n");                                {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 73, 'vulberta_mlp': 9}
102         return -1;                                                                                         {'codebert': -1, 'PLBART': -1, 'devign': 5, 'vulberta_cnn': 14, 'vulberta_mlp': 3}
104     }                                                                                                      {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 26, 'vulberta_mlp': 2}
108     ctx->buf_ptrs[ctx->cur_index].reference = 1;                                                           {'codebert': -1, 'PLBART': -1, 'devign': 40, 'vulberta_cnn': 50, 'vulberta_mlp': 38}
110     ctx->buf_ptrs[ctx->cur_index].pict_type = is_pframe ? AV_PICTURE_TYPE_P:AV_PICTURE_TYPE_I;             {'codebert': -1, 'PLBART': -1, 'devign': 21, 'vulberta_cnn': 5, 'vulberta_mlp': 33}
112     if(ff_thread_get_buffer(avctx, &ctx->buf_ptrs[ctx->cur_index])) {                                      {'codebert': -1, 'PLBART': -1, 'devign': 19, 'vulberta_cnn': 0, 'vulberta_mlp': 67}
114         av_log(avctx, AV_LOG_ERROR, "get_buffer() failed\n");                                              {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 25, 'vulberta_mlp': 66}
116         return -1;                                                                                         {'codebert': -1, 'PLBART': -1, 'devign': 4, 'vulberta_cnn': 31, 'vulberta_mlp': 65}
118     }                                                                                                      {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 41, 'vulberta_mlp': 64}
122     ctx->next_prev_index = ctx->cur_index;                                                                 {'codebert': -1, 'PLBART': -1, 'devign': 16, 'vulberta_cnn': 65, 'vulberta_mlp': 63}
124     ctx->next_cur_index  = (ctx->cur_index - 1) & 15;                                                      {'codebert': -1, 'PLBART': -1, 'devign': 10, 'vulberta_cnn': 8, 'vulberta_mlp': 62}
128     prepare_avpic(ctx, &ctx->flipped_ptrs[ctx->cur_index],                                                 {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 79, 'vulberta_mlp': 35}
130                   (AVPicture*) &ctx->buf_ptrs[ctx->cur_index]);                                            {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 9, 'vulberta_mlp': 40}
134     ff_thread_finish_setup(avctx);                                                                         {'codebert': -1, 'PLBART': -1, 'devign': 48, 'vulberta_cnn': 47, 'vulberta_mlp': 61}
138     av_fast_malloc(&ctx->swap_buf, &ctx->swap_buf_size,                                                    {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 77, 'vulberta_mlp': 19}
140                                  swap_buf_size + FF_INPUT_BUFFER_PADDING_SIZE);                            {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 35, 'vulberta_mlp': 60}
142     if(!ctx->swap_buf)                                                                                     {'codebert': -1, 'PLBART': -1, 'devign': 30, 'vulberta_cnn': 6, 'vulberta_mlp': 59}
144         return AVERROR(ENOMEM);                                                                            {'codebert': -1, 'PLBART': -1, 'devign': 56, 'vulberta_cnn': 28, 'vulberta_mlp': 58}
148     ctx->dsp.bswap_buf(ctx->swap_buf,                                                                      {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 10, 'vulberta_mlp': 37}
150                         (const uint32_t*) (buf + MIMIC_HEADER_SIZE),                                       {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 12, 'vulberta_mlp': 57}
152                         swap_buf_size>>2);                                                                 {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 49, 'vulberta_mlp': 56}
154     init_get_bits(&ctx->gb, ctx->swap_buf, swap_buf_size << 3);                                            {'codebert': -1, 'PLBART': -1, 'devign': 12, 'vulberta_cnn': 64, 'vulberta_mlp': 55}
158     if(!decode(ctx, quality, num_coeffs, !is_pframe)) {                                                    {'codebert': -1, 'PLBART': -1, 'devign': 17, 'vulberta_cnn': 13, 'vulberta_mlp': 54}
160         if (avctx->active_thread_type&FF_THREAD_FRAME)                                                     {'codebert': -1, 'PLBART': -1, 'devign': 20, 'vulberta_cnn': 19, 'vulberta_mlp': 53}
162             ff_thread_report_progress(&ctx->buf_ptrs[ctx->cur_index], INT_MAX, 0);                         {'codebert': -1, 'PLBART': -1, 'devign': 54, 'vulberta_cnn': 74, 'vulberta_mlp': 52}
164         else {                                                                                             {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 39, 'vulberta_mlp': 51}
166             ff_thread_release_buffer(avctx, &ctx->buf_ptrs[ctx->cur_index]);                               {'codebert': -1, 'PLBART': -1, 'devign': 24, 'vulberta_cnn': 22, 'vulberta_mlp': 50}
168             return -1;                                                                                     {'codebert': -1, 'PLBART': -1, 'devign': 3, 'vulberta_cnn': 55, 'vulberta_mlp': 49}
170         }                                                                                                  {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 43, 'vulberta_mlp': 48}
172     }                                                                                                      {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 37, 'vulberta_mlp': 47}
176     *(AVFrame*)data = ctx->buf_ptrs[ctx->cur_index];                                                       {'codebert': -1, 'PLBART': -1, 'devign': 28, 'vulberta_cnn': 20, 'vulberta_mlp': 34}
178     *data_size = sizeof(AVFrame);                                                                          {'codebert': -1, 'PLBART': -1, 'devign': 47, 'vulberta_cnn': 44, 'vulberta_mlp': 46}
182     ctx->prev_index = ctx->next_prev_index;                                                                {'codebert': -1, 'PLBART': -1, 'devign': 43, 'vulberta_cnn': 3, 'vulberta_mlp': 45}
184     ctx->cur_index  = ctx->next_cur_index;                                                                 {'codebert': -1, 'PLBART': -1, 'devign': 33, 'vulberta_cnn': 17, 'vulberta_mlp': 44}
188     /* Only release frames that aren't used for backreferences anymore */                                  {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
190     if(ctx->buf_ptrs[ctx->cur_index].data[0])                                                              {'codebert': -1, 'PLBART': -1, 'devign': 22, 'vulberta_cnn': 1, 'vulberta_mlp': 39}
192         ff_thread_release_buffer(avctx, &ctx->buf_ptrs[ctx->cur_index]);                                   {'codebert': -1, 'PLBART': -1, 'devign': 23, 'vulberta_cnn': 2, 'vulberta_mlp': 43}
196     return buf_size;                                                                                       {'codebert': -1, 'PLBART': -1, 'devign': 45, 'vulberta_cnn': 62, 'vulberta_mlp': 42}
198 }                                                                                                          {'codebert': -1, 'PLBART': -1, 'devign': -1, 'vulberta_cnn': 63, 'vulberta_mlp': 41}
-----------------------
Highlighted lines: 
10     MimicContext *ctx = avctx->priv_data;
20     int swap_buf_size = buf_size - MIMIC_HEADER_SIZE;
26         av_log(avctx, AV_LOG_ERROR, "insufficient data\n");
--------------------------------------------------------------------------------------------------------------
Example ids:  25472 project:  qemu commit id:  94ef4f337fb614f18b765a8e0e878a4c23cdedcd Number of lines:  174 tground truth:  1
Original lines: 
Predicted Correctly by :  ['linevul', 'PLBART', 'devign', 'regvd', 'vulberta_cnn']
0 static void vga_draw_text(VGACommonState *s, int full_update)                                {'linevul': 7, 'PLBART': 0, 'devign': 0, 'regvd': 1, 'vulberta_cnn': 1}
2 {                                                                                            {'linevul': 25, 'PLBART': 8, 'devign': -1, 'regvd': 152, 'vulberta_cnn': 72}
4     DisplaySurface *surface = qemu_console_surface(s->con);                                  {'linevul': 8, 'PLBART': 5, 'devign': 39, 'regvd': 18, 'vulberta_cnn': 54}
6     int cx, cy, cheight, cw, ch, cattr, height, width, ch_attr;                              {'linevul': 3, 'PLBART': 1, 'devign': 11, 'regvd': 76, 'vulberta_cnn': 52}
8     int cx_min, cx_max, linesize, x_incr, line, line1;                                       {'linevul': 5, 'PLBART': 3, 'devign': 109, 'regvd': 45, 'vulberta_cnn': 3}
10     uint32_t offset, fgcol, bgcol, v, cursor_offset;                                        {'linevul': 6, 'PLBART': 4, 'devign': 108, 'regvd': 17, 'vulberta_cnn': 68}
12     uint8_t *d1, *d, *src, *dest, *cursor_ptr;                                              {'linevul': 4, 'PLBART': 2, 'devign': 112, 'regvd': 19, 'vulberta_cnn': 24}
14     const uint8_t *font_ptr, *font_base[2];                                                 {'linevul': 10, 'PLBART': 6, 'devign': 93, 'regvd': 3, 'vulberta_cnn': 20}
16     int dup9, line_offset;                                                                  {'linevul': 21, 'PLBART': 7, 'devign': 113, 'regvd': 56, 'vulberta_cnn': 60}
18     uint32_t *palette;                                                                      {'linevul': 22, 'PLBART': -1, 'devign': 110, 'regvd': 91, 'vulberta_cnn': 15}
20     uint32_t *ch_attr_ptr;                                                                  {'linevul': 18, 'PLBART': -1, 'devign': 111, 'regvd': 65, 'vulberta_cnn': 95}
22     int64_t now = qemu_clock_get_ms(QEMU_CLOCK_VIRTUAL);                                    {'linevul': 2, 'PLBART': -1, 'devign': 99, 'regvd': 8, 'vulberta_cnn': 22}
26     /* compute font data address (in plane 2) */                                            {'linevul': 17, 'PLBART': -1, 'devign': -1, 'regvd': 69, 'vulberta_cnn': -1}
28     v = s->sr[VGA_SEQ_CHARACTER_MAP];                                                       {'linevul': 9, 'PLBART': -1, 'devign': 92, 'regvd': 33, 'vulberta_cnn': 56}
30     offset = (((v >> 4) & 1) | ((v << 1) & 6)) * 8192 * 4 + 2;                              {'linevul': 1, 'PLBART': -1, 'devign': 83, 'regvd': 2, 'vulberta_cnn': 0}
32     if (offset != s->font_offsets[0]) {                                                     {'linevul': 15, 'PLBART': -1, 'devign': 16, 'regvd': 13, 'vulberta_cnn': 58}
34         s->font_offsets[0] = offset;                                                        {'linevul': 14, 'PLBART': -1, 'devign': 33, 'regvd': 32, 'vulberta_cnn': 21}
36         full_update = 1;                                                                    {'linevul': 20, 'PLBART': -1, 'devign': 15, 'regvd': 102, 'vulberta_cnn': 82}
38     }                                                                                       {'linevul': 24, 'PLBART': -1, 'devign': -1, 'regvd': 173, 'vulberta_cnn': 53}
40     font_base[0] = s->vram_ptr + offset;                                                    {'linevul': 11, 'PLBART': -1, 'devign': 44, 'regvd': 10, 'vulberta_cnn': 79}
44     offset = (((v >> 5) & 1) | ((v >> 1) & 6)) * 8192 * 4 + 2;                              {'linevul': 0, 'PLBART': -1, 'devign': 82, 'regvd': 4, 'vulberta_cnn': 57}
46     font_base[1] = s->vram_ptr + offset;                                                    {'linevul': 12, 'PLBART': -1, 'devign': 80, 'regvd': 6, 'vulberta_cnn': 71}
48     if (offset != s->font_offsets[1]) {                                                     {'linevul': 16, 'PLBART': -1, 'devign': 20, 'regvd': 7, 'vulberta_cnn': 91}
50         s->font_offsets[1] = offset;                                                        {'linevul': 13, 'PLBART': -1, 'devign': 51, 'regvd': 26, 'vulberta_cnn': 39}
52         full_update = 1;                                                                    {'linevul': 19, 'PLBART': -1, 'devign': 14, 'regvd': 101, 'vulberta_cnn': 85}
54     }                                                                                       {'linevul': 23, 'PLBART': -1, 'devign': -1, 'regvd': 172, 'vulberta_cnn': 55}
56     if (s->plane_updated & (1 << 2) || s->has_chain4_alias) {                               {'linevul': -1, 'PLBART': -1, 'devign': 56, 'regvd': 12, 'vulberta_cnn': 98}
58         /* if the plane 2 was modified since the last display, it                           {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 116, 'vulberta_cnn': 66}
60            indicates the font may have been modified */                                     {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 120, 'vulberta_cnn': -1}
62         s->plane_updated = 0;                                                               {'linevul': -1, 'PLBART': -1, 'devign': 25, 'regvd': 85, 'vulberta_cnn': 78}
64         full_update = 1;                                                                    {'linevul': -1, 'PLBART': -1, 'devign': 13, 'regvd': 100, 'vulberta_cnn': 33}
66     }                                                                                       {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 171, 'vulberta_cnn': 64}
68     full_update |= update_basic_params(s);                                                  {'linevul': -1, 'PLBART': -1, 'devign': 30, 'regvd': 36, 'vulberta_cnn': 87}
72     line_offset = s->line_offset;                                                           {'linevul': -1, 'PLBART': -1, 'devign': 91, 'regvd': 77, 'vulberta_cnn': 69}
76     vga_get_text_resolution(s, &width, &height, &cw, &cheight);                             {'linevul': -1, 'PLBART': -1, 'devign': 106, 'regvd': 14, 'vulberta_cnn': 75}
78     if ((height * width) <= 1) {                                                            {'linevul': -1, 'PLBART': -1, 'devign': 58, 'regvd': 92, 'vulberta_cnn': 26}
80         /* better than nothing: exit if transient size is too small */                      {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 136, 'vulberta_cnn': -1}
82         return;                                                                             {'linevul': -1, 'PLBART': -1, 'devign': 97, 'regvd': 147, 'vulberta_cnn': 47}
84     }                                                                                       {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 170, 'vulberta_cnn': 27}
86     if ((height * width) > CH_ATTR_SIZE) {                                                  {'linevul': -1, 'PLBART': -1, 'devign': 26, 'regvd': 88, 'vulberta_cnn': 86}
88         /* better than nothing: exit if transient size is too big */                        {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 135, 'vulberta_cnn': -1}
90         return;                                                                             {'linevul': -1, 'PLBART': -1, 'devign': 96, 'regvd': 146, 'vulberta_cnn': 77}
92     }                                                                                       {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 169, 'vulberta_cnn': 40}
96     if (width != s->last_width || height != s->last_height ||                               {'linevul': -1, 'PLBART': -1, 'devign': 46, 'regvd': 74, 'vulberta_cnn': 8}
98         cw != s->last_cw || cheight != s->last_ch || s->last_depth) {                       {'linevul': -1, 'PLBART': -1, 'devign': 17, 'regvd': 71, 'vulberta_cnn': 29}
100         s->last_scr_width = width * cw;                                                    {'linevul': -1, 'PLBART': -1, 'devign': 95, 'regvd': 78, 'vulberta_cnn': 100}
102         s->last_scr_height = height * cheight;                                             {'linevul': -1, 'PLBART': -1, 'devign': 57, 'regvd': 66, 'vulberta_cnn': 25}
104         qemu_console_resize(s->con, s->last_scr_width, s->last_scr_height);                {'linevul': -1, 'PLBART': -1, 'devign': 81, 'regvd': 20, 'vulberta_cnn': 90}
106         surface = qemu_console_surface(s->con);                                            {'linevul': -1, 'PLBART': -1, 'devign': 79, 'regvd': 31, 'vulberta_cnn': 73}
108         dpy_text_resize(s->con, width, height);                                            {'linevul': -1, 'PLBART': -1, 'devign': 86, 'regvd': 27, 'vulberta_cnn': 23}
110         s->last_depth = 0;                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 105, 'regvd': 98, 'vulberta_cnn': 97}
112         s->last_width = width;                                                             {'linevul': -1, 'PLBART': -1, 'devign': 101, 'regvd': 106, 'vulberta_cnn': 96}
114         s->last_height = height;                                                           {'linevul': -1, 'PLBART': -1, 'devign': 103, 'regvd': 107, 'vulberta_cnn': 30}
116         s->last_ch = cheight;                                                              {'linevul': -1, 'PLBART': -1, 'devign': 102, 'regvd': 90, 'vulberta_cnn': 31}
118         s->last_cw = cw;                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 24, 'regvd': 103, 'vulberta_cnn': 63}
120         full_update = 1;                                                                   {'linevul': -1, 'PLBART': -1, 'devign': 12, 'regvd': 99, 'vulberta_cnn': 34}
122     }                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 168, 'vulberta_cnn': 43}
124     full_update |= update_palette16(s);                                                    {'linevul': -1, 'PLBART': -1, 'devign': 2, 'regvd': 29, 'vulberta_cnn': 89}
126     palette = s->last_palette;                                                             {'linevul': -1, 'PLBART': -1, 'devign': 71, 'regvd': 109, 'vulberta_cnn': 36}
128     x_incr = cw * surface_bytes_per_pixel(surface);                                        {'linevul': -1, 'PLBART': -1, 'devign': 87, 'regvd': 28, 'vulberta_cnn': 46}
132     if (full_update) {                                                                     {'linevul': -1, 'PLBART': -1, 'devign': 85, 'regvd': 112, 'vulberta_cnn': 11}
134         s->full_update_text = 1;                                                           {'linevul': -1, 'PLBART': -1, 'devign': 1, 'regvd': 62, 'vulberta_cnn': 59}
136     }                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 167, 'vulberta_cnn': 50}
138     if (s->full_update_gfx) {                                                              {'linevul': -1, 'PLBART': -1, 'devign': 23, 'regvd': 68, 'vulberta_cnn': 4}
140         s->full_update_gfx = 0;                                                            {'linevul': -1, 'PLBART': -1, 'devign': 4, 'regvd': 80, 'vulberta_cnn': 62}
142         full_update |= 1;                                                                  {'linevul': -1, 'PLBART': -1, 'devign': 7, 'regvd': 95, 'vulberta_cnn': 10}
144     }                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 166, 'vulberta_cnn': 81}
148     cursor_offset = ((s->cr[VGA_CRTC_CURSOR_HI] << 8) |                                    {'linevul': -1, 'PLBART': -1, 'devign': 77, 'regvd': 9, 'vulberta_cnn': 74}
150                      s->cr[VGA_CRTC_CURSOR_LO]) - s->start_addr;                           {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 64, 'vulberta_cnn': 28}
152     if (cursor_offset != s->cursor_offset ||                                               {'linevul': -1, 'PLBART': -1, 'devign': 76, 'regvd': 38, 'vulberta_cnn': 9}
154         s->cr[VGA_CRTC_CURSOR_START] != s->cursor_start ||                                 {'linevul': -1, 'PLBART': -1, 'devign': 60, 'regvd': 67, 'vulberta_cnn': 32}
156         s->cr[VGA_CRTC_CURSOR_END] != s->cursor_end) {                                     {'linevul': -1, 'PLBART': -1, 'devign': 37, 'regvd': 60, 'vulberta_cnn': 17}
158       /* if the cursor position changed, we update the old and new                         {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 110, 'vulberta_cnn': 67}
160          chars */                                                                          {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 143, 'vulberta_cnn': -1}
162         if (s->cursor_offset < CH_ATTR_SIZE)                                               {'linevul': -1, 'PLBART': -1, 'devign': 29, 'regvd': 55, 'vulberta_cnn': 45}
164             s->last_ch_attr[s->cursor_offset] = -1;                                        {'linevul': -1, 'PLBART': -1, 'devign': 10, 'regvd': 22, 'vulberta_cnn': 76}
166         if (cursor_offset < CH_ATTR_SIZE)                                                  {'linevul': -1, 'PLBART': -1, 'devign': 68, 'regvd': 72, 'vulberta_cnn': 44}
168             s->last_ch_attr[cursor_offset] = -1;                                           {'linevul': -1, 'PLBART': -1, 'devign': 9, 'regvd': 21, 'vulberta_cnn': 2}
170         s->cursor_offset = cursor_offset;                                                  {'linevul': -1, 'PLBART': -1, 'devign': 75, 'regvd': 63, 'vulberta_cnn': 92}
172         s->cursor_start = s->cr[VGA_CRTC_CURSOR_START];                                    {'linevul': -1, 'PLBART': -1, 'devign': 59, 'regvd': 48, 'vulberta_cnn': 6}
174         s->cursor_end = s->cr[VGA_CRTC_CURSOR_END];                                        {'linevul': -1, 'PLBART': -1, 'devign': 36, 'regvd': 58, 'vulberta_cnn': 14}
176     }                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 165, 'vulberta_cnn': 51}
178     cursor_ptr = s->vram_ptr + (s->start_addr + cursor_offset) * 4;                        {'linevul': -1, 'PLBART': -1, 'devign': 8, 'regvd': 0, 'vulberta_cnn': 88}
180     if (now >= s->cursor_blink_time) {                                                     {'linevul': -1, 'PLBART': -1, 'devign': 45, 'regvd': 41, 'vulberta_cnn': 7}
182         s->cursor_blink_time = now + VGA_TEXT_CURSOR_PERIOD_MS / 2;                        {'linevul': -1, 'PLBART': -1, 'devign': 27, 'regvd': 39, 'vulberta_cnn': 61}
184         s->cursor_visible_phase = !s->cursor_visible_phase;                                {'linevul': -1, 'PLBART': -1, 'devign': 42, 'regvd': 87, 'vulberta_cnn': 19}
186     }                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 164, 'vulberta_cnn': 49}
190     dest = surface_data(surface);                                                          {'linevul': -1, 'PLBART': -1, 'devign': 63, 'regvd': 44, 'vulberta_cnn': 70}
192     linesize = surface_stride(surface);                                                    {'linevul': -1, 'PLBART': -1, 'devign': 48, 'regvd': 35, 'vulberta_cnn': 65}
194     ch_attr_ptr = s->last_ch_attr;                                                         {'linevul': -1, 'PLBART': -1, 'devign': 47, 'regvd': 82, 'vulberta_cnn': 80}
196     line = 0;                                                                              {'linevul': -1, 'PLBART': -1, 'devign': 100, 'regvd': 145, 'vulberta_cnn': 37}
198     offset = s->start_addr * 4;                                                            {'linevul': -1, 'PLBART': -1, 'devign': 52, 'regvd': 47, 'vulberta_cnn': 93}
200     for(cy = 0; cy < height; cy++) {                                                       {'linevul': -1, 'PLBART': -1, 'devign': 6, 'regvd': 113, 'vulberta_cnn': 99}
202         d1 = dest;                                                                         {'linevul': -1, 'PLBART': -1, 'devign': 67, 'regvd': 133, 'vulberta_cnn': 38}
204         src = s->vram_ptr + offset;                                                        {'linevul': -1, 'PLBART': -1, 'devign': 40, 'regvd': 30, 'vulberta_cnn': 84}
206         cx_min = width;                                                                    {'linevul': -1, 'PLBART': -1, 'devign': 43, 'regvd': 117, 'vulberta_cnn': 16}
208         cx_max = -1;                                                                       {'linevul': -1, 'PLBART': -1, 'devign': 41, 'regvd': 119, 'vulberta_cnn': 42}
210         for(cx = 0; cx < width; cx++) {                                                    {'linevul': -1, 'PLBART': -1, 'devign': 5, 'regvd': 108, 'vulberta_cnn': 35}
212             ch_attr = *(uint16_t *)src;                                                    {'linevul': -1, 'PLBART': -1, 'devign': 73, 'regvd': 11, 'vulberta_cnn': 13}
214             if (full_update || ch_attr != *ch_attr_ptr || src == cursor_ptr) {             {'linevul': -1, 'PLBART': -1, 'devign': 3, 'regvd': 15, 'vulberta_cnn': 48}
216                 if (cx < cx_min)                                                           {'linevul': -1, 'PLBART': -1, 'devign': 64, 'regvd': 122, 'vulberta_cnn': 83}
218                     cx_min = cx;                                                           {'linevul': -1, 'PLBART': -1, 'devign': 98, 'regvd': 130, 'vulberta_cnn': 12}
220                 if (cx > cx_max)                                                           {'linevul': -1, 'PLBART': -1, 'devign': 49, 'regvd': 126, 'vulberta_cnn': 5}
222                     cx_max = cx;                                                           {'linevul': -1, 'PLBART': -1, 'devign': 94, 'regvd': 132, 'vulberta_cnn': 18}
224                 *ch_attr_ptr = ch_attr;                                                    {'linevul': -1, 'PLBART': -1, 'devign': 62, 'regvd': 93, 'vulberta_cnn': 94}
226 #ifdef HOST_WORDS_BIGENDIAN                                                                {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 142, 'vulberta_cnn': 41}
228                 ch = ch_attr >> 8;                                                         {'linevul': -1, 'PLBART': -1, 'devign': 90, 'regvd': 115, 'vulberta_cnn': -1}
230                 cattr = ch_attr & 0xff;                                                    {'linevul': -1, 'PLBART': -1, 'devign': 88, 'regvd': 105, 'vulberta_cnn': -1}
232 #else                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 150, 'vulberta_cnn': -1}
234                 ch = ch_attr & 0xff;                                                       {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 104, 'vulberta_cnn': -1}
236                 cattr = ch_attr >> 8;                                                      {'linevul': -1, 'PLBART': -1, 'devign': 89, 'regvd': 114, 'vulberta_cnn': -1}
238 #endif                                                                                     {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 151, 'vulberta_cnn': -1}
240                 font_ptr = font_base[(cattr >> 3) & 1];                                    {'linevul': -1, 'PLBART': -1, 'devign': 84, 'regvd': 5, 'vulberta_cnn': -1}
242                 font_ptr += 32 * 4 * ch;                                                   {'linevul': -1, 'PLBART': -1, 'devign': 69, 'regvd': 40, 'vulberta_cnn': -1}
244                 bgcol = palette[cattr >> 4];                                               {'linevul': -1, 'PLBART': -1, 'devign': 54, 'regvd': 121, 'vulberta_cnn': -1}
246                 fgcol = palette[cattr & 0x0f];                                             {'linevul': -1, 'PLBART': -1, 'devign': 53, 'regvd': 118, 'vulberta_cnn': -1}
248                 if (cw == 16) {                                                            {'linevul': -1, 'PLBART': -1, 'devign': 32, 'regvd': 129, 'vulberta_cnn': -1}
250                     vga_draw_glyph16(d1, linesize,                                         {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 51, 'vulberta_cnn': -1}
252                                      font_ptr, cheight, fgcol, bgcol);                     {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 54, 'vulberta_cnn': -1}
254                 } else if (cw != 9) {                                                      {'linevul': -1, 'PLBART': -1, 'devign': 35, 'regvd': 124, 'vulberta_cnn': -1}
256                     vga_draw_glyph8(d1, linesize,                                          {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 46, 'vulberta_cnn': -1}
258                                     font_ptr, cheight, fgcol, bgcol);                      {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 53, 'vulberta_cnn': -1}
260                 } else {                                                                   {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 149, 'vulberta_cnn': -1}
262                     dup9 = 0;                                                              {'linevul': -1, 'PLBART': -1, 'devign': 107, 'regvd': 141, 'vulberta_cnn': -1}
264                     if (ch >= 0xb0 && ch <= 0xdf &&                                        {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 134, 'vulberta_cnn': -1}
266                         (s->ar[VGA_ATC_MODE] & 0x04)) {                                    {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 49, 'vulberta_cnn': -1}
268                         dup9 = 1;                                                          {'linevul': -1, 'PLBART': -1, 'devign': 116, 'regvd': 139, 'vulberta_cnn': -1}
270                     }                                                                      {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 163, 'vulberta_cnn': -1}
272                     vga_draw_glyph9(d1, linesize,                                          {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 52, 'vulberta_cnn': -1}
274                                     font_ptr, cheight, fgcol, bgcol, dup9);                {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 37, 'vulberta_cnn': -1}
276                 }                                                                          {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 162, 'vulberta_cnn': -1}
278                 if (src == cursor_ptr &&                                                   {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 70, 'vulberta_cnn': -1}
280                     !(s->cr[VGA_CRTC_CURSOR_START] & 0x20) &&                              {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 42, 'vulberta_cnn': -1}
282                     s->cursor_visible_phase) {                                             {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 96, 'vulberta_cnn': -1}
284                     int line_start, line_last, h;                                          {'linevul': -1, 'PLBART': -1, 'devign': 115, 'regvd': 94, 'vulberta_cnn': -1}
286                     /* draw the cursor */                                                  {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 137, 'vulberta_cnn': -1}
288                     line_start = s->cr[VGA_CRTC_CURSOR_START] & 0x1f;                      {'linevul': -1, 'PLBART': -1, 'devign': 22, 'regvd': 25, 'vulberta_cnn': -1}
290                     line_last = s->cr[VGA_CRTC_CURSOR_END] & 0x1f;                         {'linevul': -1, 'PLBART': -1, 'devign': 21, 'regvd': 24, 'vulberta_cnn': -1}
292                     /* XXX: check that */                                                  {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 144, 'vulberta_cnn': -1}
294                     if (line_last > cheight - 1)                                           {'linevul': -1, 'PLBART': -1, 'devign': 74, 'regvd': 61, 'vulberta_cnn': -1}
296                         line_last = cheight - 1;                                           {'linevul': -1, 'PLBART': -1, 'devign': 104, 'regvd': 75, 'vulberta_cnn': -1}
298                     if (line_last >= line_start && line_start < cheight) {                 {'linevul': -1, 'PLBART': -1, 'devign': 50, 'regvd': 43, 'vulberta_cnn': -1}
300                         h = line_last - line_start + 1;                                    {'linevul': -1, 'PLBART': -1, 'devign': 70, 'regvd': 89, 'vulberta_cnn': -1}
302                         d = d1 + linesize * line_start;                                    {'linevul': -1, 'PLBART': -1, 'devign': 61, 'regvd': 57, 'vulberta_cnn': -1}
304                         if (cw == 16) {                                                    {'linevul': -1, 'PLBART': -1, 'devign': 31, 'regvd': 128, 'vulberta_cnn': -1}
306                             vga_draw_glyph16(d, linesize,                                  {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 50, 'vulberta_cnn': -1}
308                                              cursor_glyph, h, fgcol, bgcol);               {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 84, 'vulberta_cnn': -1}
310                         } else if (cw != 9) {                                              {'linevul': -1, 'PLBART': -1, 'devign': 34, 'regvd': 123, 'vulberta_cnn': -1}
312                             vga_draw_glyph8(d, linesize,                                   {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 73, 'vulberta_cnn': -1}
314                                             cursor_glyph, h, fgcol, bgcol);                {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 83, 'vulberta_cnn': -1}
316                         } else {                                                           {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 148, 'vulberta_cnn': -1}
318                             vga_draw_glyph9(d, linesize,                                   {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 79, 'vulberta_cnn': -1}
320                                             cursor_glyph, h, fgcol, bgcol, 1);             {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 59, 'vulberta_cnn': -1}
322                         }                                                                  {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 161, 'vulberta_cnn': -1}
324                     }                                                                      {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 160, 'vulberta_cnn': -1}
326                 }                                                                          {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 159, 'vulberta_cnn': -1}
328             }                                                                              {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 158, 'vulberta_cnn': -1}
330             d1 += x_incr;                                                                  {'linevul': -1, 'PLBART': -1, 'devign': 28, 'regvd': 111, 'vulberta_cnn': -1}
332             src += 4;                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 66, 'regvd': 138, 'vulberta_cnn': -1}
334             ch_attr_ptr++;                                                                 {'linevul': -1, 'PLBART': -1, 'devign': 78, 'regvd': 125, 'vulberta_cnn': -1}
336         }                                                                                  {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 157, 'vulberta_cnn': -1}
338         if (cx_max != -1) {                                                                {'linevul': -1, 'PLBART': -1, 'devign': 19, 'regvd': 81, 'vulberta_cnn': -1}
340             dpy_gfx_update(s->con, cx_min * cw, cy * cheight,                              {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 23, 'vulberta_cnn': -1}
342                            (cx_max - cx_min + 1) * cw, cheight);                           {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 16, 'vulberta_cnn': -1}
344         }                                                                                  {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 156, 'vulberta_cnn': -1}
346         dest += linesize * cheight;                                                        {'linevul': -1, 'PLBART': -1, 'devign': 55, 'regvd': 97, 'vulberta_cnn': -1}
348         line1 = line + cheight;                                                            {'linevul': -1, 'PLBART': -1, 'devign': 38, 'regvd': 127, 'vulberta_cnn': -1}
350         offset += line_offset;                                                             {'linevul': -1, 'PLBART': -1, 'devign': 65, 'regvd': 86, 'vulberta_cnn': -1}
352         if (line < s->line_compare && line1 >= s->line_compare) {                          {'linevul': -1, 'PLBART': -1, 'devign': 18, 'regvd': 34, 'vulberta_cnn': -1}
354             offset = 0;                                                                    {'linevul': -1, 'PLBART': -1, 'devign': 114, 'regvd': 131, 'vulberta_cnn': -1}
356         }                                                                                  {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 155, 'vulberta_cnn': -1}
358         line = line1;                                                                      {'linevul': -1, 'PLBART': -1, 'devign': 72, 'regvd': 140, 'vulberta_cnn': -1}
360     }                                                                                      {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 154, 'vulberta_cnn': -1}
362 }                                                                                          {'linevul': -1, 'PLBART': -1, 'devign': -1, 'regvd': 153, 'vulberta_cnn': -1}
-----------------------
Highlighted lines: 
0 static void vga_draw_text(VGACommonState *s, int full_update)
8     int cx_min, cx_max, linesize, x_incr, line, line1;
30     offset = (((v >> 4) & 1) | ((v << 1) & 6)) * 8192 * 4 + 2;
--------------------------------------------------------------------------------------------------------------
Example ids:  25859 project:  FFmpeg commit id:  feb13aed794a7f1a1f8395159e9b077351348a34 Number of lines:  208 tground truth:  1
Original lines: 
Predicted Correctly by :  ['PLBART', 'devign', 'regvd', 'vulberta_cnn', 'vulberta_mlp']
0 static int filter_frame(AVFilterLink *inlink, AVFrame *picref)                                                                                                {'PLBART': 3, 'devign': 35, 'regvd': 11, 'vulberta_cnn': 12, 'vulberta_mlp': 7}
2 {                                                                                                                                                             {'PLBART': 7, 'devign': -1, 'regvd': 180, 'vulberta_cnn': 47, 'vulberta_mlp': 74}
4     AVFilterContext *ctx = inlink->dst;                                                                                                                       {'PLBART': 4, 'devign': 88, 'regvd': 44, 'vulberta_cnn': 15, 'vulberta_mlp': 4}
6     SignatureContext *sic = ctx->priv;                                                                                                                        {'PLBART': 5, 'devign': 134, 'regvd': 50, 'vulberta_cnn': 40, 'vulberta_mlp': 73}
8     StreamContext *sc = &(sic->streamcontexts[FF_INLINK_IDX(inlink)]);                                                                                        {'PLBART': 2, 'devign': 41, 'regvd': 10, 'vulberta_cnn': 5, 'vulberta_mlp': 10}
10     FineSignature* fs;                                                                                                                                       {'PLBART': 6, 'devign': 146, 'regvd': 98, 'vulberta_cnn': 18, 'vulberta_mlp': 12}
14     static const uint8_t pot3[5] = { 3*3*3*3, 3*3*3, 3*3, 3, 1 };                                                                                            {'PLBART': 1, 'devign': 40, 'regvd': 4, 'vulberta_cnn': 63, 'vulberta_mlp': 9}
16     /* indexes of words : 210,217,219,274,334  44,175,233,270,273  57,70,103,237,269  100,285,295,337,354  101,102,111,275,296                               {'PLBART': 0, 'devign': -1, 'regvd': 2, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
18     s2usw = sorted to unsorted wordvec: 44 is at index 5, 57 at index 10...                                                                                  {'PLBART': -1, 'devign': 136, 'regvd': 13, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
20     */                                                                                                                                                       {'PLBART': -1, 'devign': -1, 'regvd': 172, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
22     static const unsigned int wordvec[25] = {44,57,70,100,101,102,103,111,175,210,217,219,233,237,269,270,273,274,275,285,295,296,334,337,354};              {'PLBART': -1, 'devign': 21, 'regvd': 0, 'vulberta_cnn': 49, 'vulberta_mlp': 16}
24     static const uint8_t      s2usw[25]   = { 5,10,11, 15, 20, 21, 12, 22,  6,  0,  1,  2,  7, 13, 14,  8,  9,  3, 23, 16, 17, 24,  4, 18, 19};              {'PLBART': -1, 'devign': 20, 'regvd': 1, 'vulberta_cnn': 74, 'vulberta_mlp': 29}
28     uint8_t wordt2b[5] = { 0, 0, 0, 0, 0 }; /* word ternary to binary */                                                                                     {'PLBART': -1, 'devign': 27, 'regvd': 3, 'vulberta_cnn': 61, 'vulberta_mlp': 8}
30     uint64_t intpic[32][32];                                                                                                                                 {'PLBART': -1, 'devign': 111, 'regvd': 33, 'vulberta_cnn': 67, 'vulberta_mlp': 1}
32     uint64_t rowcount;                                                                                                                                       {'PLBART': -1, 'devign': 109, 'regvd': 71, 'vulberta_cnn': 31, 'vulberta_mlp': 0}
34     uint8_t *p = picref->data[0];                                                                                                                            {'PLBART': -1, 'devign': 26, 'regvd': 14, 'vulberta_cnn': 1, 'vulberta_mlp': 3}
36     int inti, intj;                                                                                                                                          {'PLBART': -1, 'devign': 149, 'regvd': 90, 'vulberta_cnn': 21, 'vulberta_mlp': 18}
38     int *intjlut;                                                                                                                                            {'PLBART': -1, 'devign': 152, 'regvd': 110, 'vulberta_cnn': 26, 'vulberta_mlp': 17}
42     uint64_t conflist[DIFFELEM_SIZE];                                                                                                                        {'PLBART': -1, 'devign': 99, 'regvd': 31, 'vulberta_cnn': 6, 'vulberta_mlp': 6}
44     int f = 0, g = 0, w = 0;                                                                                                                                 {'PLBART': -1, 'devign': 28, 'regvd': 58, 'vulberta_cnn': 57, 'vulberta_mlp': 20}
46     int32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;                                                                                                        {'PLBART': -1, 'devign': 57, 'regvd': 32, 'vulberta_cnn': 73, 'vulberta_mlp': 15}
48     int64_t denom;                                                                                                                                           {'PLBART': -1, 'devign': 145, 'regvd': 97, 'vulberta_cnn': 22, 'vulberta_mlp': 72}
50     int i, j, k, ternary;                                                                                                                                    {'PLBART': -1, 'devign': 148, 'regvd': 77, 'vulberta_cnn': 2, 'vulberta_mlp': 71}
52     uint64_t blocksum;                                                                                                                                       {'PLBART': -1, 'devign': 85, 'regvd': 70, 'vulberta_cnn': 46, 'vulberta_mlp': 14}
54     int blocksize;                                                                                                                                           {'PLBART': -1, 'devign': 144, 'regvd': 128, 'vulberta_cnn': 43, 'vulberta_mlp': 70}
56     int64_t th; /* threshold */                                                                                                                              {'PLBART': -1, 'devign': 150, 'regvd': 52, 'vulberta_cnn': 62, 'vulberta_mlp': 69}
58     int64_t sum;                                                                                                                                             {'PLBART': -1, 'devign': 151, 'regvd': 89, 'vulberta_cnn': 35, 'vulberta_mlp': 68}
62     int64_t precfactor = (sc->divide) ? 65536 : BLOCK_LCM;                                                                                                   {'PLBART': -1, 'devign': 127, 'regvd': 29, 'vulberta_cnn': 30, 'vulberta_mlp': 23}
66     /* initialize fs */                                                                                                                                      {'PLBART': -1, 'devign': -1, 'regvd': 126, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
68     if (sc->curfinesig) {                                                                                                                                    {'PLBART': -1, 'devign': 84, 'regvd': 139, 'vulberta_cnn': 68, 'vulberta_mlp': 67}
70         fs = av_mallocz(sizeof(FineSignature));                                                                                                              {'PLBART': -1, 'devign': 69, 'regvd': 53, 'vulberta_cnn': 20, 'vulberta_mlp': 11}
72         if (!fs)                                                                                                                                             {'PLBART': -1, 'devign': 91, 'regvd': 173, 'vulberta_cnn': 38, 'vulberta_mlp': 66}
74             return AVERROR(ENOMEM);                                                                                                                          {'PLBART': -1, 'devign': 63, 'regvd': 150, 'vulberta_cnn': 60, 'vulberta_mlp': 65}
76         sc->curfinesig->next = fs;                                                                                                                           {'PLBART': -1, 'devign': 44, 'regvd': 105, 'vulberta_cnn': 17, 'vulberta_mlp': 64}
78         fs->prev = sc->curfinesig;                                                                                                                           {'PLBART': -1, 'devign': 45, 'regvd': 116, 'vulberta_cnn': 16, 'vulberta_mlp': 63}
80         sc->curfinesig = fs;                                                                                                                                 {'PLBART': -1, 'devign': 65, 'regvd': 118, 'vulberta_cnn': 27, 'vulberta_mlp': 5}
82     } else {                                                                                                                                                 {'PLBART': -1, 'devign': -1, 'regvd': 178, 'vulberta_cnn': 56, 'vulberta_mlp': 62}
84         fs = sc->curfinesig = sc->finesiglist;                                                                                                               {'PLBART': -1, 'devign': 36, 'regvd': 86, 'vulberta_cnn': 70, 'vulberta_mlp': 31}
86         sc->curcoarsesig1->first = fs;                                                                                                                       {'PLBART': -1, 'devign': 54, 'regvd': 113, 'vulberta_cnn': 10, 'vulberta_mlp': 13}
88     }                                                                                                                                                        {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': 37, 'vulberta_mlp': 61}
92     fs->pts = picref->pts;                                                                                                                                   {'PLBART': -1, 'devign': 118, 'regvd': 99, 'vulberta_cnn': 4, 'vulberta_mlp': 2}
94     fs->index = sc->lastindex++;                                                                                                                             {'PLBART': -1, 'devign': 18, 'regvd': 85, 'vulberta_cnn': 24, 'vulberta_mlp': 28}
98     memset(intpic, 0, sizeof(uint64_t)*32*32);                                                                                                               {'PLBART': -1, 'devign': 104, 'regvd': 8, 'vulberta_cnn': 28, 'vulberta_mlp': 60}
100     intjlut = av_malloc_array(inlink->w, sizeof(int));                                                                                                      {'PLBART': -1, 'devign': 120, 'regvd': 25, 'vulberta_cnn': 42, 'vulberta_mlp': 59}
102     if (!intjlut)                                                                                                                                           {'PLBART': -1, 'devign': 70, 'regvd': 134, 'vulberta_cnn': 48, 'vulberta_mlp': 21}
104         return AVERROR(ENOMEM);                                                                                                                             {'PLBART': -1, 'devign': 62, 'regvd': 149, 'vulberta_cnn': 36, 'vulberta_mlp': 58}
106     for (i = 0; i < inlink->w; i++) {                                                                                                                       {'PLBART': -1, 'devign': 1, 'regvd': 84, 'vulberta_cnn': 51, 'vulberta_mlp': 33}
108         intjlut[i] = (i*32)/inlink->w;                                                                                                                      {'PLBART': -1, 'devign': 42, 'regvd': 30, 'vulberta_cnn': 59, 'vulberta_mlp': 57}
110     }                                                                                                                                                       {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': 33, 'vulberta_mlp': 56}
114     for (i = 0; i < inlink->h; i++) {                                                                                                                       {'PLBART': -1, 'devign': 2, 'regvd': 91, 'vulberta_cnn': 71, 'vulberta_mlp': 24}
116         inti = (i*32)/inlink->h;                                                                                                                            {'PLBART': -1, 'devign': 133, 'regvd': 43, 'vulberta_cnn': 39, 'vulberta_mlp': 19}
118         for (j = 0; j < inlink->w; j++) {                                                                                                                   {'PLBART': -1, 'devign': 0, 'regvd': 78, 'vulberta_cnn': 25, 'vulberta_mlp': 32}
120             intj = intjlut[j];                                                                                                                              {'PLBART': -1, 'devign': 128, 'regvd': 72, 'vulberta_cnn': 41, 'vulberta_mlp': 55}
122             intpic[inti][intj] += p[j];                                                                                                                     {'PLBART': -1, 'devign': 82, 'regvd': 59, 'vulberta_cnn': 66, 'vulberta_mlp': 54}
124         }                                                                                                                                                   {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': 34, 'vulberta_mlp': 53}
126         p += picref->linesize[0];                                                                                                                           {'PLBART': -1, 'devign': 24, 'regvd': 61, 'vulberta_cnn': 32, 'vulberta_mlp': 52}
128     }                                                                                                                                                       {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': 29, 'vulberta_mlp': 51}
130     av_freep(&intjlut);                                                                                                                                     {'PLBART': -1, 'devign': 139, 'regvd': 74, 'vulberta_cnn': 13, 'vulberta_mlp': 50}
134     /* The following calculates a summed area table (intpic) and brings the numbers                                                                         {'PLBART': -1, 'devign': -1, 'regvd': 67, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
136      * in intpic to the same denominator.                                                                                                                   {'PLBART': -1, 'devign': -1, 'regvd': 81, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
138      * So you only have to handle the numinator in the following sections.                                                                                  {'PLBART': -1, 'devign': -1, 'regvd': 117, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
140      */                                                                                                                                                     {'PLBART': -1, 'devign': -1, 'regvd': 171, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
142     dh1 = inlink->h / 32;                                                                                                                                   {'PLBART': -1, 'devign': 123, 'regvd': 87, 'vulberta_cnn': 9, 'vulberta_mlp': 27}
144     if (inlink->h % 32)                                                                                                                                     {'PLBART': -1, 'devign': 126, 'regvd': 131, 'vulberta_cnn': 50, 'vulberta_mlp': 26}
146         dh2 = dh1 + 1;                                                                                                                                      {'PLBART': -1, 'devign': 132, 'regvd': 158, 'vulberta_cnn': 3, 'vulberta_mlp': 49}
148     dw1 = inlink->w / 32;                                                                                                                                   {'PLBART': -1, 'devign': 108, 'regvd': 79, 'vulberta_cnn': 8, 'vulberta_mlp': 48}
150     if (inlink->w % 32)                                                                                                                                     {'PLBART': -1, 'devign': 124, 'regvd': 122, 'vulberta_cnn': 64, 'vulberta_mlp': 25}
152         dw2 = dw1 + 1;                                                                                                                                      {'PLBART': -1, 'devign': 131, 'regvd': 154, 'vulberta_cnn': 44, 'vulberta_mlp': 47}
154     denom = (sc->divide) ? dh1 * dh2 * dw1 * dw2 : 1;                                                                                                       {'PLBART': -1, 'devign': 33, 'regvd': 63, 'vulberta_cnn': 69, 'vulberta_mlp': 46}
158     for (i = 0; i < 32; i++) {                                                                                                                              {'PLBART': -1, 'devign': 8, 'regvd': 109, 'vulberta_cnn': 54, 'vulberta_mlp': 45}
160         rowcount = 0;                                                                                                                                       {'PLBART': -1, 'devign': 141, 'regvd': 130, 'vulberta_cnn': 45, 'vulberta_mlp': 44}
162         a = 1;                                                                                                                                              {'PLBART': -1, 'devign': 135, 'regvd': 167, 'vulberta_cnn': 11, 'vulberta_mlp': 43}
164         if (dh2 > 1) {                                                                                                                                      {'PLBART': -1, 'devign': 112, 'regvd': 166, 'vulberta_cnn': 58, 'vulberta_mlp': 22}
166             a = ((inlink->h*(i+1))%32 == 0) ? (inlink->h*(i+1))/32 - 1 : (inlink->h*(i+1))/32;                                                              {'PLBART': -1, 'devign': 17, 'regvd': 46, 'vulberta_cnn': 0, 'vulberta_mlp': 35}
168             a -= ((inlink->h*i)%32 == 0) ? (inlink->h*i)/32 - 1 : (inlink->h*i)/32;                                                                         {'PLBART': -1, 'devign': 14, 'regvd': 45, 'vulberta_cnn': 65, 'vulberta_mlp': 30}
170             a = (a == dh1)? dh2 : dh1;                                                                                                                      {'PLBART': -1, 'devign': 89, 'regvd': 133, 'vulberta_cnn': 52, 'vulberta_mlp': 42}
172         }                                                                                                                                                   {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': 23, 'vulberta_mlp': 41}
174         for (j = 0; j < 32; j++) {                                                                                                                          {'PLBART': -1, 'devign': 13, 'regvd': 108, 'vulberta_cnn': 14, 'vulberta_mlp': 40}
176             b = 1;                                                                                                                                          {'PLBART': -1, 'devign': 140, 'regvd': 165, 'vulberta_cnn': 19, 'vulberta_mlp': 39}
178             if (dw2 > 1) {                                                                                                                                  {'PLBART': -1, 'devign': 107, 'regvd': 163, 'vulberta_cnn': 55, 'vulberta_mlp': 38}
180                 b = ((inlink->w*(j+1))%32 == 0) ? (inlink->w*(j+1))/32 - 1 : (inlink->w*(j+1))/32;                                                          {'PLBART': -1, 'devign': 10, 'regvd': 42, 'vulberta_cnn': 7, 'vulberta_mlp': 34}
182                 b -= ((inlink->w*j)%32 == 0) ? (inlink->w*j)/32 - 1 : (inlink->w*j)/32;                                                                     {'PLBART': -1, 'devign': 9, 'regvd': 41, 'vulberta_cnn': 72, 'vulberta_mlp': 37}
184                 b = (b == dw1)? dw2 : dw1;                                                                                                                  {'PLBART': -1, 'devign': 95, 'regvd': 120, 'vulberta_cnn': 53, 'vulberta_mlp': 36}
186             }                                                                                                                                               {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
188             rowcount += intpic[i][j] * a * b * precfactor / denom;                                                                                          {'PLBART': -1, 'devign': 37, 'regvd': 36, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
190             if (i > 0) {                                                                                                                                    {'PLBART': -1, 'devign': 116, 'regvd': 170, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
192                 intpic[i][j] = intpic[i-1][j] + rowcount;                                                                                                   {'PLBART': -1, 'devign': 31, 'regvd': 49, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
194             } else {                                                                                                                                        {'PLBART': -1, 'devign': -1, 'regvd': 177, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
196                 intpic[i][j] = rowcount;                                                                                                                    {'PLBART': -1, 'devign': 81, 'regvd': 54, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
198             }                                                                                                                                               {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
200         }                                                                                                                                                   {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
202     }                                                                                                                                                       {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
206     denom = (sc->divide) ? 1 : dh1 * dh2 * dw1 * dw2;                                                                                                       {'PLBART': -1, 'devign': 32, 'regvd': 62, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
210     for (i = 0; i < ELEMENT_COUNT; i++) {                                                                                                                   {'PLBART': -1, 'devign': 7, 'regvd': 96, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
212         const ElemCat* elemcat = elements[i];                                                                                                               {'PLBART': -1, 'devign': 80, 'regvd': 55, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
214         int64_t* elemsignature;                                                                                                                             {'PLBART': -1, 'devign': 142, 'regvd': 60, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
216         uint64_t* sortsignature;                                                                                                                            {'PLBART': -1, 'devign': 113, 'regvd': 47, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
220         elemsignature = av_malloc_array(elemcat->elem_count, sizeof(int64_t));                                                                              {'PLBART': -1, 'devign': 122, 'regvd': 24, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
222         if (!elemsignature)                                                                                                                                 {'PLBART': -1, 'devign': 119, 'regvd': 162, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
224             return AVERROR(ENOMEM);                                                                                                                         {'PLBART': -1, 'devign': 61, 'regvd': 148, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
226         sortsignature = av_malloc_array(elemcat->elem_count, sizeof(int64_t));                                                                              {'PLBART': -1, 'devign': 125, 'regvd': 23, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
228         if (!sortsignature)                                                                                                                                 {'PLBART': -1, 'devign': 83, 'regvd': 161, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
230             return AVERROR(ENOMEM);                                                                                                                         {'PLBART': -1, 'devign': 60, 'regvd': 147, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
234         for (j = 0; j < elemcat->elem_count; j++) {                                                                                                         {'PLBART': -1, 'devign': 12, 'regvd': 66, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
236             blocksum = 0;                                                                                                                                   {'PLBART': -1, 'devign': 56, 'regvd': 152, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
238             blocksize = 0;                                                                                                                                  {'PLBART': -1, 'devign': 23, 'regvd': 142, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
240             for (k = 0; k < elemcat->left_count; k++) {                                                                                                     {'PLBART': -1, 'devign': 29, 'regvd': 68, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
242                 blocksum += get_block_sum(sc, intpic, &elemcat->blocks[j*elemcat->block_count+k]);                                                          {'PLBART': -1, 'devign': 50, 'regvd': 6, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
244                 blocksize += get_block_size(&elemcat->blocks[j*elemcat->block_count+k]);                                                                    {'PLBART': -1, 'devign': 52, 'regvd': 35, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
246             }                                                                                                                                               {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
248             sum = blocksum / blocksize;                                                                                                                     {'PLBART': -1, 'devign': 117, 'regvd': 157, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
250             if (elemcat->av_elem) {                                                                                                                         {'PLBART': -1, 'devign': 97, 'regvd': 121, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
252                 sum -= 128 * precfactor * denom;                                                                                                            {'PLBART': -1, 'devign': 93, 'regvd': 69, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
254             } else {                                                                                                                                        {'PLBART': -1, 'devign': -1, 'regvd': 176, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
256                 blocksum = 0;                                                                                                                               {'PLBART': -1, 'devign': 55, 'regvd': 151, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
258                 blocksize = 0;                                                                                                                              {'PLBART': -1, 'devign': 22, 'regvd': 141, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
260                 for (; k < elemcat->block_count; k++) {                                                                                                     {'PLBART': -1, 'devign': 34, 'regvd': 93, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
262                     blocksum += get_block_sum(sc, intpic, &elemcat->blocks[j*elemcat->block_count+k]);                                                      {'PLBART': -1, 'devign': 49, 'regvd': 5, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
264                     blocksize += get_block_size(&elemcat->blocks[j*elemcat->block_count+k]);                                                                {'PLBART': -1, 'devign': 51, 'regvd': 34, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
266                 }                                                                                                                                           {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
268                 sum -= blocksum / blocksize;                                                                                                                {'PLBART': -1, 'devign': 66, 'regvd': 156, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
270                 conflist[g++] = FFABS(sum * 8 / (precfactor * denom));                                                                                      {'PLBART': -1, 'devign': 19, 'regvd': 37, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
272             }                                                                                                                                               {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
276             elemsignature[j] = sum;                                                                                                                         {'PLBART': -1, 'devign': 98, 'regvd': 95, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
278             sortsignature[j] = FFABS(sum);                                                                                                                  {'PLBART': -1, 'devign': 100, 'regvd': 73, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
280         }                                                                                                                                                   {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
284         /* get threshold */                                                                                                                                 {'PLBART': -1, 'devign': -1, 'regvd': 144, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
286         qsort(sortsignature, elemcat->elem_count, sizeof(uint64_t), (void*) cmp);                                                                           {'PLBART': -1, 'devign': 78, 'regvd': 16, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
288         th = sortsignature[(int) (elemcat->elem_count*0.333)];                                                                                              {'PLBART': -1, 'devign': 25, 'regvd': 17, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
292         /* ternarize */                                                                                                                                     {'PLBART': -1, 'devign': -1, 'regvd': 153, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
294         for (j = 0; j < elemcat->elem_count; j++) {                                                                                                         {'PLBART': -1, 'devign': 11, 'regvd': 65, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
296             if (elemsignature[j] < -th) {                                                                                                                   {'PLBART': -1, 'devign': 90, 'regvd': 115, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
298                 ternary = 0;                                                                                                                                {'PLBART': -1, 'devign': 143, 'regvd': 136, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
300             } else if (elemsignature[j] <= th) {                                                                                                            {'PLBART': -1, 'devign': 94, 'regvd': 83, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
302                 ternary = 1;                                                                                                                                {'PLBART': -1, 'devign': 105, 'regvd': 140, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
304             } else {                                                                                                                                        {'PLBART': -1, 'devign': -1, 'regvd': 175, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
306                 ternary = 2;                                                                                                                                {'PLBART': -1, 'devign': 147, 'regvd': 135, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
308             }                                                                                                                                               {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
310             fs->framesig[f/5] += ternary * pot3[f%5];                                                                                                       {'PLBART': -1, 'devign': 43, 'regvd': 39, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
314             if (f == wordvec[w]) {                                                                                                                          {'PLBART': -1, 'devign': 102, 'regvd': 92, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
316                 fs->words[s2usw[w]/5] += ternary * pot3[wordt2b[s2usw[w]/5]++];                                                                             {'PLBART': -1, 'devign': 30, 'regvd': 27, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
318                 if (w < 24)                                                                                                                                 {'PLBART': -1, 'devign': 130, 'regvd': 169, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
320                     w++;                                                                                                                                    {'PLBART': -1, 'devign': 129, 'regvd': 174, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
322             }                                                                                                                                               {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
324             f++;                                                                                                                                            {'PLBART': -1, 'devign': 103, 'regvd': 179, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
326         }                                                                                                                                                   {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
328         av_freep(&elemsignature);                                                                                                                           {'PLBART': -1, 'devign': 138, 'regvd': 101, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
330         av_freep(&sortsignature);                                                                                                                           {'PLBART': -1, 'devign': 137, 'regvd': 100, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
332     }                                                                                                                                                       {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
336     /* confidence */                                                                                                                                        {'PLBART': -1, 'devign': -1, 'regvd': 160, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
338     qsort(conflist, DIFFELEM_SIZE, sizeof(uint64_t), (void*) cmp);                                                                                          {'PLBART': -1, 'devign': 110, 'regvd': 9, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
340     fs->confidence = FFMIN(conflist[DIFFELEM_SIZE/2], 255);                                                                                                 {'PLBART': -1, 'devign': 87, 'regvd': 7, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
344     /* coarsesignature */                                                                                                                                   {'PLBART': -1, 'devign': -1, 'regvd': 129, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
346     if (sc->coarsecount == 0) {                                                                                                                             {'PLBART': -1, 'devign': 71, 'regvd': 94, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
348         if (sc->curcoarsesig2) {                                                                                                                            {'PLBART': -1, 'devign': 121, 'regvd': 143, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
350             sc->curcoarsesig1 = av_mallocz(sizeof(CoarseSignature));                                                                                        {'PLBART': -1, 'devign': 72, 'regvd': 51, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
352             if (!sc->curcoarsesig1)                                                                                                                         {'PLBART': -1, 'devign': 101, 'regvd': 164, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
354                 return AVERROR(ENOMEM);                                                                                                                     {'PLBART': -1, 'devign': 59, 'regvd': 146, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
356             sc->curcoarsesig1->first = fs;                                                                                                                  {'PLBART': -1, 'devign': 53, 'regvd': 112, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
358             sc->curcoarsesig2->next = sc->curcoarsesig1;                                                                                                    {'PLBART': -1, 'devign': 39, 'regvd': 104, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
360             sc->coarseend = sc->curcoarsesig1;                                                                                                              {'PLBART': -1, 'devign': 76, 'regvd': 127, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
362         }                                                                                                                                                   {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
364     }                                                                                                                                                       {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
366     if (sc->coarsecount == 45) {                                                                                                                            {'PLBART': -1, 'devign': 73, 'regvd': 88, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
368         sc->midcoarse = 1;                                                                                                                                  {'PLBART': -1, 'devign': 48, 'regvd': 132, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
370         sc->curcoarsesig2 = av_mallocz(sizeof(CoarseSignature));                                                                                            {'PLBART': -1, 'devign': 64, 'regvd': 48, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
372         if (!sc->curcoarsesig2)                                                                                                                             {'PLBART': -1, 'devign': 47, 'regvd': 159, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
374             return AVERROR(ENOMEM);                                                                                                                         {'PLBART': -1, 'devign': 58, 'regvd': 145, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
376         sc->curcoarsesig2->first = fs;                                                                                                                      {'PLBART': -1, 'devign': 75, 'regvd': 107, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
378         sc->curcoarsesig1->next = sc->curcoarsesig2;                                                                                                        {'PLBART': -1, 'devign': 38, 'regvd': 103, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
380         sc->coarseend = sc->curcoarsesig2;                                                                                                                  {'PLBART': -1, 'devign': 68, 'regvd': 119, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
382     }                                                                                                                                                       {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
384     for (i = 0; i < 5; i++) {                                                                                                                               {'PLBART': -1, 'devign': 6, 'regvd': 125, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
386         set_bit(sc->curcoarsesig1->data[i], fs->words[i]);                                                                                                  {'PLBART': -1, 'devign': 67, 'regvd': 28, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
388     }                                                                                                                                                       {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
390     /* assuming the actual frame is the last */                                                                                                             {'PLBART': -1, 'devign': -1, 'regvd': 114, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
392     sc->curcoarsesig1->last = fs;                                                                                                                           {'PLBART': -1, 'devign': 77, 'regvd': 111, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
394     if (sc->midcoarse) {                                                                                                                                    {'PLBART': -1, 'devign': 96, 'regvd': 155, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
396         for (i = 0; i < 5; i++) {                                                                                                                           {'PLBART': -1, 'devign': 5, 'regvd': 124, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
398             set_bit(sc->curcoarsesig2->data[i], fs->words[i]);                                                                                              {'PLBART': -1, 'devign': 46, 'regvd': 26, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
400         }                                                                                                                                                   {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
402         sc->curcoarsesig2->last = fs;                                                                                                                       {'PLBART': -1, 'devign': 74, 'regvd': 106, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
404     }                                                                                                                                                       {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
408     sc->coarsecount = (sc->coarsecount+1)%90;                                                                                                               {'PLBART': -1, 'devign': 79, 'regvd': 76, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
412     /* debug printing finesignature */                                                                                                                      {'PLBART': -1, 'devign': -1, 'regvd': 82, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
414     if (av_log_get_level() == AV_LOG_DEBUG) {                                                                                                               {'PLBART': -1, 'devign': 92, 'regvd': 102, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
416         av_log(ctx, AV_LOG_DEBUG, "input %d, confidence: %d\n", FF_INLINK_IDX(inlink), fs->confidence);                                                     {'PLBART': -1, 'devign': -1, 'regvd': 20, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
420         av_log(ctx, AV_LOG_DEBUG, "words:");                                                                                                                {'PLBART': -1, 'devign': -1, 'regvd': 38, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
422         for (i = 0; i < 5; i++) {                                                                                                                           {'PLBART': -1, 'devign': 4, 'regvd': 123, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
424             av_log(ctx, AV_LOG_DEBUG, " %d:", fs->words[i] );                                                                                               {'PLBART': -1, 'devign': -1, 'regvd': 22, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
426             av_log(ctx, AV_LOG_DEBUG, " %d", fs->words[i] / pot3[0] );                                                                                      {'PLBART': -1, 'devign': 115, 'regvd': 12, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
428             for (j = 1; j < 5; j++)                                                                                                                         {'PLBART': -1, 'devign': 16, 'regvd': 138, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
430                 av_log(ctx, AV_LOG_DEBUG, ",%d", fs->words[i] % pot3[j-1] / pot3[j] );                                                                      {'PLBART': -1, 'devign': -1, 'regvd': 15, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
432             av_log(ctx, AV_LOG_DEBUG, ";");                                                                                                                 {'PLBART': -1, 'devign': -1, 'regvd': 64, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
434         }                                                                                                                                                   {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
436         av_log(ctx, AV_LOG_DEBUG, "\n");                                                                                                                    {'PLBART': -1, 'devign': -1, 'regvd': 57, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
440         av_log(ctx, AV_LOG_DEBUG, "framesignature:");                                                                                                       {'PLBART': -1, 'devign': -1, 'regvd': 40, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
442         for (i = 0; i < SIGELEM_SIZE/5; i++) {                                                                                                              {'PLBART': -1, 'devign': 3, 'regvd': 80, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
444             av_log(ctx, AV_LOG_DEBUG, " %d", fs->framesig[i] / pot3[0] );                                                                                   {'PLBART': -1, 'devign': 114, 'regvd': 19, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
446             for (j = 1; j < 5; j++)                                                                                                                         {'PLBART': -1, 'devign': 15, 'regvd': 137, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
448                 av_log(ctx, AV_LOG_DEBUG, ",%d", fs->framesig[i] % pot3[j-1] / pot3[j] );                                                                   {'PLBART': -1, 'devign': -1, 'regvd': 21, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
450         }                                                                                                                                                   {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
452         av_log(ctx, AV_LOG_DEBUG, "\n");                                                                                                                    {'PLBART': -1, 'devign': -1, 'regvd': 56, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
454     }                                                                                                                                                       {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
458     if (FF_INLINK_IDX(inlink) == 0)                                                                                                                         {'PLBART': -1, 'devign': 106, 'regvd': 75, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
460         return ff_filter_frame(inlink->dst->outputs[0], picref);                                                                                            {'PLBART': -1, 'devign': 86, 'regvd': 18, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
462     return 1;                                                                                                                                               {'PLBART': -1, 'devign': 153, 'regvd': 168, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
464 }                                                                                                                                                           {'PLBART': -1, 'devign': -1, 'regvd': -1, 'vulberta_cnn': -1, 'vulberta_mlp': -1}
-----------------------
Highlighted lines: 
14     static const uint8_t pot3[5] = { 3*3*3*3, 3*3*3, 3*3, 3, 1 };
--------------------------------------------------------------------------------------------------------------
39
